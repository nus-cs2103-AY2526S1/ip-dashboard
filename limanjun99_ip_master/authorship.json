[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"# Waddles project template","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"This is a project template for a greenfield Java project. Its naming is inspired by penguins. Given below are instructions on how to use it.","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 17, update Intellij to the most recent version.","lastModifiedDate":"2024-07-11T16:50:14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 17** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2024-07-11T16:50:14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29T20:29:39","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"1. After that, locate the `src/main/java/Waddles.java` file, right-click it, and choose `Run Waddles.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    --------------------------------------------------------------------------------","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"    Hello! I\u0027m Waddles.","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"    What can I do for you?","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"    --------------------------------------------------------------------------------","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"    --------------------------------------------------------------------------------","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"    Bye. Hope to see you again soon!","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"    --------------------------------------------------------------------------------","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04T21:44:28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"**Warning:** Keep the `src\\main\\java` folder as the root folder for Java files (i.e., don\u0027t rename those folders or move Java files to another folder outside of this folder path), as this is the default location some tools (e.g., Gradle) expect to find Java files.","lastModifiedDate":"2025-01-04T21:44:28","isFullCredit":false}],"authorContributionMap":{"limanjun99":10,"-":17}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05T15:24:02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2025-09-01T16:55:10","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-09-01T16:55:10","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-09-01T16:55:10","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"checkstyle {","lastModifiedDate":"2025-09-01T16:55:10","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"    toolVersion \u003d \u002711.0.0\u0027","lastModifiedDate":"2025-09-01T16:55:10","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05T15:24:02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05T15:24:02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"    mainClass.set(\"waddles.Waddles\")","lastModifiedDate":"2025-08-26T20:07:54","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"    archiveBaseName \u003d \"waddles\"","lastModifiedDate":"2025-08-26T20:07:54","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false}],"authorContributionMap":{"-":39,"limanjun99":7}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"# Waddles User Guide","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"// Update the title above to match the actual product name","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"// Product screenshot goes here","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"// Product intro goes here","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Adding deadlines","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"// Describe the action and its outcome.","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"// Give examples of usage","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"Example: `keyword (optional arguments)`","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"// A description of the expected outcome goes here","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Feature ABC","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Feature XYZ","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false}],"authorContributionMap":{"limanjun99":1,"-":29}},{"path":"src/main/java/waddles/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles;","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":" * Enum of all possible commands handled by Waddles.","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":" * Note that {@code Command.INVALID} represents an unknown command,","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":" * with the given command string stored in the {@code name} field.","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"public enum Command {","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"    BYE(\"bye\"), LIST(\"list\"), MARK(\"mark\"), UNMARK(\"unmark\"), TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\"),","lastModifiedDate":"2025-08-27T11:04:26","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"    DELETE(\"delete\"), FIND(\"find\"), INVALID(\"invalid\");","lastModifiedDate":"2025-08-27T13:00:43","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"    private String name;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"    Command(String name) {","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"        this.name \u003d name;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"     * Parses a string and returns the command it corresponds to.","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"     * If the string is not a valid command, then {@code Command.INVALID} is returned.","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"    public static Command fromString(String s) {","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"        for (Command command : Command.values()) {","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"            if (!command.equals(INVALID) \u0026\u0026 command.toString().equals(s)) {","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"                return command;","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"            }","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"        Command invalid \u003d INVALID;","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"        invalid.name \u003d s;","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"        return invalid;","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"    @Override","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"    public String toString() {","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"        return this.name;","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false}],"authorContributionMap":{"limanjun99":37}},{"path":"src/main/java/waddles/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles;","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Task;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":" * Helps to parse the user input into a command.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":" * The expected format looks like this:","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":" * {@code \u003ccommand\u003e \u003carg\u003e /\u003ckey1\u003e \u003cvalue1\u003e /\u003ckey2\u003e \u003cvalue2\u003e}","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":" *","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":" * \u003cbr\u003e","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":" * E.g.:","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":" * {@code event project meeting /from 1pm /to 3pm}","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"public class Parser {","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    private final String input;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"    private final Command command;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"    private int consumed;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"     * Constructs a new parser.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"     *","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"     * @param input User input to be parsed.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"    public Parser(String input) {","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"        this.input \u003d input;","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"        this.command \u003d input.isEmpty() ? Command.INVALID : Command.fromString(input.split(\" \", 2)[0]);","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"        this.consumed \u003d this.command.toString().length() + 1; // +1 to consume the space after the command.","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"    public Command getCommand() {","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"        return command;","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"     * Reads an argument until the given delimiter.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"     *","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"     * @param argument  Describes the current argument being read.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"     * @param delimiter Delimiter to read until (empty if reading until the end).","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"    public String readArgument(String argument, String delimiter) throws WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"        if (consumed \u003e\u003d this.input.length()) {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"            throw new WaddlesException.MissingArgument(argument);","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"        int argumentEnd \u003d delimiter.isEmpty() ? input.length() : input.indexOf(delimiter, consumed);","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"limanjun99"},"content":"        if (argumentEnd \u003d\u003d -1) {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"limanjun99"},"content":"            // If delimiter is missing, just consume all remaining input.","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"limanjun99"},"content":"            // We will throw on the next call to this function when the user tries to read the next argument,","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"limanjun99"},"content":"            // and we find that we consumed everything.","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"limanjun99"},"content":"            argumentEnd \u003d input.length();","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"limanjun99"},"content":"        String argumentValue \u003d input.substring(consumed, argumentEnd);","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"limanjun99"},"content":"        consumed \u003d argumentEnd + delimiter.length();","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"limanjun99"},"content":"        if (argumentValue.isEmpty()) {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"limanjun99"},"content":"            throw new WaddlesException.MissingArgument(argument);","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"limanjun99"},"content":"        return argumentValue;","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"limanjun99"},"content":"     * Reads an integer argument until the given delimiter.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"limanjun99"},"content":"     *","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"limanjun99"},"content":"     * @param argument  Describes the current argument being read.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"limanjun99"},"content":"     * @param delimiter Delimiter to read until (empty if reading until the end).","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"limanjun99"},"content":"    public int readIntegerArgument(String argument, String delimiter) throws WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"limanjun99"},"content":"        String rawArgument \u003d readArgument(argument, delimiter);","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"limanjun99"},"content":"            return Integer.parseInt(rawArgument);","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"limanjun99"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"limanjun99"},"content":"            throw new WaddlesException.InvalidArgument(argument, String.format(\"expected integer, got %s\",","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"limanjun99"},"content":"                    rawArgument));","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"limanjun99"},"content":"     * Reads a datetime argument until the given delimiter.","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"limanjun99"},"content":"     * The datetime argument should have the format \"yyyy-MM-dd HH:mm\".","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"limanjun99"},"content":"     *","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"limanjun99"},"content":"     * @param argument  Describes the current argument being read.","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"limanjun99"},"content":"     * @param delimiter Delimiter to read until (empty if reading until the end).","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"limanjun99"},"content":"    public LocalDateTime readDateTimeArgument(String argument, String delimiter) throws WaddlesException {","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"limanjun99"},"content":"        String rawArgument \u003d readArgument(argument, delimiter);","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"limanjun99"},"content":"            return LocalDateTime.parse(rawArgument, Task.INPUT_DATETIME_FORMATTER);","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"limanjun99"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"limanjun99"},"content":"            throw new WaddlesException.InvalidArgument(argument,","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"limanjun99"},"content":"                    String.format(\"expected a date+time in format %s, \" + \"got %s\", Task.INPUT_DATETIME_FORMAT,","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"limanjun99"},"content":"                            rawArgument));","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false}],"authorContributionMap":{"limanjun99":95}},{"path":"src/main/java/waddles/SaveFile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles;","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import java.io.File;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"import java.io.IOException;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Deadline;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Event;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Task;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Tasks;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Todo;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":" * This class handles saving/loading tasks to/from disk, so that user sessions are persisted across runs.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"public class SaveFile {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"    public static final String SAVE_PATH \u003d \"./data/waddles.txt\";","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"     * Saves the given tasks to a save file in SAVE_PATH.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"    public void save(Tasks tasks) throws WaddlesException.FileError {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"        createSaveDirectory();","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"            FileWriter writer \u003d new FileWriter(SAVE_PATH);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.getSize(); i++) {","lastModifiedDate":"2025-08-27T11:24:37","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"                writer.write(tasks.getUnchecked(i).toSerializedString());","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"                writer.write(\"\\n\");","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"            }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"            writer.close();","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"            throw new WaddlesException.FileError(String.format(\"Failed to write to %s (%s)\", SAVE_PATH,","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"                    e.getMessage()));","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"     * Loads the tasks from the previous save file at SAVE_PATH.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"     * If there is no save file, we return an empty Tasks.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"    public Tasks load() {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"            File file \u003d new File(SAVE_PATH);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"limanjun99"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"limanjun99"},"content":"            Tasks tasks \u003d new Tasks();","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"limanjun99"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"limanjun99"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"limanjun99"},"content":"                Task task \u003d deserializeLine(line);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"limanjun99"},"content":"                tasks.add(task);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"limanjun99"},"content":"            }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"limanjun99"},"content":"            return tasks;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"limanjun99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"limanjun99"},"content":"            return new Tasks();","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"limanjun99"},"content":"     * Creates the directory to place the save file in, if it does not already exist.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"limanjun99"},"content":"    private void createSaveDirectory() throws WaddlesException.FileError {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"limanjun99"},"content":"            Path directoryPath \u003d Paths.get(SAVE_PATH).getParent();","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"limanjun99"},"content":"            Files.createDirectories(directoryPath);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"limanjun99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"limanjun99"},"content":"            throw new WaddlesException.FileError(String.format(\"Failed to create %s (%s)\", SAVE_PATH, e.getMessage()));","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"limanjun99"},"content":"     * Deserializes a single line of the savefile into its corresponding task.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"limanjun99"},"content":"     * WARNING: Assumes that the line is a serialization of some task.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"limanjun99"},"content":"    private Task deserializeLine(String line) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"limanjun99"},"content":"        if (Deadline.isSerialization(line)) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"limanjun99"},"content":"            return Deadline.fromSerializedString(line);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"limanjun99"},"content":"        } else if (Event.isSerialization(line)) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"limanjun99"},"content":"            return Event.fromSerializedString(line);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"limanjun99"},"content":"        } else /* if (Todo.isSerialization(line)) */ {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"limanjun99"},"content":"            return Todo.fromSerializedString(line);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false}],"authorContributionMap":{"limanjun99":86}},{"path":"src/main/java/waddles/Waddles.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles;","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Deadline;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Event;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Task;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Tasks;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Todo;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T20:45:16","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":" * Waddles is a chatbot that manages user tasks.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"public class Waddles {","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"    private final Tasks tasks;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"    private final SaveFile saveFile;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    private final WaddlesUi ui;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"     * Constructs a new Waddles object.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"    public Waddles() {","lastModifiedDate":"2025-08-17T22:54:57","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"        saveFile \u003d new SaveFile();","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"        tasks \u003d saveFile.load();","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"        ui \u003d new WaddlesUi();","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T22:54:57","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T22:54:57","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"        Waddles waddles \u003d new Waddles();","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"        waddles.run();","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-17T22:54:57","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"     * Starts the Waddles chatbot.","lastModifiedDate":"2025-08-17T22:54:57","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"     * Listens to user input from stdin and responds appropriately to stdout.","lastModifiedDate":"2025-08-17T22:54:57","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-17T22:54:57","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"    public void run() {","lastModifiedDate":"2025-08-17T22:54:57","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"        ui.printGreeting();","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-08-17T20:45:16","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"        boolean isDone \u003d false;","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"        while (!isDone) {","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2025-08-17T20:45:16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"            try {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"                isDone \u003d handleInput(input);","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"                saveFile.save(tasks);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"limanjun99"},"content":"            } catch (WaddlesException e) {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"limanjun99"},"content":"                ui.printError(e);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"limanjun99"},"content":"            }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-17T20:45:16","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T22:54:57","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"limanjun99"},"content":"        ui.printFarewell();","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T20:45:16","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T20:45:16","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"limanjun99"},"content":"     * Handles a single line of input from the user.","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"limanjun99"},"content":"     *","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"limanjun99"},"content":"     * @return Whether this input should make Waddles exit.","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"limanjun99"},"content":"    private boolean handleInput(String input) throws WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"limanjun99"},"content":"        Parser parser \u003d new Parser(input);","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"limanjun99"},"content":"        Command command \u003d parser.getCommand();","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"limanjun99"},"content":"        switch (command) {","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"limanjun99"},"content":"        case BYE -\u003e {","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"limanjun99"},"content":"            return true;","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"limanjun99"},"content":"        case LIST -\u003e ui.printTasks(tasks);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"limanjun99"},"content":"        case MARK -\u003e handleMark(parser);","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"limanjun99"},"content":"        case UNMARK -\u003e handleUnmark(parser);","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"limanjun99"},"content":"        case TODO -\u003e handleAddTodo(parser);","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"limanjun99"},"content":"        case DEADLINE -\u003e handleAddDeadline(parser);","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"limanjun99"},"content":"        case EVENT -\u003e handleAddEvent(parser);","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"limanjun99"},"content":"        case DELETE -\u003e handleDelete(parser);","lastModifiedDate":"2025-08-19T01:09:24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"limanjun99"},"content":"        case FIND -\u003e handleFind(parser);","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"limanjun99"},"content":"        default -\u003e throw new WaddlesException.InvalidCommand(input);","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"limanjun99"},"content":"        return false;","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T23:03:52","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"limanjun99"},"content":"     * Adds a new Todo task.","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"limanjun99"},"content":"     * The user input should have the format {@code todo \u003ctask description\u003e}.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"limanjun99"},"content":"    private void handleAddTodo(Parser parser) throws WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"limanjun99"},"content":"        String description \u003d parser.readArgument(\"task description\", \"\");","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"limanjun99"},"content":"        Todo todo \u003d new Todo(description, false);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"limanjun99"},"content":"        tasks.add(todo);","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"limanjun99"},"content":"        ui.printAddedTask(tasks, todo);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"limanjun99"},"content":"     * Adds a new Deadline task.","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"limanjun99"},"content":"     * The user input should have the format {@code deadline \u003ctask description\u003e /by \u003cdeadline\u003e}.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"limanjun99"},"content":"    private void handleAddDeadline(Parser parser) throws WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"limanjun99"},"content":"        String description \u003d parser.readArgument(\"task description\", \" /by \");","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"limanjun99"},"content":"        LocalDateTime by \u003d parser.readDateTimeArgument(\"deadline (/by)\", \"\");","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"limanjun99"},"content":"        Deadline deadline \u003d new Deadline(description, false, by);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"limanjun99"},"content":"        tasks.add(deadline);","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"limanjun99"},"content":"        ui.printAddedTask(tasks, deadline);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"limanjun99"},"content":"     * Adds a new Event task.","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"limanjun99"},"content":"     * The user input should have the format {@code event \u003ctask description\u003e /from \u003cstart\u003e /to \u003cend\u003e}.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"limanjun99"},"content":"    private void handleAddEvent(Parser parser) throws WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"limanjun99"},"content":"        String description \u003d parser.readArgument(\"task description\", \" /from \");","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"limanjun99"},"content":"        LocalDateTime from \u003d parser.readDateTimeArgument(\"from (/from)\", \" /to \");","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"limanjun99"},"content":"        LocalDateTime to \u003d parser.readDateTimeArgument(\"to (/to)\", \"\");","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"limanjun99"},"content":"        Event event \u003d new Event(description, false, from, to);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"limanjun99"},"content":"        tasks.add(event);","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"limanjun99"},"content":"        ui.printAddedTask(tasks, event);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"limanjun99"},"content":"     * Marks a task as done.","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"limanjun99"},"content":"     * The user input should have the format {@code mark \u003ctask_index\u003e}.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"limanjun99"},"content":"    private void handleMark(Parser parser) throws WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"limanjun99"},"content":"        int taskIndex \u003d parser.readIntegerArgument(\"task index\", \"\");","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"limanjun99"},"content":"        Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"limanjun99"},"content":"        task.setDone(true);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"limanjun99"},"content":"        ui.printMarkedTask(task);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"limanjun99"},"content":"     * Unmarks a done task (i.e. sets it to be undone).","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"limanjun99"},"content":"     * The user input should have the format {@code unmark \u003ctask_index\u003e}.","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"limanjun99"},"content":"    private void handleUnmark(Parser parser) throws WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"limanjun99"},"content":"        int taskIndex \u003d parser.readIntegerArgument(\"task index\", \"\");","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"limanjun99"},"content":"        Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"limanjun99"},"content":"        task.setDone(false);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"limanjun99"},"content":"        ui.printUnmarkedTask(task);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T20:45:16","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T20:45:16","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-19T00:47:22","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"limanjun99"},"content":"     * Deletes a task.","lastModifiedDate":"2025-08-19T00:47:22","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"limanjun99"},"content":"     * The user input should have the format {@code delete \u003ctask_index\u003e}.","lastModifiedDate":"2025-08-19T00:47:22","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-19T00:47:22","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"limanjun99"},"content":"    private void handleDelete(Parser parser) throws WaddlesException {","lastModifiedDate":"2025-08-19T00:47:22","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"limanjun99"},"content":"        int taskIndex \u003d parser.readIntegerArgument(\"task index\", \"\");","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"limanjun99"},"content":"        Task task \u003d tasks.remove(taskIndex);","lastModifiedDate":"2025-08-19T00:47:22","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"limanjun99"},"content":"        ui.printDeletedTask(tasks, task);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T23:55:50","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"limanjun99"},"content":"     * Finds tasks containing a keyword.","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"limanjun99"},"content":"     * The user input should have the format {@code find \u003ckeyword\u003e}.","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"limanjun99"},"content":"    private void handleFind(Parser parser) throws WaddlesException {","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"limanjun99"},"content":"        String keyword \u003d parser.readArgument(\"keyword\", \"\");","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"limanjun99"},"content":"        Tasks filteredTasks \u003d tasks.find(keyword);","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"limanjun99"},"content":"        ui.printTasks(filteredTasks);","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-17T19:12:16","isFullCredit":false}],"authorContributionMap":{"limanjun99":158}},{"path":"src/main/java/waddles/WaddlesException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles;","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":" * Base class for all possible exceptions that Waddles can throw.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"public class WaddlesException extends Exception {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"    public WaddlesException(String message) {","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"        super(message);","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"     * Thrown when the user types an unrecognized command.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"    public static class InvalidCommand extends WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"        public InvalidCommand(String command) {","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"            super(String.format(\"Invalid command: \\\"%s\\\".\", command));","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"     * Thrown when the user executes a command, but is missing an argument for that command.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"    public static class MissingArgument extends WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"        public MissingArgument(String argument) {","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"            super(String.format(\"Missing argument %s.\", argument));","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"     * Thrown when the user executes a command and supplied an argument, but the argument is invalid.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"    public static class InvalidArgument extends WaddlesException {","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"        public InvalidArgument(String argument, String reason) {","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"            super(String.format(\"Argument \\\"%s\\\" is invalid (%s)\", argument, reason));","lastModifiedDate":"2025-08-24T15:50:46","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"     * Thrown when Waddles needs to read/write/open a file, but encountered an error.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"    public static class FileError extends WaddlesException {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"        public FileError(String message) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"            super(message);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false}],"authorContributionMap":{"limanjun99":46}},{"path":"src/main/java/waddles/WaddlesUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles;","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Task;","lastModifiedDate":"2025-08-26T18:45:35","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"import waddles.task.Tasks;","lastModifiedDate":"2025-08-26T18:45:35","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:45:35","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":" * Handles printing information to the command line.","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"public class WaddlesUi {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"    private static final String NAME \u003d \"Waddles\";","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"     * Prints a greeting to the user.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"    public void printGreeting() {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"        String greeting \u003d String.format(\"Hello! I\u0027m %s.\\n\" + \"What can I do for you?\", NAME);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"        printMessage(greeting);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"     * Prints a farewell message.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"    public void printFarewell() {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"        String farewell \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"        printMessage(farewell);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"     * Prints a list of tasks.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"    public void printTasks(Tasks tasks) {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.getSize(); i++) {","lastModifiedDate":"2025-08-27T11:24:37","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"            builder.append(String.format(\"%d. %s\\n\", i, tasks.getUnchecked(i)));","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"        printMessage(builder.toString());","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"     * Prints a verification message for adding a task.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"     *","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"     * @param tasks   Set of tasks after adding newTask.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"     * @param newTask The new task to be added.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"    public void printAddedTask(Tasks tasks, Task newTask) {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"        printMessage(String.format(\"\"\"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"                Got it. I\u0027ve added this task:","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"limanjun99"},"content":"                  %s","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"limanjun99"},"content":"                Now you have %d tasks in the list.\"\"\", newTask, tasks.getSize()));","lastModifiedDate":"2025-08-27T11:24:37","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"limanjun99"},"content":"     * Prints a verification message for deleting a task.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"limanjun99"},"content":"     *","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"limanjun99"},"content":"     * @param tasks   Set of tasks after deleting oldTask.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"limanjun99"},"content":"     * @param oldTask The old task to be deleted.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"limanjun99"},"content":"    public void printDeletedTask(Tasks tasks, Task oldTask) {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"limanjun99"},"content":"        printMessage(String.format(\"\"\"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"limanjun99"},"content":"                Noted. I\u0027ve removed this task:","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"limanjun99"},"content":"                  %s","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"limanjun99"},"content":"                Now you have %d tasks in the list.\"\"\", oldTask, tasks.getSize()));","lastModifiedDate":"2025-08-27T11:24:37","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"limanjun99"},"content":"     * Prints a verification message for marking a task as done.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"limanjun99"},"content":"    public void printMarkedTask(Task task) {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"limanjun99"},"content":"        printMessage(String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", task));","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"limanjun99"},"content":"     * Prints a verification message for marking a task as not done.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"limanjun99"},"content":"    public void printUnmarkedTask(Task task) {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"limanjun99"},"content":"        printMessage(String.format(\"Ok, I\u0027ve marked this task as not done yet:\\n%s\", task));","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"limanjun99"},"content":"     * Formats the message nicely and prints it to stdout.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"limanjun99"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"limanjun99"},"content":"        String leftPadding \u003d \" \".repeat(4);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"limanjun99"},"content":"        String horizontalLine \u003d \"-\".repeat(80);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"limanjun99"},"content":"        System.out.println(leftPadding + horizontalLine);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"limanjun99"},"content":"        for (String line : message.split(\"\\n\")) {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"limanjun99"},"content":"            System.out.println(leftPadding + line);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"limanjun99"},"content":"        System.out.println(leftPadding + horizontalLine);","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"limanjun99"},"content":"     * Formats the error nicely and prints it to stdout.","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"limanjun99"},"content":"    public void printError(WaddlesException error) {","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"limanjun99"},"content":"        printMessage(String.format(\"ERROR:\\n%s\", error.getMessage()));","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:20:42","isFullCredit":false}],"authorContributionMap":{"limanjun99":99}},{"path":"src/main/java/waddles/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles.task;","lastModifiedDate":"2025-08-26T18:45:35","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":" * Deadlines are like Todos, with the addition that they must be completed by a certain time.","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"     * Constructs a new Deadline object.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"    public Deadline(String description, boolean isDone, LocalDateTime by) {","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"        super(description, isDone);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"        this.by \u003d by;","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"     * Returns a Deadline from the serialized string.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"     * WARNING: Assumes that the given string is a serialization of some Deadline.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"    public static Deadline fromSerializedString(String serialized) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"        String[] fields \u003d Task.splitSerialized(serialized);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"        boolean isDone \u003d fields[1].equals(\"1\");","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"        String description \u003d fields[2];","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"        LocalDateTime by \u003d LocalDateTime.parse(fields[3], Task.OUTPUT_DATETIME_FORMATTER);","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"        return new Deadline(description, isDone, by);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"     * Returns whether the given string is a serialization of a Deadline.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"     * WARNING: Assumes that the given string is a serialization of some Task.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"    public static boolean isSerialization(String serialized) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"        return serialized.startsWith(\"D |\");","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"     * Returns a formatted string of when this deadline is due by.","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"    public String getByString() {","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"        return this.by.format(Task.OUTPUT_DATETIME_FORMATTER);","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"     * Returns a serialization of this deadline.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"limanjun99"},"content":"     * Serialization format: \u003ccode\u003eD | isDone | description | by\u003c/code\u003e.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"limanjun99"},"content":"    @Override","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"limanjun99"},"content":"    public String toSerializedString() {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"limanjun99"},"content":"        return String.format(\"D | %s | %s\", super.toSerializedString(), getByString());","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"limanjun99"},"content":"    @Override","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"limanjun99"},"content":"    public String toString() {","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"limanjun99"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), getByString());","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false}],"authorContributionMap":{"limanjun99":59}},{"path":"src/main/java/waddles/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles.task;","lastModifiedDate":"2025-08-26T18:45:35","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":" * Events have a description and completion status, as well as a start and ending datetime.","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"public class Event extends Task {","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"    private final LocalDateTime start;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"    private final LocalDateTime end;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"     * Constructs a new Event object.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"    public Event(String description, boolean isDone, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"        super(description, isDone);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"        this.start \u003d start;","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"        this.end \u003d end;","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"     * Returns an Event from the serialized string.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"     * WARNING: Assumes that the given string is a serialization of some Event.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"    public static Event fromSerializedString(String serialized) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"        String[] fields \u003d Task.splitSerialized(serialized);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"        boolean isDone \u003d fields[1].equals(\"1\");","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"        String description \u003d fields[2];","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"        String[] timing \u003d fields[3].split(\"-\");","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(timing[0], Task.OUTPUT_DATETIME_FORMATTER);","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(timing[1], Task.OUTPUT_DATETIME_FORMATTER);","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"        return new Event(description, isDone, start, end);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"     * Returns whether the given string is a serialization of an Event.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"     * WARNING: Assumes that the given string is a serialization of some Task.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"    public static boolean isSerialization(String serialized) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"        return serialized.startsWith(\"E |\");","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"     * Returns a formatted string of this event\u0027s start time.","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"    public String getStartString() {","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"        return this.start.format(Task.OUTPUT_DATETIME_FORMATTER);","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"limanjun99"},"content":"     * Returns a formatted string of this event\u0027s end time.","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"limanjun99"},"content":"    public String getEndString() {","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"limanjun99"},"content":"        return this.end.format(Task.OUTPUT_DATETIME_FORMATTER);","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"limanjun99"},"content":"     * Returns a serialization of this event.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"limanjun99"},"content":"     * Serialization format: \u003ccode\u003eE | isDone | description | start-end\u003c/code\u003e.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"limanjun99"},"content":"    @Override","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"limanjun99"},"content":"    public String toSerializedString() {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"limanjun99"},"content":"        return String.format(\"E | %s | %s-%s\", super.toSerializedString(), getStartString(), getEndString());","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"limanjun99"},"content":"    @Override","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"limanjun99"},"content":"    public String toString() {","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"limanjun99"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), getStartString(), getEndString());","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false}],"authorContributionMap":{"limanjun99":70}},{"path":"src/main/java/waddles/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles.task;","lastModifiedDate":"2025-08-26T18:45:35","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":" * Base Task class for all types of tasks.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"public abstract class Task {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"    public static final String INPUT_DATETIME_FORMAT \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"    public static final DateTimeFormatter INPUT_DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(INPUT_DATETIME_FORMAT);","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"    public static final String OUTPUT_DATETIME_FORMAT \u003d \"MMM dd yyyy HH:mm\";","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"    public static final DateTimeFormatter OUTPUT_DATETIME_FORMATTER \u003d","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"            DateTimeFormatter.ofPattern(OUTPUT_DATETIME_FORMAT);","lastModifiedDate":"2025-08-27T11:18:56","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"    private final String description;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"    private boolean isDone;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"     * Constructs a new Task object.","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"     * Splits the given serialization of some Task into its fields.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"     * E.g. \u003ccode\u003e\"isDone | description\"\u003c/code\u003e becomes \u003ccode\u003e[isDone, description]\u003c/code\u003e.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"    public static String[] splitSerialized(String serialized) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"        return Arrays.stream(serialized.split(\"\\\\|\")).map(String::strip).toArray(String[]::new);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"    public String getDescription() {","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"        return description;","lastModifiedDate":"2025-08-27T13:00:43","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"     * Marks this task as done / undone.","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"     * Returns a serialization of this task.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"     * Serialization format: \u003ccode\u003eisDone | description\u003c/code\u003e.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"limanjun99"},"content":"    public String toSerializedString() {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"limanjun99"},"content":"        return String.format(\"%d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"limanjun99"},"content":"    @Override","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"limanjun99"},"content":"    public String toString() {","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"limanjun99"},"content":"        char doneMarker \u003d isDone ? \u0027X\u0027 : \u0027 \u0027;","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"limanjun99"},"content":"        return String.format(\"[%c] %s\", doneMarker, description);","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-17T23:34:42","isFullCredit":false}],"authorContributionMap":{"limanjun99":58}},{"path":"src/main/java/waddles/task/Tasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles.task;","lastModifiedDate":"2025-08-26T18:45:35","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:45:35","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"import waddles.WaddlesException;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":" * Represents a lists of tasks.","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":" * Note that this data structure is 1-indexed.","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"public class Tasks {","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"    public Tasks() {","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"     * Returns the task at the given index (1-indexed).","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"    public Task get(int index) throws WaddlesException.InvalidArgument {","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"        checkIndex(index);","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"        return getUnchecked(index);","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"     * Returns the task at the given index (1-indexed).","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"     * Does not perform range checks (i.e. you get runtime error if index is out of bounds).","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"    public Task getUnchecked(int index) {","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"        return tasks.get(index - 1);","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"     * Returns all tasks containing the given keyword in their description.","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"    public Tasks find(String keyword) {","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"        Tasks filteredTasks \u003d new Tasks();","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"                filteredTasks.add(task);","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"            }","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"        return filteredTasks;","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"limanjun99"},"content":"     * Returns the number of tasks.","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"limanjun99"},"content":"    public int getSize() {","lastModifiedDate":"2025-08-27T11:24:37","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"limanjun99"},"content":"        return tasks.size();","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"limanjun99"},"content":"     * Adds a new task to this list of tasks.","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"limanjun99"},"content":"    public void add(Task task) {","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"limanjun99"},"content":"        tasks.add(task);","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"limanjun99"},"content":"     * Removes the task at the given index (1-indexed).","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"limanjun99"},"content":"     *","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"limanjun99"},"content":"     * @return The removed task.","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"limanjun99"},"content":"    public Task remove(int index) throws WaddlesException.InvalidArgument {","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"limanjun99"},"content":"        checkIndex(index);","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"limanjun99"},"content":"        return tasks.remove(index - 1);","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"limanjun99"},"content":"     * Checks if the given index is valid,","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"limanjun99"},"content":"     * i.e. within the range [1, size()].","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"limanjun99"},"content":"     *","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"limanjun99"},"content":"     * @throws WaddlesException.InvalidArgument if out of range.","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"limanjun99"},"content":"    private void checkIndex(int index) throws WaddlesException.InvalidArgument {","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"limanjun99"},"content":"        if (index \u003c\u003d 0 || index \u003e tasks.size()) {","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"limanjun99"},"content":"            throw new WaddlesException.InvalidArgument(\"task index\",","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"limanjun99"},"content":"                    String.format(\"%d is out of\" + \" range of [1, \" + \"%d]\", index, getSize()));","lastModifiedDate":"2025-08-27T11:24:37","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-24T16:07:20","isFullCredit":false}],"authorContributionMap":{"limanjun99":83}},{"path":"src/main/java/waddles/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles.task;","lastModifiedDate":"2025-08-26T18:45:35","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"/**","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":" * Todos are the most generic task - they only have a description and completion status.","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":" */","lastModifiedDate":"2025-08-26T23:35:06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"        super(description, isDone);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"     * Returns a Todo from the serialized string.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"     * WARNING: Assumes that the given string is a serialization of some Todo.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"    public static Todo fromSerializedString(String serialized) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"        String[] fields \u003d Task.splitSerialized(serialized);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"        boolean isDone \u003d fields[1].equals(\"1\");","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"        String description \u003d fields[2];","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"        return new Todo(description, isDone);","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"     * Returns whether the given string is a serialization of a Todo.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"     * WARNING: Assumes that the given string is a serialization of some Task.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"    public static boolean isSerialization(String serialized) {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"        return serialized.startsWith(\"T |\");","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"    /**","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"     * Returns a serialization of this todo.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"     * Serialization format: \u003ccode\u003eT | isDone | description\u003c/code\u003e.","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"     */","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"    @Override","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"    public String toSerializedString() {","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"        return String.format(\"T | %s\", super.toSerializedString());","lastModifiedDate":"2025-08-26T14:18:07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"    @Override","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"    public String toString() {","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-18T22:29:46","isFullCredit":false}],"authorContributionMap":{"limanjun99":43}},{"path":"src/test/java/waddles/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"public class ParserTest {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"    public void readArgument_hasArgument_success() throws WaddlesException {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"        Parser parser \u003d new Parser(\"command argument /key value\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"        String argument \u003d parser.readArgument(\"argument\", \" /key \");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"        assertEquals(\"argument\", argument);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"        String value \u003d parser.readArgument(\"value\", \"\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"        assertEquals(\"value\", value);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"    public void readArgument_missingArgument_throwsException() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"        Parser parser \u003d new Parser(\"command\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"            parser.readArgument(\"argument\", \" /key \");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"            fail();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"        } catch (WaddlesException e) {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"            assertEquals(\"Missing argument argument.\", e.getMessage());","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"    public void readIntegerArgument_validInteger_success() throws WaddlesException {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"        Parser parser \u003d new Parser(\"command 12345\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"        int value \u003d parser.readIntegerArgument(\"argument\", \"\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"        assertEquals(12345, value);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"    public void readIntegerArgument_invalidInteger_throwsException() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"        Parser parser \u003d new Parser(\"command not_integer\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"            parser.readIntegerArgument(\"integer\", \"\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"            fail();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"        } catch (WaddlesException e) {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"            String expectedError \u003d \"Argument \\\"integer\\\" is invalid (expected integer, got not_integer)\";","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"            assertEquals(expectedError, e.getMessage());","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"limanjun99"},"content":"    public void readDateTimeArgument_valid_success() throws WaddlesException {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"limanjun99"},"content":"        Parser parser \u003d new Parser(\"command 2025-10-10 23:30\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"limanjun99"},"content":"        LocalDateTime dateTime \u003d parser.readDateTimeArgument(\"date\", \"\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"limanjun99"},"content":"        assertEquals(LocalDateTime.of(2025, 10, 10, 23, 30), dateTime);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"limanjun99"},"content":"    public void readDateTimeArgument_invalidDateTime_throwsException() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"limanjun99"},"content":"        Parser parser \u003d new Parser(\"command 2025-30-30 23:30\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"limanjun99"},"content":"            parser.readDateTimeArgument(\"date\", \"\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"limanjun99"},"content":"            fail();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"limanjun99"},"content":"        } catch (WaddlesException e) {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"limanjun99"},"content":"            String expectedError \u003d","lastModifiedDate":"2025-08-27T11:04:26","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"limanjun99"},"content":"                    \"Argument \\\"date\\\" is invalid (expected a date+time in format yyyy-MM-dd HH:mm, got \"","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"limanjun99"},"content":"                            + \"2025-30-30 23:30)\";","lastModifiedDate":"2025-09-01T17:18:27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"limanjun99"},"content":"            assertEquals(expectedError, e.getMessage());","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false}],"authorContributionMap":{"limanjun99":70}},{"path":"src/test/java/waddles/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles.task;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"public class DeadlineTest {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"    public void fromSerializedString_valid_success() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"        Deadline actualDeadline \u003d Deadline.fromSerializedString(\"D | 0 | do work | Dec 12 2025 23:59\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"        Deadline expectedDeadline \u003d new Deadline(\"do work\", false, LocalDateTime.of(2025, 12, 12, 23, 59));","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"        assertEquals(expectedDeadline.toString(), actualDeadline.toString());","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    public void toSerializedString_valid_success() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"        Deadline deadline \u003d new Deadline(\"do work\", false, LocalDateTime.of(2025, 12, 12, 23, 59));","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"        String serialized \u003d deadline.toSerializedString();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"        assertEquals(\"D | 0 | do work | Dec 12 2025 23:59\", serialized);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false}],"authorContributionMap":{"limanjun99":23}},{"path":"src/test/java/waddles/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles.task;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"public class EventTest {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"    public void fromSerializedString_valid_success() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"        Event actualEvent \u003d Event.fromSerializedString(\"E | 0 | meeting | Dec 12 2025 23:59-Dec 13 2025 23:59\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"        Event expectedEvent \u003d new Event(\"meeting\", false, LocalDateTime.of(2025, 12, 12, 23, 59),","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"                LocalDateTime.of(2025, 12, 13, 23, 59));","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"        assertEquals(expectedEvent.toString(), actualEvent.toString());","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"    public void toSerializedString_valid_success() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"        Event event \u003d new Event(\"meeting\", false, LocalDateTime.of(2025, 12, 12, 23, 59), LocalDateTime.of(2025, 12,","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"                13, 23, 59));","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"        String serialized \u003d event.toSerializedString();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"        assertEquals(\"E | 0 | meeting | Dec 12 2025 23:59-Dec 13 2025 23:59\", serialized);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false}],"authorContributionMap":{"limanjun99":25}},{"path":"src/test/java/waddles/task/TasksTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles.task;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"import waddles.WaddlesException;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"public class TasksTest {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"    public void get_valid_success() throws WaddlesException {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"        Tasks tasks \u003d new Tasks();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"        tasks.add(new Todo(\"return book\", false));","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"        tasks.get(1);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"    public void get_outOfBounds_throwsException() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"        Tasks tasks \u003d new Tasks();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"            tasks.get(1);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"            fail();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"        } catch (WaddlesException e) {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"            assertEquals(\"Argument \\\"task index\\\" is invalid (1 is out of range of [1, 0])\", e.getMessage());","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"limanjun99"},"content":"    public void remove_valid_success() throws WaddlesException {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"limanjun99"},"content":"        Tasks tasks \u003d new Tasks();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"limanjun99"},"content":"        tasks.add(new Todo(\"return book\", false));","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"limanjun99"},"content":"        tasks.remove(1);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"limanjun99"},"content":"    public void remove_outOfBounds_throwsException() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"limanjun99"},"content":"        Tasks tasks \u003d new Tasks();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"limanjun99"},"content":"        tasks.add(new Todo(\"return book\", false));","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"limanjun99"},"content":"        try {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"limanjun99"},"content":"            tasks.remove(2);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"limanjun99"},"content":"            fail();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"limanjun99"},"content":"        } catch (WaddlesException e) {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"limanjun99"},"content":"            assertEquals(\"Argument \\\"task index\\\" is invalid (2 is out of range of [1, 1])\", e.getMessage());","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"limanjun99"},"content":"        }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false}],"authorContributionMap":{"limanjun99":47}},{"path":"src/test/java/waddles/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"package waddles.task;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-27T12:02:23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"public class TodoTest {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"    public void fromSerializedString_valid_success() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"        Todo actualTodo \u003d Todo.fromSerializedString(\"T | 0 | return book\");","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"        Todo expectedTodo \u003d new Todo(\"return book\", false);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"        assertEquals(actualTodo.toString(), expectedTodo.toString());","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"    @Test","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"    public void toSerializedString_valid_success() {","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"        Todo todo \u003d new Todo(\"return book\", true);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"        String serialized \u003d todo.toSerializedString();","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"        assertEquals(\"T | 1 | return book\", serialized);","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"    }","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"}","lastModifiedDate":"2025-08-26T22:59:54","isFullCredit":false}],"authorContributionMap":{"limanjun99":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"limanjun99"},"content":"todo read book","lastModifiedDate":"2025-08-18T22:40:26","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"limanjun99"},"content":"deadline return book /by 2019-12-02 15:00","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"limanjun99"},"content":"event project meeting /from 2019-10-15 19:30 /to 2019-10-15 20:30","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"limanjun99"},"content":"list","lastModifiedDate":"2025-08-18T22:40:26","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"limanjun99"},"content":"mark 1","lastModifiedDate":"2025-08-18T22:40:26","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"limanjun99"},"content":"mark 2","lastModifiedDate":"2025-08-18T22:40:26","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"limanjun99"},"content":"unmark 1","lastModifiedDate":"2025-08-18T22:40:26","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"limanjun99"},"content":"blah","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"limanjun99"},"content":"mark not_an_integer","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"unmark not_an_integer","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"limanjun99"},"content":"todo","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"limanjun99"},"content":"deadline return book /buy 2025-01-01 13:00","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"limanjun99"},"content":"event project meeting /to 2025-01-01 13:00","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"limanjun99"},"content":"mark -1","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"limanjun99"},"content":"unmark 9","lastModifiedDate":"2025-08-19T00:36:33","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"delete 1","lastModifiedDate":"2025-08-19T00:47:22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"limanjun99"},"content":"list","lastModifiedDate":"2025-08-19T00:47:22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"delete 1","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"limanjun99"},"content":"delete 1","lastModifiedDate":"2025-08-26T16:13:10","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"limanjun99"},"content":"todo return book 1","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"limanjun99"},"content":"todo testing","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"limanjun99"},"content":"todo return book 2","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"find book","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"limanjun99"},"content":"delete 1","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"limanjun99"},"content":"delete 1","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"limanjun99"},"content":"delete 1","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"limanjun99"},"content":"bye","lastModifiedDate":"2025-08-18T22:40:26","isFullCredit":false}],"authorContributionMap":{"limanjun99":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25T17:23:26","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"limanjun99"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\**\\*.java","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"limanjun99"},"content":"java -classpath ..\\bin\\waddles Waddles \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false}],"authorContributionMap":{"-":19,"limanjun99":2}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"limanjun99"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/**/*.java","lastModifiedDate":"2025-08-26T18:32:08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"limanjun99"},"content":"java -classpath ../bin waddles/Waddles \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-08-27T12:56:08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false}],"authorContributionMap":{"-":36,"limanjun99":2}}]
