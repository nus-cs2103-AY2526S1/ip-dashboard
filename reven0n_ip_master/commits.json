{"authorDailyContributionsMap":{"reven0n":[{"date":"2025-08-19T00:00:00","commitResults":[{"hash":"b3d2d9f0c97dd21500f3fca5552d8ae15925ff36","isMergeCommit":false,"messageTitle":"git commit","messageBody":"","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":0}}},{"hash":"f3b34bd2eac6fd966858e2168f5ba6b14bfc52b3","isMergeCommit":false,"messageTitle":"Added functionality to echo commands entered by users","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":2}}},{"hash":"060af7395f35b7e1b56d8675cb2741543e083799","isMergeCommit":false,"messageTitle":"Add ability to store text entered by user and display back to user when requested","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":12},"bat":{"insertions":1,"deletions":1},"md":{"insertions":3,"deletions":3}}},{"hash":"64ce2d35ee69450ec306525e7ffe3797a708878c","isMergeCommit":false,"messageTitle":"Add the ability to mark tasks as done and unmark tasks as undone","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":25,"deletions":8}}},{"hash":"203ef75a6f26b4d1a976026a26bb75393e6b4d14","isMergeCommit":false,"messageTitle":"Added the Task Class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":2}}},{"hash":"1a16e0789206c811fde8ff054dd3d07d8d9b9b13","isMergeCommit":false,"messageTitle":"Add the ability to mark tasks as done and unmark tasks as undone.","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"e81c3d6f9ddf8941de0894e86e890b51f1cc6f63","isMergeCommit":false,"messageTitle":"Added the Todo Class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":0}}},{"hash":"d0bbd815ee1e68e3ebd8cbd8d5bfbb694a1bad92","isMergeCommit":false,"messageTitle":"Added the Deadline Class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":0}}},{"hash":"34bb232135e45a507bf8e34d9587e5611e1cb538","isMergeCommit":false,"messageTitle":"Added the Event Class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":0}}}]},{"date":"2025-08-20T00:00:00","commitResults":[{"hash":"ada4a3851d2fc713c6bebabbd672c4722e353c4e","isMergeCommit":false,"messageTitle":"Minor edits to toString method","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"ef4e9d35d1e2d4e8aa2ad38d5cd79d86252a2a0f","isMergeCommit":false,"messageTitle":"Added ID to each Task for tracking","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":0}}},{"hash":"d109d85cdd1961e893e20c3b1518054e51a01c82","isMergeCommit":false,"messageTitle":"Added support for tracking three types of tasks: Todo, Deadline and Events","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":50,"deletions":8}}},{"hash":"f73afccaa07c089d8f0e2fdb7bd8a7b5e6b650fe","isMergeCommit":false,"messageTitle":"Added SomException Class to handle exceptions.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":0}}},{"hash":"d929b2c1322f14a9414e665907851b27ee67aac8","isMergeCommit":false,"messageTitle":"Added methods to deal with errors such as incorrect inputs entered by the user.","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":137,"deletions":40}}}]},{"date":"2025-08-21T00:00:00","commitResults":[{"hash":"58a4ec3dbebcc41fe25f5f8899c902047161aa4a","isMergeCommit":false,"messageTitle":"Added automated UI testing","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":14,"deletions":0},"sh":{"insertions":2,"deletions":6}}},{"hash":"47960d61be3dca9e7dff8d4761af60d2f7a018e9","isMergeCommit":false,"messageTitle":"Added support for deleting tasks from the list.","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":17}}}]},{"date":"2025-08-27T00:00:00","commitResults":[{"hash":"cacd59633256ab7dbae48705bdce2c9f6a2d4f4e","isMergeCommit":false,"messageTitle":"Add Javadocs for all classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":133,"deletions":6}}}]},{"date":"2025-08-28T00:00:00","commitResults":[{"hash":"61502e6e8a809353af1344f66b2a612a3ab0e380","isMergeCommit":false,"messageTitle":"Add encode() method to Task and subclasses for file saving","messageBody":"Each Task has its own parameters and formatting.\n\nLet\u0027s,\n* make the Task class abstract with an abstract encode() method\n* add the implementation of encode() within each subclass of Task\n","fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":3}}},{"hash":"408259beda527b4997e0b049f101b3c5ca7e7e77","isMergeCommit":false,"messageTitle":"Add Storage class and implement auto-save/load in Som","messageBody":"The app currently loses all tasks when it exits because it does not save data to disk.\n\nLets implement file-based persistence using a Storage class to automatically save and\nload tasks. Tasks are saved in a structured text format and reloaded on startup with\nthe data file stored at ./data/som.txt.\n","fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":0},"java":{"insertions":175,"deletions":20}}},{"hash":"a25efb5198b4a98809b3d96013e586f014c6c7c8","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-7\u0027","messageBody":"","tags":["Level-7"],"fileTypesAndContributionMap":{}},{"hash":"2968dd032cf8ff252f655faa704df517850762b1","isMergeCommit":false,"messageTitle":"Teach the chatbot to understand and format dates and times","messageBody":"The chatbot currently treats date/time inputs as plain strings, limiting\nits ability to parse, compare, or format deadlines and events\nmeaningfully.\n\nLet\u0027s store deadline and event times using java.time.LocalDateTime\nand support date parsing and formatted display.\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":2},"java":{"insertions":47,"deletions":20}}}]},{"date":"2025-08-29T00:00:00","commitResults":[{"hash":"223f2026b767709f76170eeb5f1e7b40eb3a5ab8","isMergeCommit":false,"messageTitle":"Implement date/time parsing and display using LocalDateTime","messageBody":"Teach the chatbot to understand and format dates and times in tasks.\n\nParse date-time input in dd-MM-yyyy format for deadlines and events,\nstore using java.time.LocalDateTime, and display in user-friendly format\n (e.g., Dec 02 2019 6:00PM). Add support for date-based task filtering\nwith the \u0027find\u0027 command.\n\nLet\u0027s do it by using LocalDateTime for accurate date-time\nrepresentation, DateTimeFormatter for parsing and formatting, and\nconsistent integration across Task subclasses.\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0},"java":{"insertions":72,"deletions":3}}},{"hash":"63e3d6a111d192752fa7ab74c378cd381e8f7c3d","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-8\u0027","messageBody":"","tags":["Level-8"],"fileTypesAndContributionMap":{}}]},{"date":"2025-08-30T00:00:00","commitResults":[{"hash":"ebffe686872d20cee59d25f67594520f9469ea63","isMergeCommit":false,"messageTitle":"Refactor Som into modular classes for better objected-oriented design","messageBody":"The code is currently structured in a way where most logic concentrated\nin the Som class, making it harder to maintain and extend.\n\nLet\u0027s extract Som into four key classes:\n* Ui: handles all user interactions\n* Storage: manages loading and saving tasks\n* TaskList: encapsulates the tasks List and related operations\n* Parser: parses user commands and creates tasks\n\nThis is done to improve code organization, readability and\nmaintainability through applying key OOP concepts. Classes now have\nmore specific responsibilities, making it easier to test and maintain.\n\nNo functionality is changed. All features work as before.\n","fileTypesAndContributionMap":{"java":{"insertions":349,"deletions":212}}},{"hash":"3aa37a1e1e89d71bba3a52b41b69e801ddf6a143","isMergeCommit":false,"messageTitle":"Implement Command classes for extensible OOP design","messageBody":"The ChatBot logic was previously handled with if-else statements in the\nmain loop.\n\nLet\u0027s replace the statements with Command classes. Each command is now\na class inheriting from an abstract Command parent class.\n\nThis is done to make the code more modular and aligned with OOP\nprinciples. New commands can be added without modifying existing\nlogic.\n","fileTypesAndContributionMap":{"java":{"insertions":219,"deletions":143}}},{"hash":"e9db7d4f9a8dcc67902667b6f463de69a6ceedfc","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-MoreOOP\u0027","messageBody":"","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{}},{"hash":"a21a02b145804694083c7eb4da8efbb53d6172f8","isMergeCommit":false,"messageTitle":"Organize classes into subpackages som.task and som.command","messageBody":"As the number of classes increase, a single package becomes clustered\nand hard to navigate.\n\nLet\u0027s divide classes into logical subpackages:\n* som.task: Task-related classes\n* som.command: All command classes\n\nThis is done to improve code organization, and each package has a\nclear responsibility.\n","fileTypesAndContributionMap":{"java":{"insertions":115,"deletions":4}}},{"hash":"56b442b1a858d8f5c0a531a86b82809a842dc1fa","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-Packages\u0027","messageBody":"","tags":["A-Packages"],"fileTypesAndContributionMap":{}},{"hash":"1ff8118cff8e0857aa2901d05314dc1e586b6879","isMergeCommit":true,"messageTitle":"Merge branch \u0027add-gradle-support\u0027 into master","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"88fdebb6920c163fd4a6464fe9363bc72beb5527","isMergeCommit":false,"messageTitle":"Integrate Gradle using add-gradle-support branch","messageBody":"","tags":["A-Gradle"],"fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":1}}},{"hash":"6f89295cdabd15c2b1ba231b3d46cc7c2aebe74b","isMergeCommit":false,"messageTitle":"Add comprehensive JUnit tests for Parser, Deadline and TaskList class","messageBody":"The Parser, Deadline and Tasklist classes are currently not tested\nautomatically, which makes it difficult to detect bugs introduced\nduring future changes.\n\nLet\u0027s use JUnit 5 with Gradle to test supported commands and their\nvalid and invalid cases.\n\nThe tests use standard JUnit assertions and are integrated with Gradle\nfor automated execution.\n","fileTypesAndContributionMap":{"java":{"insertions":240,"deletions":0}}},{"hash":"163e7789515ee0c2c929b7f6a156c39bb4d61fd9","isMergeCommit":false,"messageTitle":"Add automated testing to verify the correctness of the TaskList class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":59,"deletions":0}}},{"hash":"b021cfd8fdc1b86b094b78120dd1ea284baaab7f","isMergeCommit":false,"messageTitle":"Add method to support automated testing","messageBody":"","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":0}}},{"hash":"e918cd29ce49ca8aa3a62941dde3beffd21a1194","isMergeCommit":false,"messageTitle":"Add support to build and generate .jar files","messageBody":"","tags":["A-Jar"],"fileTypesAndContributionMap":{"gradle":{"insertions":22,"deletions":1}}},{"hash":"b4b2c94c4f012dfd988a829ac6906c34dae55ea9","isMergeCommit":false,"messageTitle":"Edit find command to search for tasks by keyword","messageBody":"Previously, the find command was used to look for Deadlines and Events with certain dates.\n\nLet\u0027s implement \u0027find \u003ckeyword\u003e\u0027 to list tasks containing the keyword by:\n* Edit findTasks to search for description instead of dates\n* Update Parser and Ui classes\n* Add to help\n\nUsers can now search their task list using keywords.\n","fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":34}}},{"hash":"03b29877e9b9eb353b860dfa41c72c362d14aba1","isMergeCommit":false,"messageTitle":"Update test case for \"findTask\" JUnit test","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"d63a622826d04acfb897ed55261d350721028875","isMergeCommit":false,"messageTitle":"Add JavaDoc to core classes and methods","messageBody":"JavaDoc was incomplete for multiple classes and methods and might be hard for others to understand the implementation.\n\nLet\u0027s:\n* Add header comments to most classes and methods\n* Follow JavaDoc conventions: @param, @return, @throws, @author\n\nAdding JavaDoc improves code readability and maintainability.\n","fileTypesAndContributionMap":{"java":{"insertions":322,"deletions":44}}},{"hash":"6a58a767dfd1cb03e7c7d9ae95685aa920be865b","isMergeCommit":false,"messageTitle":"Update JavaDoc to follow Java Coding Standards","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":99,"deletions":129}}},{"hash":"b9483ba9da64dd32e8fad381d5ef40242bdf7cb3","isMergeCommit":false,"messageTitle":"Apply coding standards for consistency","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":9}}},{"hash":"8a0296f49e39ff69f5bb63b19f4bc00c840d75e2","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-JavaDoc\u0027","messageBody":"","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{}},{"hash":"c870e053400b4a12779c8422b4f28db171ae8e08","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-CodingStandard\u0027","messageBody":"","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{}},{"hash":"38d0e9f6d71319b1f5a921f7adbad2ba3c7d8389","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-9\u0027","messageBody":"# Conflicts:\n#\tsrc/main/java/som/TaskList.java\n#\tsrc/main/java/som/Ui.java\n","tags":["Level-9"],"fileTypesAndContributionMap":{}}]},{"date":"2025-09-03T00:00:00","commitResults":[{"hash":"4a8d818e20e08669990604a7a25adcbb0fe736d7","isMergeCommit":false,"messageTitle":"Integrate Checkstyle and fix coding style violations","messageBody":"Integrate Checkstyle into the project to automatically detect and enforce Java coding standards.\n\nLet\u0027s:\n- Use SE-EDU\u0027s recommended configuration for consistency\n- Use the Checkstyle-IDEA plugin to check for style\n- Edit current files to fix coding style violations\n\nThese changes improve code readability, maintainability, and consistency across the codebase\nand can be caught early during development.\n","tags":["A-CheckStyle"],"fileTypesAndContributionMap":{"java":{"insertions":96,"deletions":96}}}]},{"date":"2025-09-04T00:00:00","commitResults":[{"hash":"9c0bd0da495cd1806732fcd3c5b22f4cff23cb5d","isMergeCommit":false,"messageTitle":"Add JavaFX support via Gradle","messageBody":"Lets integrate JavaFX into the project using the official Gradle plugin.\n","fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":1}}},{"hash":"d3d6b7c166e8f2274329d73a86c1a21bbc3673d4","isMergeCommit":false,"messageTitle":"Add Launcher class to fix JavaFX module-path issues","messageBody":"JavaFX uses a different module path than the classpath, and this would prevent runtime errors when launching from JAR.\n\nLet\u0027s add a standalone Launcher class that starts the JavaFX application.\n","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":0}}},{"hash":"12e16288f808c7e9195fd3252d7ef10bca63de5a","isMergeCommit":false,"messageTitle":"Add getResponse() to Som and update relevant classes for GUI integration","messageBody":"The Som chatbot used to be CLI based, which used System.out.println(), which does not enable the GUI to display responses\nin chat bubbles.\n\nLet\u0027s add a new method getResponse(String input) to return bot responses as strings by:\n- Updating all relevant Command class and subclasses\n- Updating the Som class to support getResponse()\n- Updating the Ui class to return strings instead of printing out the results\n\nThis enables the GUI to display responses in chat bubbles.\n","fileTypesAndContributionMap":{"java":{"insertions":96,"deletions":83}}},{"hash":"cf4ffb303f9bcb010958c1c859dc556cc1376868","isMergeCommit":false,"messageTitle":"Implement MainWindow and DialogBox controllers","messageBody":"Let\u0027s Add JavaFX controller classes to handle user interaction by:\n- MainWindow: Manages input, response display, and scroll binding\n- DialogBox: Custom control for user/bot message bubbles\n- Use @FXML annotations to bind UI elements\n- Inject Som instance for command execution\n","fileTypesAndContributionMap":{"java":{"insertions":150,"deletions":0}}},{"hash":"35c88a6fa440cb84e448522e4ef42f7a5a6af380","isMergeCommit":false,"messageTitle":"Add avatars and CSS for minimalistic GUI design","messageBody":"Let\u0027s enhance the GUI with visual elements by:\n- Add User.png and Som.png for message avatars (currently placeholders)\n- Create main.css and dialogBox.css with soft colors, rounded corners, and shadows\n- Apply consistent font and spacing\n- Style user (right) and bot (left) messages differently\n\nThis is done to achieve a clean, modern, and user-friendly interface.\nImproves user experience without clutter.\n","tags":["Level-10"],"fileTypesAndContributionMap":{"fxml":{"insertions":41,"deletions":0}}}]},{"date":"2025-09-05T00:00:00","commitResults":[{"hash":"8968a4080f2b0bf6fd75310255b9d10529b32958","isMergeCommit":false,"messageTitle":"Fix issues based in PR review","messageBody":"Address reviewer comments:\n- Improve JavaDocs\n- Renamed getby() method in Deadline class to getBy()\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":1},"java":{"insertions":16,"deletions":16}}}]},{"date":"2025-09-13T00:00:00","commitResults":[{"hash":"b5ec71aba68459d29b8b83ef7609735f4d774fca","isMergeCommit":false,"messageTitle":"Reduce long methods through abstraction and helper methods","messageBody":"The app currently has several long methods, especially in\nParser.java and Storage.java, which handle multiple\nresponsibilities such as parsing input, validating formats,\nextracting parameters, executing commands and storing data.\n\nBreak down complex methods into smaller, focused\nhelper methods to improve readability, maintainability, and\ntestability.\n\nLet\u0027s extract logic into private helper methods, such as parse(),\nand load(). Apply the Single Responsibility Principle so each\nmethod performs one clear task.\n\nHelper methods are kept private to encapsulate implementation\ndetails while improving internal structure.\n","fileTypesAndContributionMap":{"java":{"insertions":123,"deletions":75}}},{"hash":"73217c1572835607b4e3050e6707867e1b854c59","isMergeCommit":false,"messageTitle":"Standardize code formatting and remove unused methods","messageBody":"The code currently has inconsistent formatting (e.g., spacing, brace\nplacement) across files and contains several unused or redundant methods\nthat add clutter.\n\nApply consistent code formatting to align with the SE-EDU Java style guide.\nRemove unused methods such as deprecated helpers, empty overrides,\nand redundant getters/setters.\n\nThis improves readability, reduces technical debt, and ensures uniformity\nacross the codebase. The changes are non-functional but enhance\nmaintainability and prepare the project for automated checks like Checkstyle.\n\nNo behavior is changed; all existing functionality remains intact.\n","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":26}}},{"hash":"5f126f524063060c862518a5c382c202dfb348e8","isMergeCommit":false,"messageTitle":"Add assertions to document internal assumptions","messageBody":"The app currently handles invalid states silently or through exceptions\nwithout clearly documenting expected invariants.\n\nLet\u0027s add Java `assert` statements to verify key assumptions at runtime during\ndevelopment, such as ensuring task indices are in bounds, parsed dates\nare non-null, and core objects are properly initialized.\n\nEnables faster debugging during development while having no impact in\nproduction when disabled.\n","tags":["A-Assertions"],"fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":0},"java":{"insertions":12,"deletions":18}}},{"hash":"39fc70bbd345ef5237ac80b42eb29e3a87430ab6","isMergeCommit":false,"messageTitle":"Refactor code by removing unused methods","messageBody":"The code currently has redundant methods that add clutter.\n\nLet\u0027s remove unused methods such as deprecated helpers, empty overrides,\nand redundant getters/setters.\n\nNo behavior is changed; all existing functionality remains intact.\n","tags":["A-CodeQuality"],"fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":41}}},{"hash":"565f3341c5373e6e256f3db389f227303f7f9b4c","isMergeCommit":true,"messageTitle":"Merge pull request #2 from reven0n/branch-A-CodeQuality","messageBody":"Branch a code quality","fileTypesAndContributionMap":{}},{"hash":"a7738faab9c2114e2a48d6e4fb7d641147c3801b","isMergeCommit":true,"messageTitle":"Merge branch \u0027master\u0027 into branch-A-Assertions","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"eeadfc5532b183410a4dca55de33043fcb26663f","isMergeCommit":true,"messageTitle":"Merge pull request #3 from reven0n/branch-A-Assertions","messageBody":"Add assertions to document internal assumptions","fileTypesAndContributionMap":{}}]},{"date":"2025-09-14T00:00:00","commitResults":[{"hash":"a798d2f7102ea14066186f53e2dc8f5472c4efd6","isMergeCommit":false,"messageTitle":"Add sort command to organize tasks by date","messageBody":"The app currently displays tasks in the order they were added, which\nmakes it hard to see upcoming deadlines or events in chronological\norder.\n\nLet\u0027s Add a \u0027sort\u0027 command that arranges tasks by their date/time:\n- Deadlines by due date\n- Events by start time\n- Todos appear last\n- Implement Comparable interface in Task class and override\ncompareTo() to define sorting behavior\n\nThis improves usability by helping users prioritize time-sensitive\ntasks.\n\nSorting is stable and does not affect task indices beyond reordering.\n","tags":["BCD-Extension","A-FullCommitMessage"],"fileTypesAndContributionMap":{"java":{"insertions":63,"deletions":2}}}]},{"date":"2025-09-19T00:00:00","commitResults":[{"hash":"36deba553fec75939411da36e0abb26994d0aafc","isMergeCommit":false,"messageTitle":"Use AI assistance to improve code quality, features, and documentation","messageBody":"The app currently has functional core logic but can benefit from\nimprovements in code readability, user experience, and maintainability\nin the UI class.\n\nUse AI tools (Qwen) to assist in:\n- Improving UI formatting for better clarity in GUI\n- Enhancing Javadoc comments for public methods\n- Optimizing help message layout for readability\n\nThis improves code quality without compromising original design intent. AI\nsuggestions were critically evaluated and adapted to fit project standards.\n","tags":["A-AiAssisted"],"fileTypesAndContributionMap":{"java":{"insertions":80,"deletions":78}}},{"hash":"ea2fc140d526c6bca16dcd5319d0406a101f8f99","isMergeCommit":false,"messageTitle":"Improve GUI polish with visual hierarchy and UX refinements","messageBody":"The current GUI displays user and bot messages with placeholder\nimages. These images are also quite large due to no scaling.\n\nLet\u0027s improve the GUI by modifying the dialog box styling to create\na clearer visual distinction:\n- Apply different background colors\n- Reduce avatar size as participants are fixed (user and chatbot)\n- Use different images for better integration with UI theme\n- Add subtle shadows and rounded corners for depth and clarity\n- Add title to window\n\nThese changes enhance readability and focus on actual content rather than\ndecoration. The layout remains clean and space-efficient, avoiding heavy\nbackground graphics that distract from text.\n","tags":["A-BetterGui"],"fileTypesAndContributionMap":{"fxml":{"insertions":43,"deletions":5},"java":{"insertions":7,"deletions":6}}},{"hash":"aecf537c01541afc3c5b2b2d6320779ad703aa94","isMergeCommit":false,"messageTitle":"Update README.md with comprehensive user guide","messageBody":"The app currently lacks a structured user guide accessible via GitHub\nPages, making it harder for users to learn how to use its features.\n\nLet\u0027s:\n- Update docs/README.md with a complete user guide that covers all\nmajor commands (todo, deadline, event, list, mark, delete, find, sort, tag,\nbye), usage examples, formatting guidelines, and troubleshooting tips.\n- Structure content using GitHub Flavored Markdown for clear\nheadings, code blocks, tables, and lists\n- Ensure the chatbot name \"Som\" is clearly stated at the top.\n- Add Ui.png as a GUI demo\n\nThis makes the app more user-friendly.\n","tags":["A-UserGuide"],"fileTypesAndContributionMap":{"md":{"insertions":137,"deletions":26}}},{"hash":"bb1868df19844de14dbc2591e35c796571a910fe","isMergeCommit":false,"messageTitle":"Add comprehensive Javadoc for SortCommand","messageBody":"The SortCommand class currently lacks method-level documentation, making\nit harder for developers to understand its behavior and integration with\nthe command pattern.\n\nAdd detailed Javadoc comments for the class and its methods:\n- Explain that SortCommand sorts tasks by date/time (deadlines/events first)\n\nThis improves code readability and maintainability, aligning with A-JavaDoc\nrequirements.\n","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":0}}},{"hash":"67a757e69a7fb1629d623329be9b02d21b71e003","isMergeCommit":false,"messageTitle":"Enhance Storage to auto-create data file and directory","messageBody":"The app currently throws an exception if the data file or directory is\nmissing, requiring manual setup before first use.\n\nLet\u0027s Modify Storage class to automatically create the data directory\nand file if they do not exist. Add private helper method createFile()\nto handle file creation with proper error reporting.\n\nThis improves user experience by enabling out-of-the-box operation\nwithout manual file/directory creation. The behavior aligns with\nreal-world apps that initialize their storage environment silently on\nfirst launch.\n\nExisting load/save logic remains unchanged; only missing-resource\nhandling is improved.\n","fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":2}}},{"hash":"5d9c6576003265b3e16de9ba23712a944eddf664","isMergeCommit":false,"messageTitle":"Add ExitCommand to handle graceful application shutdown","messageBody":"The app currently checks for the \u0027bye\u0027 command in the main loop without\nusing the Command pattern consistently. This breaks the uniform handling\nof commands and makes extension harder.\n\nIntroduce ExitCommand as a concrete implementation of Command that:\n- Returns a goodbye message via Ui\n- Shuts down JavaFX using Platform.exit()\n\nThis ensures all user actions are modeled as commands, improving design\nconsistency and maintainability.\n\nNow, when the user types \u0027bye\u0027, the command is parsed and executed like\nany other, enabling clean separation between UI response and app lifecycle.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}}]}]},"authorFileTypeContributionMap":{"reven0n":{"java":1851,"md":132,"fxml":79,"sh":2,"bat":1,"gradle":24,"txt":20}},"authorContributionVariance":{"reven0n":104798.55},"authorDisplayNameMap":{"reven0n":"CS2103T-F15b-2 DARI.. HAO"}}
