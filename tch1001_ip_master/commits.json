{"authorDailyContributionsMap":{"tch1001":[{"date":"2025-08-21T00:00:00","commitResults":[{"hash":"40d15f68007b95bdaf638eab10c1048aaf145958","isMergeCommit":false,"messageTitle":"Implemented Level 0","messageBody":"","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":10}}},{"hash":"f92576f50a06ee85837b8ae3946fd164438b3cff","isMergeCommit":false,"messageTitle":"Level 1 done","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":2}}},{"hash":"5dcfdc130a13f83410539d3cea23afc39a4063a4","isMergeCommit":false,"messageTitle":"Level-2","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":2}}}]},{"date":"2025-08-24T00:00:00","commitResults":[{"hash":"caef1d774b27bed11371a729947e4fc9dfe8ed04","isMergeCommit":false,"messageTitle":"level-3","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":3}}},{"hash":"6978ad130e41a97836613526c1597906a50746fc","isMergeCommit":false,"messageTitle":"OOP and Level-4","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":118,"deletions":10}}},{"hash":"dcb759e1e85416dca5357a368fe461c991140b1c","isMergeCommit":false,"messageTitle":"implemented testing","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":10,"deletions":0},"sh":{"insertions":1,"deletions":1}}},{"hash":"10d8cf72f4408a8ec7b8fc361a6af55c177b740d","isMergeCommit":false,"messageTitle":"error handling","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":1},"java":{"insertions":75,"deletions":57}}},{"hash":"8fe815fe29b35d5eecb11cf69237dcefa28d80b2","isMergeCommit":false,"messageTitle":"Level 6","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":0},"java":{"insertions":28,"deletions":20}}},{"hash":"fac4138d715e90d6ceb16e8239a4700718a1c4c2","isMergeCommit":false,"messageTitle":"enums","messageBody":"","tags":["A-Enums"],"fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":3}}}]},{"date":"2025-08-31T00:00:00","commitResults":[{"hash":"6efedeb7ce11e26e31ee29654e4af1a9f7aec2c5","isMergeCommit":false,"messageTitle":"added saving","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":97,"deletions":1}}},{"hash":"b05c315290b118bf1b6c002be6857e2f5188b625","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-level-7\u0027","messageBody":"","tags":["Level-7"],"fileTypesAndContributionMap":{}},{"hash":"b4cbc7ee9f2b65705ccd3e961c79c6990538a10d","isMergeCommit":false,"messageTitle":"added date formats","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":74,"deletions":15}}},{"hash":"aaab5469df4ece109b083c6f63ac9836faf160cc","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-8\u0027","messageBody":"","tags":["Level-8"],"fileTypesAndContributionMap":{}},{"hash":"3c8f01720e97262d230411a6519ecd5791d7355f","isMergeCommit":false,"messageTitle":"more oop","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":309,"deletions":227}}},{"hash":"ecdf1409a66bf4b6801bf19b58a7d2e8fae9cb81","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-MoreOOP\u0027","messageBody":"","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{}},{"hash":"556ca6ef18a65bda8f376e804df03b2cf68429b4","isMergeCommit":false,"messageTitle":"packages","messageBody":"","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":498,"deletions":445}}},{"hash":"539fc31a8068b2cdf0c513df9603015e4fb679ef","isMergeCommit":true,"messageTitle":"Merge remote-tracking branch \u0027origin/add-gradle-support\u0027","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"5da6f7da365ac7592a078f0d946f43c41071ea9b","isMergeCommit":false,"messageTitle":"gradle support","messageBody":"","tags":["A-Gradle"],"fileTypesAndContributionMap":{"gradle":{"insertions":2,"deletions":2}}},{"hash":"86fb27171e72ff8adfafbc074f464419f5e4cc32","isMergeCommit":false,"messageTitle":"unit tests","messageBody":"","tags":["A-Jar","A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":877,"deletions":0}}},{"hash":"a9dd9c1e3425121f480a073e8f5607b431c758b5","isMergeCommit":false,"messageTitle":"javadoc","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":602,"deletions":135}}},{"hash":"ced230fb8967f58dbdbc8afd436e910f10104d54","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-JavaDoc\u0027","messageBody":"","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{}},{"hash":"fb8464c54f73a42b0ba834dacee2618fefbc5f39","isMergeCommit":false,"messageTitle":"coding standards","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":10}}},{"hash":"913db786c907a6da7b0a835cd0a8cc435a5bf653","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-CodingStandard\u0027","messageBody":"","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{}},{"hash":"10fde2a1bef2789b71128061310ac1ce2b4beccd","isMergeCommit":false,"messageTitle":"search feature","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":50,"deletions":0}}},{"hash":"6c57945f5e3cc7bdbdf53b87bc5f3a8b0443f295","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-9\u0027","messageBody":"","tags":["Level-9"],"fileTypesAndContributionMap":{}}]},{"date":"2025-09-04T00:00:00","commitResults":[{"hash":"6a2b410bf8843cf57a924b0d582a45bd9a6bba53","isMergeCommit":false,"messageTitle":"simple gui","messageBody":"","tags":["Level-10"],"fileTypesAndContributionMap":{"gradle":{"insertions":17,"deletions":2},"fxml":{"insertions":42,"deletions":0},"java":{"insertions":409,"deletions":32},"md":{"insertions":26,"deletions":0}}}]},{"date":"2025-09-16T00:00:00","commitResults":[{"hash":"a3dab2bfdbd7297dbebef32e836f6be632bdeda1","isMergeCommit":false,"messageTitle":"Person attributes classes: extract a parent class PersonAttribute","messageBody":"Person attribute classes (e.g. Name, Address, Age etc.) have some common\nbehaviors (e.g. isValid()).\n\nThe common behaviors across person attribute classes cause code duplication.\n\nExtracting the common behavior into a super class allows us to use\npolymorphism when dealing with person attributes. For example, validity\nchecking can be done for all attributes of a person in one loop.\n\nLet\u0027s pull up behaviors common to all person attribute classes into a new\nparent class named PersonAttribute.\n\nUsing inheritance is preferable over composition in this situation\nbecause the common behaviors are not composable.\n\nRefer to this S/O discussion on dealing with attributes\nhttp://stackoverflow.com/some/question\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":1}}},{"hash":"48a82d83f843f73d712476b9d95ca1a8c677369f","isMergeCommit":false,"messageTitle":"added assert","messageBody":"","tags":["A-CodeQuality","A-Assertions"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}},{"hash":"494e5660c17243ffac1ed3c4081345b9a13e4621","isMergeCommit":false,"messageTitle":"added sort","messageBody":"","tags":["BCD-Extension"],"fileTypesAndContributionMap":{"java":{"insertions":50,"deletions":39}}},{"hash":"14e9877b11a763380685cf3b8a1e2d2790724998","isMergeCommit":false,"messageTitle":"ai","messageBody":"","tags":["A-AiAssisted"],"fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":0}}}]},{"date":"2025-09-20T00:00:00","commitResults":[{"hash":"07c7f7a20cd7379890e25fd43b1bf40b896bb924","isMergeCommit":false,"messageTitle":"user guide","messageBody":"","tags":["A-UserGuide"],"fileTypesAndContributionMap":{"md":{"insertions":159,"deletions":14}}},{"hash":"1a4a910fea8026908eb23a96df706059fa75c610","isMergeCommit":false,"messageTitle":"ai","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":0}}},{"hash":"2f9795ee6eedf6145c5553d8ae356ebb7982b55c","isMergeCommit":true,"messageTitle":"Merge pull request #2 from tch1001/ai","messageBody":"ai","fileTypesAndContributionMap":{}},{"hash":"04dbce19e61723d5560877862ecf3f200911bdb7","isMergeCommit":false,"messageTitle":"Person attributes classes: extract a parent class PersonAttribute","messageBody":"Person attribute classes (e.g. Name, Address, Age etc.) have some common\nbehaviors (e.g. isValid()).\n\nThe common behaviors across person attribute classes cause code duplication.\n\nExtracting the common behavior into a super class allows us to use\npolymorphism when dealing with person attributes. For example, validity\nchecking can be done for all attributes of a person in one loop.\n\nLet\u0027s pull up behaviors common to all person attribute classes into a new\nparent class named PersonAttribute.\n\nUsing inheritance is preferable over composition in this situation\nbecause the common behaviors are not composable.\n\nRefer to this S/O discussion on dealing with attributes\nhttp://stackoverflow.com/some/question\n","fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":1}}},{"hash":"b51bd6c01d51effff85fc4cef280c3965e0066ae","isMergeCommit":false,"messageTitle":"Person attributes classes: extract a parent class PersonAttribute","messageBody":"Person attribute classes (e.g. Name, Address, Age etc.) have some common\nbehaviors (e.g. isValid()).\n\nThe common behaviors across person attribute classes cause code duplication.\n\nExtracting the common behavior into a super class allows us to use\npolymorphism when dealing with person attributes. For example, validity\nchecking can be done for all attributes of a person in one loop.\n\nLet\u0027s pull up behaviors common to all person attribute classes into a new\nparent class named PersonAttribute.\n\nUsing inheritance is preferable over composition in this situation\nbecause the common behaviors are not composable.\n\nRefer to this S/O discussion on dealing with attributes\nhttp://stackoverflow.com/some/question\n","fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":1}}},{"hash":"161988f1b07f09e7bbb529ff8b1abc2e895c6282","isMergeCommit":false,"messageTitle":"Person attributes classes: extract a parent class PersonAttribute","messageBody":"Person attribute classes (e.g. Name, Address, Age etc.) have some common\nbehaviors (e.g. isValid()).\n\nThe common behaviors across person attribute classes cause code duplication.\n\nExtracting the common behavior into a super class allows us to use\npolymorphism when dealing with person attributes. For example, validity\nchecking can be done for all attributes of a person in one loop.\n\nLet\u0027s pull up behaviors common to all person attribute classes into a new\nparent class named PersonAttribute.\n\nUsing inheritance is preferable over composition in this situation\nbecause the common behaviors are not composable.\n\nRefer to this S/O discussion on dealing with this\nhttp://stackoverflow.com/some/question\n","fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":1}}},{"hash":"eb907a7b3804afc561998232b4bfeb23017b88cf","isMergeCommit":false,"messageTitle":"Person attributes classes: extract a parent class PersonAttribute","messageBody":"Person attribute classes (e.g. Name, Address, Age etc.) have some common\nbehaviors (e.g. isValid()).\n\nThe common behaviors across person attribute classes cause code duplication.\n\nExtracting the common behavior into a super class allows us to use\npolymorphism when dealing with person attributes. For example, validity\nchecking can be done for all attributes of a person in one loop.\n\nLet\u0027s pull up behaviors common to all person attribute classes into a new\nparent class named PersonAttribute.\n\nUsing inheritance is preferable over composition in this situation\nbecause the common behaviors are not composable\n\nRefer to this S/O discussion on dealing with attributes\nhttp://stackoverflow.com/some/question\n","fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":1}}},{"hash":"4e7324347be409a11d6175a1d6bdb5015cfc37c7","isMergeCommit":false,"messageTitle":"Person attributes classes: extract a parent class PersonAttribute","messageBody":"Person attribute classes (e.g. Name, Address, Age etc.) have some common\nbehaviors (e.g. isValid()).\n\nThe common behaviors across person attribute classes cause code duplication.\n\nExtracting the common behavior into a super class allows us to use\npolymorphism when dealing with person attributes. For example, validity\nchecking can be done for all attributes of a person in one loop.\n\nLet\u0027s pull up behaviors common to all person attribute classes into a new\nparent class named PersonAttribute!\n\nUsing inheritance is preferable over composition in this situation\nbecause the common behaviors are not composable.\n\nRefer to this S/O discussion on dealing with attributes\nhttp://stackoverflow.com/some/question\n","fileTypesAndContributionMap":{"md":{"insertions":0,"deletions":1}}}]}]},"authorFileTypeContributionMap":{"tch1001":{"java":2281,"md":186,"fxml":42,"sh":1,"bat":0,"gradle":17,"txt":12}},"authorContributionVariance":{"tch1001":255327.27},"authorDisplayNameMap":{"tch1001":"CS2103T-T17-3 TAN .. HAO"}}
