[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"# John project template","lastModifiedDate":"2025-08-22T12:40:38","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 17, update Intellij to the most recent version.","lastModifiedDate":"2024-07-11T16:50:14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 17** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2024-07-11T16:50:14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29T20:29:39","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"1. After that, locate the `src/main/java/John.java` file, right-click it, and choose `Run John.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2025-08-22T12:40:38","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04T21:44:28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"**Warning:** Keep the `src\\main\\java` folder as the root folder for Java files (i.e., don\u0027t rename those folders or move Java files to another folder outside of this folder path), as this is the default location some tools (e.g., Gradle) expect to find Java files.","lastModifiedDate":"2025-01-04T21:44:28","isFullCredit":false}],"authorContributionMap":{"-":24,"coolprogrammer000":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05T15:24:02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05T15:24:02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05T15:24:02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    mainClass.set(\"john.core.John\")","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    archiveBaseName \u003d \"john\"","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"apply plugin: \u0027java\u0027","lastModifiedDate":"2025-09-07T13:39:57","isFullCredit":false}],"authorContributionMap":{"-":39,"coolprogrammer000":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"# John User Guide","lastModifiedDate":"2025-08-22T12:40:38","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"// Update the title above to match the actual product name","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"// Product screenshot goes here","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"// Product intro goes here","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Adding deadlines","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"// Describe the action and its outcome.","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"// Give examples of usage","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"Example: `keyword (optional arguments)`","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"// A description of the expected outcome goes here","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Feature ABC","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Feature XYZ","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false}],"authorContributionMap":{"-":29,"coolprogrammer000":1}},{"path":"src/data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"T | 0 | ttest | ","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":1}},{"path":"src/main/java/john/adapters/ConsoleUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.adapters;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.PrintStream;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Console-backed implementation of Ui.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Reads user commands from a Scanner and writes output to a PrintStream.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Behavior:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - nextCommand() trims input, skips empty lines, and returns the next non-empty line.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - nextCommand() returns null on end-of-input (EOF).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - showMessage(msg) prints the message and then a separator line.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - showWelcome(count) prints a startup banner and the number of loaded tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * Resource ownership:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * - This class closes the provided Scanner in close().","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - The provided PrintStream is not closed by this class.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Closing a Scanner that wraps System.in will close System.in.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"public class ConsoleUi implements Ui {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private final Scanner in;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    private final PrintStream out;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a new console UI.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     * @param in  input scanner to read commands from (typically wrapping System.in). Must not be null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     * @param out output stream to write messages to (for example, System.out). Must not be null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    public ConsoleUi(Scanner in, PrintStream out) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        this.in \u003d in;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        this.out \u003d out;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns the next non-empty, trimmed input line, or null if EOF is reached.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * This method skips empty or whitespace-only lines and blocks until a non-empty line is available","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * or the underlying scanner has no more input.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the next command line (trimmed), or null on EOF","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    public String nextCommand() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        while (true) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"            if (!in.hasNextLine()) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"                return null;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"            String line \u003d in.nextLine().trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"            if (line.isEmpty()) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"                continue;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"            return line;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"     * Prints a message followed by a separator line for readability.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"     * A newline is appended after each line.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"     * @param msg the message to display; if null, the literal \"null\" is printed","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"    public void showMessage(String msg) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"        out.println(msg);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"        out.println(\"_________________________________\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"     * Closes the underlying Scanner.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"     * Note: if the scanner wraps System.in, that stream will be closed as well.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"     * The PrintStream provided at construction is not closed by this method.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"    public void close() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"        in.close();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"     * Shows a startup banner and the number of tasks loaded.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"     * @param taskCount the number of tasks currently loaded","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"    public void showWelcome(int taskCount) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"        out.println(\"Loaded \" + taskCount + \" tasks.\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"        showMessage(\"Hello! I\u0027m John. What can I do for you?\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":92}},{"path":"src/main/java/john/adapters/FileStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.adapters;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Event;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Todo;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Deadline;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"import john.util.DateTimeParser;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.File;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.FileReader;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.IOException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"import java.nio.file.Path;","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.List;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" * File-backed implementation of Storage that reads and writes tasks","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":" * to a plain text file using a pipe-delimited format.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":" * File format (one task per line, fields are trimmed):","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":" * - Todo:     T | done(0|1) | title","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":" * - Deadline: D | done(0|1) | title | by (dd/MM/yyyy HH:mm:ss)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":" * - Event:    E | done(0|1) | title | from (dd/MM/yyyy HH:mm:ss) | to (dd/MM/yyyy HH:mm:ss)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":" * The load method will create the file if it does not exist and return an empty TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":" * Corrupt or unknown lines are skipped with a console message in this implementation.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":" * This class is not thread-safe.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"public class FileStorage implements Storage {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * Absolute or relative path string to the save file location.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"    private final String filePath;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * Constructs a FileStorage that reads from and writes to the given path.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     * @param filePath path to the data file; may be relative or absolute","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    public FileStorage(String filePath) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"     * Resolves a default path next to the running JAR or classes directory.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"     * If the path cannot be resolved, falls back to $HOME/.duke/data.txt.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"     * The anchor class used here is john.core.John. Replace it with your entry class if needed.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a path pointing to data.txt beside the application artifact, or a home-directory fallback","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"    public static Path resolveBesideJar() {","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"            Path jarDir \u003d Paths.get(john.core.John.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParent();","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"            return jarDir.resolve(\"data.txt\");","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (Exception e) {","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"            return Paths.get(System.getProperty(\"user.home\"), \".duke\", \"data.txt\");","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"     * Loads tasks from the configured filePath.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"     * If the file does not exist, attempts to create it and returns an empty TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"     * Parsing rules:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"     * - Lines are split by the \u0027|\u0027 character.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"     * - Whitespace around each field is trimmed.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"     * - T creates a Todo, D creates a Deadline, E creates an Event.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"     * - A done flag of \"1\" marks the task complete; anything else is treated as incomplete.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"     * - Date-time fields are parsed using DateTimeParser.parseDateTime.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"     * Error handling:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"     * - IOExceptions during initial creation are logged to System.out and an empty TaskList is returned.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"     * - IOExceptions during reading are wrapped in RuntimeException.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a TaskList containing all successfully parsed tasks","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"    public TaskList load() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"        if (!file.exists()) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"            try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"                if (file.createNewFile()) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"                    System.out.println(\"File created: \" + file.getAbsolutePath());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"coolprogrammer000"},"content":"                } else {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"coolprogrammer000"},"content":"                    System.out.println(\"Failed to create file.\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"coolprogrammer000"},"content":"                }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"coolprogrammer000"},"content":"                return new TaskList(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"coolprogrammer000"},"content":"            } catch (IOException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"coolprogrammer000"},"content":"                System.out.println(\"Failed to create file at\" + filePath);","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"coolprogrammer000"},"content":"        try (BufferedReader br \u003d new BufferedReader(new FileReader(file))) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"coolprogrammer000"},"content":"            String line;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"coolprogrammer000"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"coolprogrammer000"},"content":"                String[] parts \u003d line.split(\"\\\\|\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"coolprogrammer000"},"content":"                if (parts.length \u003d\u003d 0) continue;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"coolprogrammer000"},"content":"                String type \u003d parts[0].trim().toUpperCase();","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"coolprogrammer000"},"content":"                switch (type) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"coolprogrammer000"},"content":"                    case \"T\":","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"coolprogrammer000"},"content":"                        if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"coolprogrammer000"},"content":"                            String title \u003d parts[2].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"coolprogrammer000"},"content":"                            Task todo \u003d new Todo(title);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"coolprogrammer000"},"content":"                            if (\"1\".equals(parts[1].trim())) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"coolprogrammer000"},"content":"                                todo.markAsComplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"coolprogrammer000"},"content":"                            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"coolprogrammer000"},"content":"                            tasks.add(todo);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"coolprogrammer000"},"content":"                        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"coolprogrammer000"},"content":"                        break;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"coolprogrammer000"},"content":"                    case \"D\":","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"coolprogrammer000"},"content":"                        if (parts.length \u003e\u003d 4) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"coolprogrammer000"},"content":"                            String title \u003d parts[2].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"coolprogrammer000"},"content":"                            String deadline \u003d parts[3].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"coolprogrammer000"},"content":"                            Task deadlineTask \u003d new Deadline(title, DateTimeParser.parseDateTime(deadline));","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"coolprogrammer000"},"content":"                            if (\"1\".equals(parts[1].trim())) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"coolprogrammer000"},"content":"                                deadlineTask.markAsComplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"coolprogrammer000"},"content":"                            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"coolprogrammer000"},"content":"                            tasks.add(deadlineTask);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"coolprogrammer000"},"content":"                        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"coolprogrammer000"},"content":"                        break;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"coolprogrammer000"},"content":"                    case \"E\":","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"coolprogrammer000"},"content":"                        if (parts.length \u003e\u003d 5) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"coolprogrammer000"},"content":"                            String title \u003d parts[2].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"coolprogrammer000"},"content":"                            String from \u003d parts[3].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"coolprogrammer000"},"content":"                            String to \u003d parts[4].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"coolprogrammer000"},"content":"                            Task eventTask \u003d new Event(title, DateTimeParser.parseDateTime(from), DateTimeParser.parseDateTime(to));","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"coolprogrammer000"},"content":"                            if (\"1\".equals(parts[1].trim())) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"coolprogrammer000"},"content":"                                eventTask.markAsComplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"coolprogrammer000"},"content":"                            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"coolprogrammer000"},"content":"                            tasks.add(eventTask);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"coolprogrammer000"},"content":"                        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"coolprogrammer000"},"content":"                        break;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"coolprogrammer000"},"content":"                    default:","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"coolprogrammer000"},"content":"                        System.out.println(\"Unknown task type: \" + parts[0]);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"coolprogrammer000"},"content":"                }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"coolprogrammer000"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"coolprogrammer000"},"content":"        return new TaskList(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"coolprogrammer000"},"content":"     * Saves the given TaskList to the configured filePath.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"coolprogrammer000"},"content":"     * Each task is written using its serialise representation, followed by the platform line separator.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"coolprogrammer000"},"content":"     * Error handling:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"coolprogrammer000"},"content":"     * - IOExceptions during writing are wrapped in RuntimeException.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"coolprogrammer000"},"content":"     * Note:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"coolprogrammer000"},"content":"     * - This method does not ensure that the parent directory exists. If needed, create it beforehand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks the TaskList to persist","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"coolprogrammer000"},"content":"    public void save(TaskList tasks) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"coolprogrammer000"},"content":"        try (FileWriter writer \u003d new FileWriter(filePath)) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"coolprogrammer000"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"coolprogrammer000"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"coolprogrammer000"},"content":"                writer.write(task.serialise() + System.lineSeparator());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"coolprogrammer000"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":180}},{"path":"src/main/java/john/core/John.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.adapters.ConsoleUi;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.command.Command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.command.CommandResult;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.parser.CommandParser;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"import john.adapters.FileStorage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * Application entry point and main command loop for the John task manager.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * - Initialize storage, UI, and in-memory task list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Load tasks from persistent storage at startup.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Read user input lines, parse them into commands, execute, and display results.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" * - Gracefully handle parse errors and unexpected exceptions.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" * - Close UI resources on shutdown.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":" * Lifecycle:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":" * 1) tasks \u003d storage.load()","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":" * 2) ui.showWelcome(taskCount)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":" * 3) Loop:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":" * - line \u003d ui.nextCommand() (null on EOF)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":" * - parse line into Command","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":" * - execute Command -\u003e CommandResult","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":" * - ui.showMessage(result.feedback) if non-blank","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":" * - break if result.exit is true","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":" * 4) Close UI (which closes the underlying Scanner)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":" * Notes:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":" * - FileStorage.resolveBesideJar() chooses a data file path next to the running JAR","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":" * (or falls back to a home directory path). This avoids hardcoding src/ paths.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":" * - ConsoleUi.close() will close the Scanner. If that Scanner wraps System.in,","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":" * System.in will be closed as well. The PrintStream (System.out) is not closed.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":" * - This class uses static fields for simplicity in a single-VM CLI program.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":" * For greater testability, prefer dependency injection and instance fields.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"public class John {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     * In-memory task list backing the session. Populated on startup via storage.load().","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"    private static TaskList tasks;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"     * Persistent storage for tasks. Defaults to saving next to the running JAR.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    private static final FileStorage storage \u003d","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"            new FileStorage(FileStorage.resolveBesideJar().toString());","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"     * Console-based UI that reads from System.in and writes to System.out.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"    private static final ConsoleUi ui \u003d new ConsoleUi(new Scanner(System.in), System.out);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"     * Runs the main REPL loop: load tasks, greet the user, process commands until exit or EOF.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"     * Any ParseException thrown by command parsing is caught and shown to the user.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"     * Other unexpected exceptions are also surfaced via the UI before shutdown.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"    public static void run() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"        tasks \u003d storage.load();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"        try (Ui ignored \u003d ui) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"            ui.showWelcome(tasks.size());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"            while (true) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"                String line \u003d ui.nextCommand();","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"                if (line \u003d\u003d null) break; // EOF","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"                try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"                    Command cmd \u003d CommandParser.parse(line);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"                    CommandResult res \u003d cmd.execute(tasks, storage, ui);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"                    if (!res.feedback().isBlank()) ui.showMessage(res.feedback());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"                    if (res.exit()) break;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"                } catch (ParseException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"                    ui.showMessage(e.getMessage());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"                }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (Exception e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"            ui.showMessage(e.getMessage());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"        John.run();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":91}},{"path":"src/main/java/john/core/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Deadline;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * Command that adds a new Deadline task to the task list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Construct a Deadline from a description and due date-time.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Append it to the provided TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation message in CommandResult.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by adding one task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"public class AddDeadlineCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private final String desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an AddDeadlineCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     * @param desc non-null, non-empty task description","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     * @param by   non-null due date-time for the deadline","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    public AddDeadlineCommand(String desc, LocalDateTime by) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        this.by \u003d by;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: adds a Deadline to the list and saves it.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list to add into","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence mechanism used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface used for messaging (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a success result containing a confirmation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"        Task t \u003d new Deadline(desc, by);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(t);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"Got it. I\u0027ve added this task:\\n\" + t + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":54}},{"path":"src/main/java/john/core/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Event;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * Command that adds a new Event task to the task list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Construct an Event from a description and a start/end date-time.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Append it to the provided TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation message in CommandResult.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * Assumptions:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - The caller has already validated that \u0027from\u0027 is not after \u0027to\u0027.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - \u0027desc\u0027, \u0027from\u0027, and \u0027to\u0027 are non-null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by adding one task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"public class AddEventCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    private final String desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime from, to;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an AddEventCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     * @param desc event description (non-null, non-empty)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     * @param from start date-time (non-null)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * @param to   end date-time (non-null, expected to be \u003e\u003d from)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    public AddEventCommand(String desc, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: adds an Event to the list and saves it.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list to add into","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence mechanism used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface used for messaging (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a success result containing a confirmation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"        Task t \u003d new Event(desc, from, to);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(t);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"                \"Got it. I\u0027ve added this task:\\n\" + t +","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"                        \"\\nNow you have \" + tasks.size() + \" tasks in the list.\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"        );","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":63}},{"path":"src/main/java/john/core/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Todo;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Command that adds a new Todo task to the task list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Construct a Todo from a description.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Append it to the provided TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation message in CommandResult.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by adding one task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"public class AddTodoCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    private final String desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an AddTodoCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * @param desc non-null, non-empty task description","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    public AddTodoCommand(String desc) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: adds a Todo to the list and saves it.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list to add into","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence mechanism used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface used for messaging (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a success result containing a confirmation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"        Task t \u003d new Todo(desc);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(t);","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"Got it. I\u0027ve added this task:\\n\" + t + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":50}},{"path":"src/main/java/john/core/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * Command that signals the application to exit.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - Produce a farewell message for the user.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Indicate to the command loop that the program should terminate.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - None. No mutation of tasks or storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"public class ByeCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command by returning an exit-type result with a farewell message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * @param t  the task list (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     * @param s  the storage backend (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui the user interface (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult that contains the goodbye message and signals exit","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList t, Storage s, Ui ui) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.exit(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     * Indicates that this command causes the application to terminate.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     * @return true, always","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    public boolean isExit() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"        return true;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":41}},{"path":"src/main/java/john/core/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"public interface Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"    CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"    default boolean isExit() {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"        return false;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":14}},{"path":"src/main/java/john/core/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":" * Immutable result of executing a command.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":" * Purpose:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * - Carries a user-facing feedback message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * - Indicates whether the application should exit after handling the command.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * Usage:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - CommandResult.ok(\"message\") for normal completion.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - CommandResult.exit(\"message\") to request termination.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * @param feedback user-facing message to display (should be non-null; may be empty)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * @param exit     true if the application should terminate, false otherwise","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"public record CommandResult(String feedback, boolean exit) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a non-exiting result with the given message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * @param msg user-facing message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with exit set to false","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    public static CommandResult ok(String msg) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"        return new CommandResult(msg, false);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns an exiting result with the given message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     * @param msg user-facing message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with exit set to true","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    public static CommandResult exit(String msg) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        return new CommandResult(msg, true);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":38}},{"path":"src/main/java/john/core/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * Command that deletes a task by its 1-based position in the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * - Validate the provided 1-based index against the current list size.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Remove the targeted task when valid.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation or validation message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * Behavior on invalid input:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * - If the index is out of range, no changes are made, and a helpful message is returned.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by removing one task (when valid).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    private final int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a DeleteCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased the task number as shown to the user (1-based)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    public DeleteCommand(int oneBased) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        this.oneBased \u003d oneBased;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: deletes the task at the given 1-based index and saves the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence backend used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with either a confirmation or a validation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException kept for interface contract; not thrown by this implementation","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        int idx \u003d oneBased - 1;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"        if (idx \u003c 0 || idx \u003e\u003d tasks.size()) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"            return CommandResult.ok(\"Please provide a valid task number between 1 and \"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"                    + tasks.size() + \".\");","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        Task removed \u003d tasks.remove(idx);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"                + removed + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":58}},{"path":"src/main/java/john/core/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T18:53:10","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:53:10","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"public class FindCommand {","lastModifiedDate":"2025-09-07T18:53:10","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T18:53:10","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":4}},{"path":"src/main/java/john/core/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * Command that lists all tasks in a numbered, 1-based format.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - Read the current TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Produce a user-facing, newline-separated list like:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * \"1. \u003ctask\u003e\\n2. \u003ctask\u003e\\n...\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - If there are no tasks, return \"No tasks yet.\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - None. This command does not mutate tasks or call storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"public final class ListCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * Builds a numbered listing of all tasks and returns it as a CommandResult.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the task list to display","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence backend (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult containing either the numbered list or \"No tasks yet.\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"            sb.append(i + 1).append(\". \").append(tasks.get(i)).append(\u0027\\n\u0027);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        String body \u003d (sb.length() \u003d\u003d 0) ? \"No tasks yet.\" : sb.toString().trim();","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(body);","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":38}},{"path":"src/main/java/john/core/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Command that marks a task as completed by its 1-based position in the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Validate the provided 1-based index against the current list size.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * - Mark the referenced task as complete when valid.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation or validation message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * Behavior on invalid input:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - If the index is out of range, no changes are made and a helpful message is returned.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by marking one task complete (when valid).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"public class MarkCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private final int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a MarkCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased the task number as shown to the user (1-based)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    public MarkCommand(int oneBased) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        this.oneBased \u003d oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: marks the task at the given 1-based index as complete and saves the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence backend used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with either a confirmation or a validation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException kept for interface contract; not thrown by this implementation","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"        Integer idx \u003d toZeroBasedOrNull(oneBased, tasks.size());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        if (idx \u003d\u003d null) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"            return CommandResult.ok(\"Please provide a valid task number between 1 and \" + tasks.size() + \".\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.get(idx).markAsComplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"Nice! I\u0027ve marked this task as done:\\n\" + tasks.get(idx));","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"     * Converts a 1-based index to a 0-based index, or returns null if out of bounds.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased 1-based position as seen by the user","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"     * @param size     current number of tasks","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"     * @return zero-based index if valid; otherwise null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"    private static Integer toZeroBasedOrNull(int oneBased, int size) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"        int z \u003d oneBased - 1;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        return (z \u003e\u003d 0 \u0026\u0026 z \u003c size) ? z : null;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":67}},{"path":"src/main/java/john/core/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Command that marks a task as not completed by its 1-based position in the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Validate the provided 1-based index against the current list size.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * - Mark the referenced task as incomplete when valid.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation or validation message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * Behavior on invalid input:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - If the index is out of range, no changes are made and a helpful message is returned.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by marking one task incomplete (when valid).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"public class UnmarkCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private final int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an UnmarkCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased the task number as shown to the user (1-based)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    public UnmarkCommand(int oneBased) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        this.oneBased \u003d oneBased;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: marks the task at the given 1-based index as incomplete and saves the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence backend used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with either a confirmation or a validation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException kept for interface contract; not thrown by this implementation","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"        Integer idx \u003d toZeroBasedOrNull(oneBased, tasks.size());","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        if (idx \u003d\u003d null) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"            return CommandResult.ok(\"Please provide a valid task number between 1 and \" + tasks.size() + \".\");","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.get(idx).markAsIncomplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"OK, I\u0027ve marked this task as not done yet:\\n\" + tasks.get(idx));","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"     * Converts a 1-based index to a 0-based index, or returns null if out of bounds.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased 1-based position as seen by the user","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"     * @param size     current number of tasks","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"     * @return zero-based index if valid; otherwise null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"    private static Integer toZeroBasedOrNull(int oneBased, int size) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"        int z \u003d oneBased - 1;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        return (z \u003e\u003d 0 \u0026\u0026 z \u003c size) ? z : null;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":67}},{"path":"src/main/java/john/core/exception/ParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.exception;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"public class ParseException extends Exception {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"    public ParseException(String msg) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"        super(msg);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":7}},{"path":"src/main/java/john/core/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.parser;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.command.*;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.util.DateTimeParser;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Parses raw user input into executable Command instances.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Tokenize the input line into a verb and the remainder.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Dispatch to verb-specific parsers that validate arguments and build commands.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Produce helpful usage errors via ParseException when input is invalid.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * Supported commands and usage:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * - bye","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * - list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - mark \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - unmark \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" * - delete \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" * - todo \u003cdescription\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":" * - deadline \u003cdescription\u003e /by \u003cwhen\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":" * - event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":" * Date/time format expected by deadline and event:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":" * dd/MM/yyyy HH:mm:ss","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"public final class CommandParser {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandParser() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses a full input line into a Command.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * Splits on whitespace into: verb and the rest (verbatim remainder).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * Dispatches to a verb-specific parser.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * @param line raw user input","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a concrete Command ready to execute","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if the verb is unknown or arguments are invalid","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    public static Command parse(String line) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"        if (line \u003d\u003d null || line.isBlank()) throw new ParseException(\"Empty command.\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"        String[] head \u003d line.trim().split(\"\\\\s+\", 2);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        String verb \u003d head[0].toLowerCase();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"        String rest \u003d head.length \u003e 1 ? head[1].trim() : \"\";","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        return switch (verb) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"            case \"bye\" -\u003e new ByeCommand();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"            case \"list\" -\u003e new ListCommand();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"            case \"mark\" -\u003e parseMark(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"            case \"unmark\" -\u003e parseUnmark(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"            case \"delete\" -\u003e parseDelete(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"            case \"todo\" -\u003e parseTodo(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"            case \"deadline\" -\u003e parseDeadline(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"            case \"event\" -\u003e parseEvent(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"            default -\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"                    throw new ParseException(\"Unknown command: \" + verb + \". Try: list, mark, unmark, delete, todo, deadline, event, bye\");","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"        };","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: mark \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder after the verb","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a MarkCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if the task number is missing or not an integer","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseMark(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) throw new ParseException(\"Usage: mark \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"        int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"            oneBased \u003d Integer.parseInt(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: mark \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"        return new MarkCommand(oneBased);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: unmark \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder after the verb","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"     * @return an UnmarkCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if the task number is missing or not an integer","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseUnmark(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) throw new ParseException(\"Usage: unmark \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"        int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"coolprogrammer000"},"content":"            oneBased \u003d Integer.parseInt(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: unmark \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"coolprogrammer000"},"content":"        return new UnmarkCommand(oneBased);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: delete \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder after the verb","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a DeleteCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if the task number is missing or not an integer","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseDelete(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) throw new ParseException(\"Usage: delete \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"coolprogrammer000"},"content":"        int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"coolprogrammer000"},"content":"            oneBased \u003d Integer.parseInt(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: delete \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"coolprogrammer000"},"content":"        return new DeleteCommand(oneBased);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: todo \u003cdescription\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest task description","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"coolprogrammer000"},"content":"     * @return an AddTodoCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if description is empty","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseTodo(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) throw new ParseException(\"Usage: todo \u003cdescription\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"coolprogrammer000"},"content":"        return new AddTodoCommand(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: deadline \u003cdescription\u003e /by \u003cwhen\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"coolprogrammer000"},"content":"     * The \u003cwhen\u003e must be in the DateTimeParser expected format (dd/MM/yyyy HH:mm:ss).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder containing description and by value","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"coolprogrammer000"},"content":"     * @return an AddDeadlineCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if tokens are missing or the date-time is invalid","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseDeadline(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"coolprogrammer000"},"content":"        int byPos \u003d rest.lastIndexOf(\" /by \");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"coolprogrammer000"},"content":"        if (byPos \u003d\u003d -1) throw new ParseException(\"Usage: deadline \u003cdescription\u003e /by \u003cwhen\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"coolprogrammer000"},"content":"        String desc \u003d rest.substring(0, byPos).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"coolprogrammer000"},"content":"        String when \u003d rest.substring(byPos + 5).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"coolprogrammer000"},"content":"        if (desc.isEmpty() || when.isEmpty()) throw new ParseException(\"Usage: deadline \u003cdescription\u003e /by \u003cwhen\u003e\");","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"coolprogrammer000"},"content":"        LocalDateTime by;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"coolprogrammer000"},"content":"            by \u003d DateTimeParser.parseDateTime(when);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Invalid date/time. Expected: \" + DateTimeParser.HUMAN_PATTERN);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"coolprogrammer000"},"content":"        return new AddDeadlineCommand(desc, by);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"coolprogrammer000"},"content":"     * Both \u003cstart\u003e and \u003cend\u003e must be in the DateTimeParser expected format (dd/MM/yyyy HH:mm:ss),","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"coolprogrammer000"},"content":"     * and end must not be before start.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder containing description, start and end tokens","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"coolprogrammer000"},"content":"     * @return an AddEventCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if tokens are missing, date-time values are invalid, or end \u003c start","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseEvent(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"coolprogrammer000"},"content":"        int fromPos \u003d rest.lastIndexOf(\" /from \");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"coolprogrammer000"},"content":"        int toPos \u003d rest.lastIndexOf(\" /to \");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"coolprogrammer000"},"content":"        if (fromPos \u003d\u003d -1 || toPos \u003d\u003d -1 || toPos \u003c\u003d fromPos)","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"coolprogrammer000"},"content":"        String desc \u003d rest.substring(0, fromPos).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"coolprogrammer000"},"content":"        String start \u003d rest.substring(fromPos + 7, toPos).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"coolprogrammer000"},"content":"        String end \u003d rest.substring(toPos + 5).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"coolprogrammer000"},"content":"        if (desc.isEmpty() || start.isEmpty() || end.isEmpty())","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"coolprogrammer000"},"content":"        LocalDateTime from, to;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"coolprogrammer000"},"content":"            from \u003d DateTimeParser.parseDateTime(start);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"coolprogrammer000"},"content":"            to \u003d DateTimeParser.parseDateTime(end);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Invalid date/time. Expected: \" + DateTimeParser.HUMAN_PATTERN);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"coolprogrammer000"},"content":"        if (to.isBefore(from)) throw new ParseException(\"End time must be after start time.\");","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"coolprogrammer000"},"content":"        return new AddEventCommand(desc, from, to);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":187}},{"path":"src/main/java/john/model/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":" * Task representing a deadline with a single due date-time.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * Format responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * - toString() renders as: [D]{base} (by: dd/MM/yyyy HH:mm:ss)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * - serialise() emits a pipe-delimited line using Task.baseSerialize:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * D | done(0|1) | title | by","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Invariants:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - deadline is non-null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * Note:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - The exact date-time string is produced by Task.formatTime(LocalDateTime),","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * which should match the parser\u0027s expected pattern.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * Due date-time for this deadline task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a deadline task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * @param title    task description; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * @param deadline the due date-time; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    public Deadline(String title, LocalDateTime deadline) {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        super(title);","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a human-readable representation of the deadline.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * Example: [D][ ] submit report (by: 05/09/2025 16:30:45)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    public String toString() {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formatTime(deadline) + \")\";","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     * Serialises this task to a pipe-delimited record suitable for FileStorage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     * Format: D | done(0/1) | title | by","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the serialised line","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"    public String serialise() {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"        return baseSerialize(\"D\", formatTime(deadline));","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":56}},{"path":"src/main/java/john/model/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":" * Task representing an event with a start and end date-time.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * Format responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * - toString() renders as: [E]{base} (from: dd/MM/yyyy HH:mm:ss to: dd/MM/yyyy HH:mm:ss)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * - serialise() emits a pipe-delimited line using Task.baseSerialize:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * E | done(0|1) | title | from | to","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Invariants:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - from and to are non-null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - The parser is expected to have validated that to is not before from.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * Note:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - The exact date-time string is produced by Task.formatTime(LocalDateTime),","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * which should match the parser\u0027s expected pattern.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"public class Event extends Task {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an event task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * @param title event description; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * @param from  start date-time; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * @param to    end date-time; must not be null and not before start","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    public Event(String title, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        super(title);","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a human-readable representation of the event.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * Example: [E][ ] project demo (from: 05/09/2025 09:00:00 to: 05/09/2025 10:00:00)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"    public String toString() {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + formatTime(from) + \" to: \" + formatTime(to) + \")\";","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     * Serialises this task to a pipe-delimited record suitable for FileStorage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"     * Format: E | done(0|1) | title | from | to","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the serialised line","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    public String serialise() {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"        return baseSerialize(\"E\", formatTime(from), formatTime(to));","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":57}},{"path":"src/main/java/john/model/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * Base type for all tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * - Hold the task title and completion flag.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - Provide common string rendering and serialisation helpers for subclasses.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * String representation:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - toString() renders as: \"[X] title\" when completed, or \"[ ] title\" when not.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * Serialization support:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - baseSerialize(type, extras...) builds a pipe-delimited record:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * type | done(0|1) | title | extra1 | extra2 ...","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * Subclasses should call this from their serialise() implementation.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * Date-time formatting:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - formatTime(LocalDateTime) uses the pattern \"dd/MM/yyyy HH:mm:ss\".","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" * Keep this consistent with the parser\u0027s expected format.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"public abstract class Task {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    private boolean completed \u003d false;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    private final String title;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a task with the given title.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     * @param title task description; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    public Task(String title) {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        this.title \u003d title;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * Marks this task as complete.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    public void markAsComplete() {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"        this.completed \u003d true;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"     * Marks this task as incomplete.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"    public void markAsIncomplete() {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"        this.completed \u003d false;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a human-readable string in the form \"[X] title\" or \"[ ] title\".","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"    public String toString() {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        return String.format(\"[\" + this.convert() + \"] \" + title);","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns whether this task is completed.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"     * @return true if completed; false otherwise","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"        return this.completed;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"     * Serialises this task to a single line suitable for persistent storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"     * Subclasses provide the concrete encoding using baseSerialize(...).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the serialised representation","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"    public abstract String serialise();","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"     * Converts the completion flag to its single-character marker.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"     * \"X\" when completed, space when not.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"    private String convert() {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"        return completed ? \"X\" : \" \";","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"     * Helper for subclasses to build a pipe-delimited record.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"     * Format: type | done(0|1) | title | extras...","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"     * @param type   single-letter task type tag (for example, T, D, E)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"     * @param extras additional fields to append","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the assembled record","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"coolprogrammer000"},"content":"    protected String baseSerialize(String type, String... extras) {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"coolprogrammer000"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"coolprogrammer000"},"content":"        sb.append(type)","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"coolprogrammer000"},"content":"                .append(\" | \")","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"coolprogrammer000"},"content":"                .append(completed ? \"1\" : \"0\")","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"coolprogrammer000"},"content":"                .append(\" | \")","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"coolprogrammer000"},"content":"                .append(title);","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"coolprogrammer000"},"content":"        for (String extra : extras) {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"coolprogrammer000"},"content":"            sb.append(\" | \").append(extra \u003d\u003d null ? \"\" : extra);","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"coolprogrammer000"},"content":"        return sb.toString();","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"coolprogrammer000"},"content":"     * Formats a LocalDateTime using pattern \"dd/MM/yyyy HH:mm:ss\".","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ldt the date-time to format","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the formatted string","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"coolprogrammer000"},"content":"    protected String formatTime(LocalDateTime ldt) {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"coolprogrammer000"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\");","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"coolprogrammer000"},"content":"        return ldt.format(formatter);","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":117}},{"path":"src/main/java/john/model/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.List;","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * Mutable container for Task objects.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * - Maintain an ordered list of tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - Provide basic operations to add, access, remove, and query tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"public class TaskList {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a TaskList backed by the provided list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"     * The list reference is stored directly; further modifications through","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"     * this TaskList will affect the same list instance.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks initial list to use as the backing store","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an empty TaskList with a new backing list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    public TaskList() {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     * Appends a task to the end of the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * @param task the task to add","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    public void add(Task task) {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"        this.tasks.add(task);","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns the task at the given zero-based index.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"     * @param i index of the task to return","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the task at the specified position","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws IndexOutOfBoundsException if the index is out of range","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"    public Task get(int i) {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        return tasks.get(i);","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns true if the list contains no tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"     * @return whether the list is empty","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"     * @return current size of the list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"    public int size() {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"        return tasks.size();","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"     * Removes and returns the task at the given zero-based index.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"     * @param i index of the task to remove","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the removed task","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws IndexOutOfBoundsException if the index is out of range","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"    public Task remove(int i) {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"        return tasks.remove(i);","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":82}},{"path":"src/main/java/john/model/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":" * Task representing a simple to-do without any date-time fields.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":" * Format responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * - toString(): renders as \"[T]{base}\", for example \"[T][ ] read book\".","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * - serialise(): emits a pipe-delimited record via Task.baseSerialize:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * T | done(0|1) | title","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Notes:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Completion state is handled by the Task base class.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a to-do task with the given title.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"     * @param title task description; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"    public Todo(String title) {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"        super(title);","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a human-readable representation of the to-do.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    public String toString() {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     * Serialises this task to a pipe-delimited record suitable for FileStorage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     * Format: T | done(0|1) | title","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the serialised line","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    public String serialise() {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"        // If you prefer no trailing field, you can use baseSerialize(\"T\") instead.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"        return baseSerialize(\"T\", \"\");","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":43}},{"path":"src/main/java/john/ports/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.ports;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"public interface Storage {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"    TaskList load();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"    void save(TaskList tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":8}},{"path":"src/main/java/john/ports/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.ports;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"public interface Ui extends AutoCloseable {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"    String nextCommand();        // read input, split","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"    void showMessage(String msg);  // print output","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"    void showWelcome(int taskCount);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":7}},{"path":"src/main/java/john/util/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.util;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Parses human-friendly date-time strings into LocalDateTime.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Format:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Expected pattern: \"dd/MM/yyyy HH:mm:ss\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * - Example: \"05/09/2025 16:30:45\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * Parsing rules:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Uses a strict resolver style to reject impossible dates (e.g. 31/02/2025).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - Uses \u0027uuuu\u0027 for the year to ensure strict year handling.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"public final class DateTimeParser {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * Human-readable pattern string for error/help messages.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     * Example value: \"dd/MM/yyyy HH:mm:ss\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    public static final String HUMAN_PATTERN \u003d \"dd/MM/yyyy HH:mm:ss\";","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * Internal formatter matching HUMAN_PATTERN with strict resolution.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * Rejects invalid dates and times (e.g., leap-day errors).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm:ss\").withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses a date-time string into a LocalDateTime using the expected pattern.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     * @param s the input string, e.g., \"05/09/2025 16:30:45\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the parsed LocalDateTime","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws DateTimeParseException if the input does not match the pattern","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     *                                or represents an invalid date/time","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    public static LocalDateTime parseDateTime(String s) throws DateTimeParseException {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"        return LocalDateTime.parse(s, FORMATTER);","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":44}},{"path":"src/test/java/john/core/command/AddEventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Event;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"class FakeStorage implements Storage {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"    TaskList lastSaved;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"    public TaskList load() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"        return new TaskList();","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    public void save(TaskList tasks) {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"        lastSaved \u003d tasks;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"class StubUi implements Ui {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    public String nextCommand() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"        return null;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    public void showMessage(String msg) {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    public void close() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    public void showWelcome(int taskCount) {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"class AddEventCommandTest {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"    void execute_addsEvent_andPersists_andReturnsFeedback() throws Exception {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        FakeStorage storage \u003d new FakeStorage();","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        Ui ui \u003d new StubUi();","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"        LocalDateTime from \u003d LocalDateTime.of(2025, 9, 5, 9, 0, 0);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"        LocalDateTime to \u003d LocalDateTime.of(2025, 9, 5, 10, 0, 0);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        Command cmd \u003d new AddEventCommand(\"Standup\", from, to);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"        CommandResult res \u003d cmd.execute(tasks, storage, ui);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"        assertEquals(1, tasks.size());","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"        assertNotNull(storage.lastSaved, \"Should save after adding\");","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"        assertEquals(1, storage.lastSaved.size());","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(res.feedback().toLowerCase().contains(\"added\"));","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(res.feedback().toLowerCase().contains(\"standup\"));","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(tasks.get(0) instanceof Event);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"        Event e \u003d (Event) tasks.get(0);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(e.toString().toLowerCase().contains(\"standup\"));","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":72}},{"path":"src/test/java/john/core/parser/CommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.parser;","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.command.*;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"class CommandParserTest {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"    void parse_mark_valid() throws Exception {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"        Command cmd \u003d CommandParser.parse(\"mark 3\");","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"        assertInstanceOf(MarkCommand.class, cmd);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"    void parse_deadline_valid() throws Exception {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"        Command cmd \u003d CommandParser.parse(\"deadline Submit report /by 05/09/2025 16:30:45\");","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"        assertInstanceOf(AddDeadlineCommand.class, cmd);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    void parse_deadline_missing_by_throws() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"        ParseException ex \u003d assertThrows(ParseException.class,","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"                () -\u003e CommandParser.parse(\"deadline Submit report\"));","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(ex.getMessage().toLowerCase().contains(\"usage\"));","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    void parse_unknown_command_throws() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"        assertThrows(ParseException.class, () -\u003e CommandParser.parse(\"abracadabra\"));","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":34}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25T17:23:26","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25T17:23:26","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"java -classpath ..\\bin John \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-08-22T12:40:38","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false}],"authorContributionMap":{"-":20,"coolprogrammer000":1}}]
