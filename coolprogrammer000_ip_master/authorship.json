[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"# John project template","lastModifiedDate":"2025-08-22T12:40:38","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 17, update Intellij to the most recent version.","lastModifiedDate":"2024-07-11T16:50:14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17T12:25:53","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 17** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2024-07-11T16:50:14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29T20:29:39","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"1. After that, locate the `src/main/java/John.java` file, right-click it, and choose `Run John.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2025-08-22T12:40:38","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04T21:44:28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"**Warning:** Keep the `src\\main\\java` folder as the root folder for Java files (i.e., don\u0027t rename those folders or move Java files to another folder outside of this folder path), as this is the default location some tools (e.g., Gradle) expect to find Java files.","lastModifiedDate":"2025-01-04T21:44:28","isFullCredit":false}],"authorContributionMap":{"-":24,"coolprogrammer000":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05T15:24:02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05T15:24:02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05T15:24:02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    mainClass.set(\"john.core.Launcher\")","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"    archiveBaseName \u003d \"john\"","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25T00:58:18","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"apply plugin: \u0027java\u0027","lastModifiedDate":"2025-09-07T13:39:57","isFullCredit":false}],"authorContributionMap":{"-":39,"coolprogrammer000":16}},{"path":"data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"E | 0 | test | 10/10/2025 12:00:00 | 15/10/2025 12:00:00","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"D | 0 | dtest | 10/10/2025 13:00:00","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"# John User Guide","lastModifiedDate":"2025-08-22T12:40:38","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"// Update the title above to match the actual product name","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"// Product screenshot goes here","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"// Product intro goes here","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Adding deadlines","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"// Describe the action and its outcome.","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"// Give examples of usage","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"Example: `keyword (optional arguments)`","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"// A description of the expected outcome goes here","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Feature ABC","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29T17:14:46","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17T16:49:07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Feature XYZ","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07T18:33:52","isFullCredit":false}],"authorContributionMap":{"-":29,"coolprogrammer000":1}},{"path":"src/data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"T | 0 | ttest | ","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":1}},{"path":"src/main/java/john/adapters/ConsoleUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.adapters;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.PrintStream;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Console-backed implementation of Ui.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Reads user commands from a Scanner and writes output to a PrintStream.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Behavior:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - nextCommand() trims input, skips empty lines, and returns the next non-empty line.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - nextCommand() returns null on end-of-input (EOF).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - showMessage(msg) prints the message and then a separator line.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - showWelcome(count) prints a startup banner and the number of loaded tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * Resource ownership:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * - This class closes the provided Scanner in close().","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - The provided PrintStream is not closed by this class.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Closing a Scanner that wraps System.in will close System.in.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"public class ConsoleUi implements Ui {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private final Scanner in;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    private final PrintStream out;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a new console UI.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     * @param in  input scanner to read commands from (typically wrapping System.in). Must not be null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     * @param out output stream to write messages to (for example, System.out). Must not be null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    public ConsoleUi(Scanner in, PrintStream out) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        this.in \u003d in;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        this.out \u003d out;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns the next non-empty, trimmed input line, or null if EOF is reached.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * This method skips empty or whitespace-only lines and blocks until a non-empty line is available","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * or the underlying scanner has no more input.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the next command line (trimmed), or null on EOF","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    public String nextCommand() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        while (true) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"            if (!in.hasNextLine()) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"                return null;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"            String line \u003d in.nextLine().trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"            if (line.isEmpty()) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"                continue;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"            return line;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"     * Prints a message followed by a separator line for readability.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"     * A newline is appended after each line.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"     * @param msg the message to display; if null, the literal \"null\" is printed","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"    public void showMessage(String msg) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"        out.println(msg);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"        out.println(\"_________________________________\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"     * Closes the underlying Scanner.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"     * Note: if the scanner wraps System.in, that stream will be closed as well.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"     * The PrintStream provided at construction is not closed by this method.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"    public void close() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"        in.close();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"     * Shows a startup banner and the number of tasks loaded.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"     * @param taskCount the number of tasks currently loaded","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"    public void showWelcome(int taskCount) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"        out.println(\"Loaded \" + taskCount + \" tasks.\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"        showMessage(\"Hello! I\u0027m John. What can I do for you?\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":92}},{"path":"src/main/java/john/adapters/FileStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.adapters;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Event;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Todo;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Deadline;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"import john.util.DateTimeParser;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.File;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.FileReader;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.IOException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"import java.nio.file.Files;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"import java.nio.file.Path;","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.List;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":" * File-backed implementation of Storage that reads and writes tasks","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":" * to a plain text file using a pipe-delimited format.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":" * File format (one task per line, fields are trimmed):","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":" * - Todo:     T | done(0|1) | title","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":" * - Deadline: D | done(0|1) | title | by (dd/MM/yyyy HH:mm:ss)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":" * - Event:    E | done(0|1) | title | from (dd/MM/yyyy HH:mm:ss) | to (dd/MM/yyyy HH:mm:ss)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":" * The load method will create the file if it does not exist and return an empty TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":" * Corrupt or unknown lines are skipped with a console message in this implementation.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":" * This class is not thread-safe.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"public class FileStorage implements Storage {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * Absolute or relative path string to the save file location.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    private final String filePath;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     * Constructs a FileStorage that reads from and writes to the given path.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"     * @param filePath path to the data file; may be relative or absolute","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"    public FileStorage(String filePath) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"     * Resolves a default path next to the running JAR or classes directory.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"     * If the path cannot be resolved, falls back to $HOME/.duke/data.txt.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"     * The anchor class used here is john.core.John. Replace it with your entry class if needed.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a path pointing to data.txt beside the application artifact, or a home-directory fallback","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"    public static Path resolveBesideJar() {","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"        String override \u003d System.getProperty(\"john.data\");","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"        if (override !\u003d null \u0026\u0026 !override.isBlank()) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"            return Paths.get(override);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"            Path loc \u003d Paths.get(john.core.John.class","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"                    .getProtectionDomain()","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"                    .getCodeSource()","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"                    .getLocation()","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"                    .toURI());","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"            if (Files.isRegularFile(loc) \u0026\u0026 loc.toString().endsWith(\".jar\")) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"                return loc.getParent().resolve(\"data.txt\");","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (Exception ignore) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"            // fall through to defaults","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"        Path workingDir \u003d Paths.get(System.getProperty(\"user.dir\")).toAbsolutePath();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"        return workingDir.resolve(\"data.txt\");","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"     * Loads tasks from the configured filePath.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"     * If the file does not exist, attempts to create it and returns an empty TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"     * Parsing rules:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"     * - Lines are split by the \u0027|\u0027 character.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"     * - Whitespace around each field is trimmed.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"     * - T creates a Todo, D creates a Deadline, E creates an Event.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"     * - A done flag of \"1\" marks the task complete; anything else is treated as incomplete.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"     * - Date-time fields are parsed using DateTimeParser.parseDateTime.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"     * Error handling:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"coolprogrammer000"},"content":"     * - IOExceptions during initial creation are logged to System.out and an empty TaskList is returned.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"coolprogrammer000"},"content":"     * - IOExceptions during reading are wrapped in RuntimeException.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a TaskList containing all successfully parsed tasks","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"coolprogrammer000"},"content":"    public TaskList load() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"coolprogrammer000"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"coolprogrammer000"},"content":"        assert filePath !\u003d null \u0026\u0026 !filePath.isBlank() : \"filePath required\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"coolprogrammer000"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"coolprogrammer000"},"content":"        if (!file.exists()) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"coolprogrammer000"},"content":"            try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"coolprogrammer000"},"content":"                if (file.createNewFile()) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"coolprogrammer000"},"content":"                    System.out.println(\"File created: \" + file.getAbsolutePath());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"coolprogrammer000"},"content":"                } else {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"coolprogrammer000"},"content":"                    System.out.println(\"Failed to create file.\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"coolprogrammer000"},"content":"                }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"coolprogrammer000"},"content":"                return new TaskList(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"coolprogrammer000"},"content":"            } catch (IOException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"coolprogrammer000"},"content":"                System.out.println(\"Failed to create file at\" + filePath);","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"coolprogrammer000"},"content":"        try (BufferedReader br \u003d new BufferedReader(new FileReader(file))) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"coolprogrammer000"},"content":"            String line;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"coolprogrammer000"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"coolprogrammer000"},"content":"                String[] parts \u003d line.split(\"\\\\|\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"coolprogrammer000"},"content":"                if (parts.length \u003d\u003d 0) {","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"coolprogrammer000"},"content":"                    continue;","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"coolprogrammer000"},"content":"                }","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"coolprogrammer000"},"content":"                String type \u003d parts[0].trim().toUpperCase();","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"coolprogrammer000"},"content":"                switch (type) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"coolprogrammer000"},"content":"                    case \"T\":","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"coolprogrammer000"},"content":"                        if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"coolprogrammer000"},"content":"                            String title \u003d parts[2].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"coolprogrammer000"},"content":"                            Task todo \u003d new Todo(title);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"coolprogrammer000"},"content":"                            if (\"1\".equals(parts[1].trim())) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"coolprogrammer000"},"content":"                                todo.markAsComplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"coolprogrammer000"},"content":"                            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"coolprogrammer000"},"content":"                            tasks.add(todo);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"coolprogrammer000"},"content":"                        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"coolprogrammer000"},"content":"                        break;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"coolprogrammer000"},"content":"                    case \"D\":","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"coolprogrammer000"},"content":"                        if (parts.length \u003e\u003d 4) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"coolprogrammer000"},"content":"                            String title \u003d parts[2].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"coolprogrammer000"},"content":"                            String deadline \u003d parts[3].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"coolprogrammer000"},"content":"                            Task deadlineTask \u003d new Deadline(title,","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"coolprogrammer000"},"content":"                                    DateTimeParser.parseDateTime(deadline));","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"coolprogrammer000"},"content":"                            if (\"1\".equals(parts[1].trim())) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"coolprogrammer000"},"content":"                                deadlineTask.markAsComplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"coolprogrammer000"},"content":"                            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"coolprogrammer000"},"content":"                            tasks.add(deadlineTask);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"coolprogrammer000"},"content":"                        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"coolprogrammer000"},"content":"                        break;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"coolprogrammer000"},"content":"                    case \"E\":","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"coolprogrammer000"},"content":"                        if (parts.length \u003e\u003d 5) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"coolprogrammer000"},"content":"                            String title \u003d parts[2].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"coolprogrammer000"},"content":"                            String from \u003d parts[3].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"coolprogrammer000"},"content":"                            String to \u003d parts[4].trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"coolprogrammer000"},"content":"                            Task eventTask \u003d new Event(title,","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"coolprogrammer000"},"content":"                                    DateTimeParser.parseDateTime(from), DateTimeParser.parseDateTime(to));","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"coolprogrammer000"},"content":"                            if (\"1\".equals(parts[1].trim())) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"coolprogrammer000"},"content":"                                eventTask.markAsComplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"coolprogrammer000"},"content":"                            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"coolprogrammer000"},"content":"                            tasks.add(eventTask);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"coolprogrammer000"},"content":"                        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"coolprogrammer000"},"content":"                        break;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"coolprogrammer000"},"content":"                    default:","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"coolprogrammer000"},"content":"                        System.out.println(\"Unknown task type: \" + parts[0]);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"coolprogrammer000"},"content":"                }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"coolprogrammer000"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"coolprogrammer000"},"content":"        return new TaskList(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"coolprogrammer000"},"content":"     * Saves the given TaskList to the configured filePath.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"coolprogrammer000"},"content":"     * Each task is written using its serialise representation, followed by the platform line separator.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"coolprogrammer000"},"content":"     * Error handling:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"coolprogrammer000"},"content":"     * - IOExceptions during writing are wrapped in RuntimeException.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"coolprogrammer000"},"content":"     * Note:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"coolprogrammer000"},"content":"     * - This method does not ensure that the parent directory exists. If needed, create it beforehand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks the TaskList to persist","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"coolprogrammer000"},"content":"    public void save(TaskList tasks) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"coolprogrammer000"},"content":"        try (FileWriter writer \u003d new FileWriter(filePath)) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"coolprogrammer000"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"coolprogrammer000"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"coolprogrammer000"},"content":"                writer.write(task.serialise() + System.lineSeparator());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"coolprogrammer000"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":198}},{"path":"src/main/java/john/core/John.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.adapters.ConsoleUi;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.command.Command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.command.CommandResult;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.parser.CommandParser;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"import john.adapters.FileStorage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * Core application class for the John task manager.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * Roles","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * - CLI entry point and command loop (run, main).","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * - Backend service for the JavaFX UI (getReply).","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Orchestrates parsing, command execution, persistence, and UI messaging.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" * Storage","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" * - Uses FileStorage.resolveBesideJar() to choose a writable data path near the","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":" * running JAR; falls back to a home-directory path if needed.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":" * UI","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":" * - In CLI mode, ConsoleUi reads from System.in and writes to System.out.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":" * ConsoleUi.close() will close the Scanner, which also closes System.in.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":" * Design notes","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":" * - Uses static fields for a simple single-VM CLI. For richer testing and multiple","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":" * instances, prefer dependency injection and instance fields.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":" * - Commands should return messages via CommandResult rather than printing directly.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"public class John {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * In-memory task list for the current session. Populated on startup via storage.load().","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"    private static TaskList tasks;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * Persistent storage for tasks. Defaults to saving next to the running JAR.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    private static final FileStorage storage \u003d","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"            new FileStorage(FileStorage.resolveBesideJar().toString());","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"     * Console-based UI that reads from System.in and writes to System.out.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"    private static final ConsoleUi ui \u003d new ConsoleUi(new Scanner(System.in), System.out);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"     * Runs the CLI loop: load tasks, greet the user, then repeatedly read, parse, and","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"     * execute commands until an exit command or EOF is encountered. Parse errors are","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"     * shown to the user; unexpected exceptions are surfaced before shutdown.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"    public static void run() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"        tasks \u003d storage.load();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"        try (Ui ignored \u003d ui) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"            ui.showWelcome(tasks.size());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"            while (true) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"                String line \u003d ui.nextCommand();","lastModifiedDate":"2025-09-07T17:15:38","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"                if (line \u003d\u003d null) {","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"                    break; // EOF","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"                }","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"                try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"                    Command cmd \u003d CommandParser.parse(line);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"                    CommandResult res \u003d cmd.execute(tasks, storage, ui);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"                    if (!res.feedback().isBlank()) {","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"                        ui.showMessage(res.feedback());","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"                    }","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"                    if (res.exit()) {","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"                        break;","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"                    }","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"                } catch (ParseException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"                    ui.showMessage(e.getMessage());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"                }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (Exception e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"            ui.showMessage(e.getMessage());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"     * Standard Java entry point for CLI mode. Delegates to run().","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"     * @param args command-line arguments (unused)","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"        John.run();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"coolprogrammer000"},"content":"     * Constructs a backend instance for GUI mode and loads tasks immediately.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"coolprogrammer000"},"content":"     * Note that this does not start the CLI loop; the JavaFX controller will call","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"coolprogrammer000"},"content":"     * getReply(String) to process individual user inputs.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"coolprogrammer000"},"content":"    public John() {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"coolprogrammer000"},"content":"        tasks \u003d storage.load();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"coolprogrammer000"},"content":"        assert tasks !\u003d null : \"storage.load() must not return null\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"coolprogrammer000"},"content":"     * Immutable reply returned to the JavaFX controller.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"coolprogrammer000"},"content":"     * @param message user-facing feedback text","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"coolprogrammer000"},"content":"     * @param exit    true if the application should exit after showing the message","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"coolprogrammer000"},"content":"    public record Reply(String message, boolean exit) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"coolprogrammer000"},"content":"     * Processes a single user input and returns a reply for the GUI.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"coolprogrammer000"},"content":"     * The reply contains the user-facing message and a boolean that signals","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"coolprogrammer000"},"content":"     * whether the application should exit. Commands may mutate the task list","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"coolprogrammer000"},"content":"     * and persist changes via storage as needed.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"coolprogrammer000"},"content":"     * @param input raw user input text","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a Reply containing the message and an exit flag","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"coolprogrammer000"},"content":"    public Reply getReply(String input) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"coolprogrammer000"},"content":"        assert input !\u003d null : \"controller should not pass null input\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"coolprogrammer000"},"content":"            Command cmd \u003d CommandParser.parse(input);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"coolprogrammer000"},"content":"            CommandResult res \u003d cmd.execute(tasks, storage, ui);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"coolprogrammer000"},"content":"            return new Reply(res.feedback(), res.exit());","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"coolprogrammer000"},"content":"            return new Reply(e.getMessage(), false);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":132}},{"path":"src/main/java/john/core/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.application.Application;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"public class Launcher {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":12}},{"path":"src/main/java/john/core/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.IOException;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.application.Application;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.ui.MainWindow;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"public class Main extends Application {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"    private John john \u003d new John();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"            stage.setScene(scene);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setJohn(john);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"            stage.show();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":32}},{"path":"src/main/java/john/core/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Deadline;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * Command that adds a new Deadline task to the task list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Construct a Deadline from a description and due date-time.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Append it to the provided TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation message in CommandResult.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by adding one task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"public class AddDeadlineCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private final String desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an AddDeadlineCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     * @param desc non-null, non-empty task description","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     * @param by   non-null due date-time for the deadline","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    public AddDeadlineCommand(String desc, LocalDateTime by) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        this.by \u003d by;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: adds a Deadline to the list and saves it.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list to add into","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence mechanism used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface used for messaging (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a success result containing a confirmation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"        Task t \u003d new Deadline(desc, by);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(t);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"Got it. I\u0027ve added this task:\\n\" + t +","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"                \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":55}},{"path":"src/main/java/john/core/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Event;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Command that adds a new Event task to the task list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Construct an Event from a description and a start/end date-time.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - Append it to the provided TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation message in CommandResult.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * Assumptions:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - The caller has already validated that \u0027from\u0027 is not after \u0027to\u0027.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" * - \u0027desc\u0027, \u0027from\u0027, and \u0027to\u0027 are non-null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by adding one task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"public class AddEventCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    private final String desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime from, to;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an AddEventCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     * @param desc event description (non-null, non-empty)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * @param from start date-time (non-null)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * @param to   end date-time (non-null, expected to be \u003e\u003d from)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"    public AddEventCommand(String desc, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: adds an Event to the list and saves it.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list to add into","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence mechanism used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface used for messaging (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a success result containing a confirmation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"        if (to.isBefore(from)) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"End time must be after start time.\");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"        Task t \u003d new Event(desc, from, to);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(t);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"                \"Got it. I\u0027ve added this task:\\n\" + t +","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"                        \"\\nNow you have \" + tasks.size() + \" tasks in the list.\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"        );","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":68}},{"path":"src/main/java/john/core/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Todo;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Command that adds a new Todo task to the task list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Construct a Todo from a description.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Append it to the provided TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation message in CommandResult.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by adding one task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"public class AddTodoCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    private final String desc;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an AddTodoCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * @param desc non-null, non-empty task description","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    public AddTodoCommand(String desc) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: adds a Todo to the list and saves it.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list to add into","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence mechanism used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface used for messaging (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a success result containing a confirmation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"        Task t \u003d new Todo(desc);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(t);","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"Got it. I\u0027ve added this task:\\n\" + t +","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"                \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":51}},{"path":"src/main/java/john/core/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * Command that signals the application to exit.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - Produce a farewell message for the user.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Indicate to the command loop that the program should terminate.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - None. No mutation of tasks or storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"public class ByeCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command by returning an exit-type result with a farewell message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * @param t  the task list (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     * @param s  the storage backend (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui the user interface (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult that contains the goodbye message and signals exit","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList t, Storage s, Ui ui) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.exit(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     * Indicates that this command causes the application to terminate.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     * @return true, always","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    public boolean isExit() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"        return true;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":41}},{"path":"src/main/java/john/core/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"public interface Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"    CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"    default boolean isExit() {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"        return false;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":14}},{"path":"src/main/java/john/core/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":" * Immutable result of executing a command.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":" * Purpose:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * - Carries a user-facing feedback message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * - Indicates whether the application should exit after handling the command.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * Usage:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - CommandResult.ok(\"message\") for normal completion.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - CommandResult.exit(\"message\") to request termination.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * @param feedback user-facing message to display (should be non-null; may be empty)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * @param exit     true if the application should terminate, false otherwise","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"public record CommandResult(String feedback, boolean exit) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a non-exiting result with the given message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * @param msg user-facing message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with exit set to false","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    public static CommandResult ok(String msg) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"        return new CommandResult(msg, false);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns an exiting result with the given message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     * @param msg user-facing message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with exit set to true","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    public static CommandResult exit(String msg) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        return new CommandResult(msg, true);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":38}},{"path":"src/main/java/john/core/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * Command that deletes a task by its 1-based position in the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * - Validate the provided 1-based index against the current list size.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Remove the targeted task when valid.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation or validation message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * Behavior on invalid input:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * - If the index is out of range, no changes are made, and a helpful message is returned.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by removing one task (when valid).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    private final int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a DeleteCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased the task number as shown to the user (1-based)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    public DeleteCommand(int oneBased) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        this.oneBased \u003d oneBased;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: deletes the task at the given 1-based index and saves the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence backend used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with either a confirmation or a validation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException kept for interface contract; not thrown by this implementation","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        int idx \u003d oneBased - 1;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"        if (idx \u003c 0 || idx \u003e\u003d tasks.size()) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"            return CommandResult.ok(\"Please provide a valid task number between 1 and \"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"                    + tasks.size() + \".\");","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        Task removed \u003d tasks.remove(idx);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"                + removed + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":58}},{"path":"src/main/java/john/core/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T18:53:10","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:53:10","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Command that searches for tasks whose description contains a given substring.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" *","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Matching:","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Case-insensitive substring match against each task\u0027s description/title.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * - If you expose a Task#getTitle(), prefer matching on that; otherwise matching","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" *   against Task#toString() is acceptable but may include status/type prefixes.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" *","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * Output:","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - Returns a numbered list (1-based) of matching tasks, one per line.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - Returns \"No matching tasks.\" when nothing matches.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    private final String desc;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a FindCommand.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"     * @param desc substring to search for (case-insensitive); must not be blank","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    public FindCommand(String desc) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the search over the provided task list.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the task list to search","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence backend (unused)","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface (unused)","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult containing either the numbered matches or","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     *         \"No matching tasks.\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"        String needle \u003d desc.toLowerCase();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"            Task t \u003d tasks.get(i);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"            if (t.toString().toLowerCase().contains(needle)) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"                sb.append(i + 1).append(\". \").append(t).append(\u0027\\n\u0027);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        String msg \u003d (sb.length() \u003d\u003d 0) ? \"No matching tasks.\" : sb.toString().trim();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(msg);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T18:53:10","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":55}},{"path":"src/main/java/john/core/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * Command that lists all tasks in a numbered, 1-based format.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - Read the current TaskList.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Produce a user-facing, newline-separated list like:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * \"1. \u003ctask\u003e\\n2. \u003ctask\u003e\\n...\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - If there are no tasks, return \"No tasks yet.\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - None. This command does not mutate tasks or call storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * Builds a numbered listing of all tasks and returns it as a CommandResult.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the task list to display","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence backend (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface (unused)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult containing either the numbered list or \"No tasks yet.\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"            sb.append(i + 1).append(\". \").append(tasks.get(i)).append(\u0027\\n\u0027);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        String body \u003d (sb.length() \u003d\u003d 0) ? \"No tasks yet.\" : sb.toString().trim();","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(body);","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":38}},{"path":"src/main/java/john/core/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Command that marks a task as completed by its 1-based position in the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Validate the provided 1-based index against the current list size.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * - Mark the referenced task as complete when valid.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation or validation message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * Behavior on invalid input:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - If the index is out of range, no changes are made and a helpful message is returned.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by marking one task complete (when valid).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"public class MarkCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private final int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a MarkCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased the task number as shown to the user (1-based)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    public MarkCommand(int oneBased) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        this.oneBased \u003d oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: marks the task at the given 1-based index as complete and saves the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence backend used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with either a confirmation or a validation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException kept for interface contract; not thrown by this implementation","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"        Integer idx \u003d toZeroBasedOrNull(oneBased, tasks.size());","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        if (idx \u003d\u003d null) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"            return CommandResult.ok(\"Please provide a valid task number between 1 and \" +","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"                    tasks.size() + \".\");","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.get(idx).markAsComplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"Nice! I\u0027ve marked this task as done:\\n\" + tasks.get(idx));","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"     * Converts a 1-based index to a 0-based index, or returns null if out of bounds.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased 1-based position as seen by the user","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"     * @param size     current number of tasks","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"     * @return zero-based index if valid; otherwise null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"    private static Integer toZeroBasedOrNull(int oneBased, int size) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        int z \u003d oneBased - 1;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"        return (z \u003e\u003d 0 \u0026\u0026 z \u003c size) ? z : null;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":68}},{"path":"src/main/java/john/core/command/PostponeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-11T18:55:00","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T18:55:00","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Event;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Deadline;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Task;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.Duration;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"public final class PostponeCommand implements Command {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"    private final int oneBased;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime newBy;    // for Deadline","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime newFrom;  // for Event","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime newTo;    // for Event","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"    public PostponeCommand(int oneBased, LocalDateTime newBy, LocalDateTime newFrom, LocalDateTime newTo) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"        this.oneBased \u003d oneBased;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"        this.newBy \u003d newBy;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"        this.newFrom \u003d newFrom;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"        this.newTo \u003d newTo;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"        int idx \u003d oneBased - 1;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"        if (idx \u003c 0 || idx \u003e\u003d tasks.size()) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"            return CommandResult.ok(\"Please provide a valid task number between 1 and \" + tasks.size() + \".\");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        Task original \u003d tasks.get(idx);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        Task updated;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"        if (original instanceof Deadline d) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"            if (newFrom !\u003d null || newTo !\u003d null) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"                throw new ParseException(\"Deadline supports only /by \u003cwhen\u003e.\");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"            updated \u003d new Deadline(d.getTitle(), newBy);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"        } else if (original instanceof Event e) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"            if (newBy !\u003d null) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"                throw new ParseException(\"Event supports /from and /to, not /by.\");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"            LocalDateTime start \u003d (newFrom !\u003d null) ? newFrom : e.getFrom();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"            LocalDateTime end;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"            if (newFrom !\u003d null \u0026\u0026 newTo !\u003d null) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"                end \u003d newTo;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"            } else if (newFrom !\u003d null) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"                Duration dur \u003d Duration.between(e.getFrom(), e.getTo());","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"                end \u003d start.plus(dur);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"            } else if (newTo !\u003d null) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"                end \u003d newTo;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"            } else {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"                throw new ParseException(\"Usage: postpone \u003ctask-number\u003e /from \u003cwhen\u003e [/to \u003cwhen\u003e] or /to \u003cwhen\u003e\");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"            if (end.isBefore(start)) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"                throw new ParseException(\"End time must be after start time.\");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"            updated \u003d new Event(e.getTitle(), start, end);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"        } else {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"            return CommandResult.ok(\"Task \" + oneBased + \" is not postponable.\");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"        if (original.isCompleted()) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"            updated.markAsComplete(); // preserve done-flag","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.set(idx, updated);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"Noted. I\u0027ve updated this task:\\n\" + updated);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-11T18:55:00","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":79}},{"path":"src/main/java/john/core/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Command that marks a task as not completed by its 1-based position in the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Validate the provided 1-based index against the current list size.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * - Mark the referenced task as incomplete when valid.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Persist the updated list via Storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Return a user-facing confirmation or validation message.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * Behavior on invalid input:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - If the index is out of range, no changes are made and a helpful message is returned.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * Side effects:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - Mutates the given TaskList by marking one task incomplete (when valid).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - Calls storage.save(tasks) to persist state.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"public class UnmarkCommand implements Command {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private final int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an UnmarkCommand.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased the task number as shown to the user (1-based)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    public UnmarkCommand(int oneBased) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        this.oneBased \u003d oneBased;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * Executes the command: marks the task at the given 1-based index as incomplete and saves the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks   the mutable task list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * @param storage persistence backend used to save the updated list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ui      user interface (not used directly here)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a CommandResult with either a confirmation or a validation message","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException kept for interface contract; not thrown by this implementation","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandResult execute(TaskList tasks, Storage storage, Ui ui) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"        Integer idx \u003d toZeroBasedOrNull(oneBased, tasks.size());","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        if (idx \u003d\u003d null) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"            return CommandResult.ok(\"Please provide a valid task number between 1 and \" + tasks.size() + \".\");","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.get(idx).markAsIncomplete();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        storage.save(tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        return CommandResult.ok(\"OK, I\u0027ve marked this task as not done yet:\\n\" + tasks.get(idx));","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"     * Converts a 1-based index to a 0-based index, or returns null if out of bounds.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"     * @param oneBased 1-based position as seen by the user","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"     * @param size     current number of tasks","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"     * @return zero-based index if valid; otherwise null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"    private static Integer toZeroBasedOrNull(int oneBased, int size) {","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"        int z \u003d oneBased - 1;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        return (z \u003e\u003d 0 \u0026\u0026 z \u003c size) ? z : null;","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":67}},{"path":"src/main/java/john/core/exception/ParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.exception;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"public class ParseException extends Exception {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"    public ParseException(String msg) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"        super(msg);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":7}},{"path":"src/main/java/john/core/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.parser;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.command.*;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.util.DateTimeParser;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Parses raw user input into executable Command instances.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - Tokenize the input line into a verb and the remainder.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - Dispatch to verb-specific parsers that validate arguments and build commands.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Produce helpful usage errors via ParseException when input is invalid.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * Supported commands and usage:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * - bye","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * - list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * - mark \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - unmark \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" * - delete \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" * - todo \u003cdescription\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":" * - deadline \u003cdescription\u003e /by \u003cwhen\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":" * - event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":" * - find \u003csubstring\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":" * Date/time format expected by deadline and event:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":" * dd/MM/yyyy HH:mm:ss","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"public final class CommandParser {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    public CommandParser() {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses a full input line into a Command.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * Splits on whitespace into: verb and the rest (verbatim remainder).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * Dispatches to a verb-specific parser.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * @param line raw user input","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a concrete Command ready to execute","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if the verb is unknown or arguments are invalid","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    public static Command parse(String line) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"        if (line \u003d\u003d null || line.isBlank()) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Empty command.\");","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"        String[] head \u003d line.trim().split(\"\\\\s+\", 2);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        String verb \u003d head[0].toLowerCase();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        String rest \u003d head.length \u003e 1 ? head[1].trim() : \"\";","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"        return switch (verb) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"            case \"bye\" -\u003e new ByeCommand();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"            case \"list\" -\u003e new ListCommand();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"            case \"mark\" -\u003e parseMark(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"            case \"unmark\" -\u003e parseUnmark(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"            case \"delete\" -\u003e parseDelete(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"            case \"todo\" -\u003e parseTodo(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"            case \"deadline\" -\u003e parseDeadline(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"            case \"event\" -\u003e parseEvent(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"            case \"find\" -\u003e parseFind(rest);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"            case \"postpone\" -\u003e parsePostpone(rest);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"            default -\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"                    throw new ParseException(\"Unknown command: \" + verb +","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"                            \". Try: list, mark, unmark, delete, todo, deadline, event, find, bye, postpone\");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"        };","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: mark \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder after the verb","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a MarkCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if the task number is missing or not an integer","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseMark(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: mark \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"        int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"            oneBased \u003d Integer.parseInt(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: mark \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"        return new MarkCommand(oneBased);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: unmark \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder after the verb","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"coolprogrammer000"},"content":"     * @return an UnmarkCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if the task number is missing or not an integer","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseUnmark(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: unmark \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"coolprogrammer000"},"content":"        int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"coolprogrammer000"},"content":"            oneBased \u003d Integer.parseInt(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: unmark \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"coolprogrammer000"},"content":"        return new UnmarkCommand(oneBased);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: delete \u003ctask-number\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder after the verb","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a DeleteCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if the task number is missing or not an integer","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseDelete(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: delete \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"coolprogrammer000"},"content":"        int oneBased;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"coolprogrammer000"},"content":"            oneBased \u003d Integer.parseInt(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: delete \u003ctask-number\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"coolprogrammer000"},"content":"        return new DeleteCommand(oneBased);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: todo \u003cdescription\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest task description","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"coolprogrammer000"},"content":"     * @return an AddTodoCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if description is empty","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseTodo(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: todo \u003cdescription\u003e\");","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"coolprogrammer000"},"content":"        return new AddTodoCommand(rest);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: deadline \u003cdescription\u003e /by \u003cwhen\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"coolprogrammer000"},"content":"     * The \u003cwhen\u003e must be in the DateTimeParser expected format (dd/MM/yyyy HH:mm:ss).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder containing description and by value","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"coolprogrammer000"},"content":"     * @return an AddDeadlineCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if tokens are missing or the date-time is invalid","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseDeadline(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"coolprogrammer000"},"content":"        int byPos \u003d rest.lastIndexOf(\" /by \");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"coolprogrammer000"},"content":"        if (byPos \u003d\u003d -1) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: deadline \u003cdescription\u003e /by \u003cwhen\u003e\");","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"coolprogrammer000"},"content":"        String desc \u003d rest.substring(0, byPos).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"coolprogrammer000"},"content":"        String when \u003d rest.substring(byPos + 5).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"coolprogrammer000"},"content":"        if (desc.isEmpty() || when.isEmpty()) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: deadline \u003cdescription\u003e /by \u003cwhen\u003e\");","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"coolprogrammer000"},"content":"        LocalDateTime by;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"coolprogrammer000"},"content":"            by \u003d DateTimeParser.parseDateTime(when);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Invalid date/time. Expected: \" + DateTimeParser.HUMAN_PATTERN);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"coolprogrammer000"},"content":"        return new AddDeadlineCommand(desc, by);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"coolprogrammer000"},"content":"     * Both \u003cstart\u003e and \u003cend\u003e must be in the DateTimeParser expected format (dd/MM/yyyy HH:mm:ss),","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"coolprogrammer000"},"content":"     * and end must not be before start.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest remainder containing description, start and end tokens","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"coolprogrammer000"},"content":"     * @return an AddEventCommand","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if tokens are missing, date-time values are invalid, or end \u003c start","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseEvent(String rest) throws ParseException {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"coolprogrammer000"},"content":"        int fromPos \u003d rest.lastIndexOf(\" /from \");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"coolprogrammer000"},"content":"        int toPos \u003d rest.lastIndexOf(\" /to \");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"coolprogrammer000"},"content":"        if (fromPos \u003d\u003d -1 || toPos \u003d\u003d -1 || toPos \u003c\u003d fromPos) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"coolprogrammer000"},"content":"        String desc \u003d rest.substring(0, fromPos).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"coolprogrammer000"},"content":"        String start \u003d rest.substring(fromPos + 7, toPos).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"coolprogrammer000"},"content":"        String end \u003d rest.substring(toPos + 5).trim();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"coolprogrammer000"},"content":"        if (desc.isEmpty() || start.isEmpty() || end.isEmpty()) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e\");","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"coolprogrammer000"},"content":"        LocalDateTime from, to;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"coolprogrammer000"},"content":"            from \u003d DateTimeParser.parseDateTime(start);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"coolprogrammer000"},"content":"            to \u003d DateTimeParser.parseDateTime(end);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Invalid date/time. Expected: \" + DateTimeParser.HUMAN_PATTERN);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"coolprogrammer000"},"content":"        if (to.isBefore(from)) {","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"End time must be after start time.\");","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"coolprogrammer000"},"content":"        return new AddEventCommand(desc, from, to);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses: find \u003csubstring\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"coolprogrammer000"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"coolprogrammer000"},"content":"     * Rules:","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"coolprogrammer000"},"content":"     * - Requires a non-empty substring.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"coolprogrammer000"},"content":"     * - Matching is performed by FindCommand (case-insensitive).","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"coolprogrammer000"},"content":"     * @param rest the substring to search for","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"coolprogrammer000"},"content":"     * @return a FindCommand configured with the substring","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws ParseException if the substring is missing","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parseFind(String rest) throws ParseException {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(\"Usage: find \u003csubstring\u003e\");","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"coolprogrammer000"},"content":"        return new FindCommand(rest);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"coolprogrammer000"},"content":"    private static Command parsePostpone(String rest) throws ParseException {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"coolprogrammer000"},"content":"        // Allowed:","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"coolprogrammer000"},"content":"        // 1) postpone \u003cidx\u003e /by \u003cwhen\u003e","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"coolprogrammer000"},"content":"        // 2) postpone \u003cidx\u003e /from \u003cstart\u003e /to \u003cend\u003e","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"coolprogrammer000"},"content":"        final String USAGE \u003d \"Usage: postpone \u003ctask-number\u003e /by \u003cwhen\u003e | postpone \u003ctask-number\u003e /from \u003cstart\u003e /to \u003cend\u003e\";","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"coolprogrammer000"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(USAGE);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"coolprogrammer000"},"content":"        String[] head \u003d rest.split(\"\\\\s+\", 2);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"coolprogrammer000"},"content":"        int oneBased;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"coolprogrammer000"},"content":"            oneBased \u003d Integer.parseInt(head[0]);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(USAGE);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"coolprogrammer000"},"content":"        String tail \u003d (head.length \u003e 1) ? head[1].trim() : \"\";","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"coolprogrammer000"},"content":"        if (tail.isEmpty()) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"coolprogrammer000"},"content":"            throw new ParseException(USAGE);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"coolprogrammer000"},"content":"        // Case 1: /by \u003cwhen\u003e","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"coolprogrammer000"},"content":"        if (tail.startsWith(\"/by \")) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"coolprogrammer000"},"content":"            String byStr \u003d tail.substring(4).trim();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"coolprogrammer000"},"content":"            // no extra tags allowed","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"coolprogrammer000"},"content":"            if (byStr.isEmpty() || byStr.contains(\" /from \") || byStr.contains(\" /to \")) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"coolprogrammer000"},"content":"                throw new ParseException(USAGE);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"coolprogrammer000"},"content":"            try {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"coolprogrammer000"},"content":"                LocalDateTime by \u003d DateTimeParser.parseDateTime(byStr);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"coolprogrammer000"},"content":"                return new PostponeCommand(oneBased, by, null, null);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"coolprogrammer000"},"content":"            } catch (java.time.format.DateTimeParseException ex) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"coolprogrammer000"},"content":"                throw new ParseException(\"Invalid date/time. Expected: \" + DateTimeParser.HUMAN_PATTERN);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"coolprogrammer000"},"content":"        // Case 2: /from \u003cstart\u003e /to \u003cend\u003e","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"coolprogrammer000"},"content":"        if (tail.startsWith(\"/from \")) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"coolprogrammer000"},"content":"            int toPos \u003d tail.indexOf(\" /to \");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"coolprogrammer000"},"content":"            if (toPos \u003c 0) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"coolprogrammer000"},"content":"                throw new ParseException(USAGE);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"coolprogrammer000"},"content":"            String fromStr \u003d tail.substring(6, toPos).trim();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"coolprogrammer000"},"content":"            String toStr   \u003d tail.substring(toPos + 5).trim();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"coolprogrammer000"},"content":"            if (fromStr.isEmpty() || toStr.isEmpty()) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"coolprogrammer000"},"content":"                throw new ParseException(USAGE);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"coolprogrammer000"},"content":"            try {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"coolprogrammer000"},"content":"                LocalDateTime from \u003d DateTimeParser.parseDateTime(fromStr);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"coolprogrammer000"},"content":"                LocalDateTime to   \u003d DateTimeParser.parseDateTime(toStr);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"coolprogrammer000"},"content":"                return new PostponeCommand(oneBased, null, from, to);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"coolprogrammer000"},"content":"            } catch (java.time.format.DateTimeParseException ex) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"coolprogrammer000"},"content":"                throw new ParseException(\"Invalid date/time. Expected: \" + DateTimeParser.HUMAN_PATTERN);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"coolprogrammer000"},"content":"            }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"coolprogrammer000"},"content":"        throw new ParseException(USAGE);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":288}},{"path":"src/main/java/john/core/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.ui;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.io.IOException;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.Collections;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.Node;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * Represents a dialog box consisting of an ImageView to represent the speaker\u0027s face","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * and a label containing text from the speaker.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    @FXML","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"    private Label dialog;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    @FXML","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"        try {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"            fxmlLoader.load();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        assert dialog !\u003d null \u0026\u0026 displayPicture !\u003d null : \"FXML nodes not injected\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"        dialog.setText(text);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    private void flip() {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"    public static DialogBox getJohnDialog(String text, Image img) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        db.flip();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"        return db;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":60}},{"path":"src/main/java/john/core/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.ui;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.application.Platform;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.util.Duration;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.John;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * Controller for the main GUI.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    @FXML","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    @FXML","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    @FXML","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    private TextField userInput;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    @FXML","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    private Button sendButton;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    private John john;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/you.png\"));","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    private Image johnImage \u003d new Image(this.getClass().getResourceAsStream(\"/john.jpg\"));","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"    @FXML","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    public void initialize() {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    public void setJohn(John d) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"        assert d !\u003d null : \"backend must not be null\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"        john \u003d d;","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing John\u0027s reply and then appends them to","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"    @FXML","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"    private void handleUserInput() {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        if (input \u003d\u003d null || input.isBlank()) {","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"            return;","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        John.Reply reply \u003d john.getReply(input);","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"                DialogBox.getJohnDialog(reply.message(), johnImage)","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"        );","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"        userInput.clear();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        if (reply.exit()) {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.millis(3000));","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"            delay.setOnFinished(ev -\u003e {","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"                ((Stage) sendButton.getScene().getWindow()).close();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"            });","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"            delay.play();","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":73}},{"path":"src/main/java/john/model/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":" * Task representing a deadline with a single due date-time.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * Format responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * - toString() renders as: [D]{base} (by: dd/MM/yyyy HH:mm:ss)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * - serialise() emits a pipe-delimited line using Task.baseSerialize:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * D | done(0|1) | title | by","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Invariants:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - deadline is non-null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * Note:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - The exact date-time string is produced by Task.formatTime(LocalDateTime),","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * which should match the parser\u0027s expected pattern.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * Due date-time for this deadline task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a deadline task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * @param title    task description; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * @param deadline the due date-time; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    public Deadline(String title, LocalDateTime deadline) {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        super(title);","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        assert deadline !\u003d null : \"deadline must not be null\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a human-readable representation of the deadline.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * Example: [D][ ] submit report (by: 05/09/2025 16:30:45)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"    public String toString() {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formatTime(deadline) + \")\";","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     * Serialises this task to a pipe-delimited record suitable for FileStorage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"     * Format: D | done(0/1) | title | by","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the serialised line","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    public String serialise() {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"        return baseSerialize(\"D\", formatTime(deadline));","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":57}},{"path":"src/main/java/john/model/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":" * Task representing an event with a start and end date-time.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * Format responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * - toString() renders as: [E]{base} (from: dd/MM/yyyy HH:mm:ss to: dd/MM/yyyy HH:mm:ss)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * - serialise() emits a pipe-delimited line using Task.baseSerialize:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * E | done(0|1) | title | from | to","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * Invariants:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - from and to are non-null.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * - The parser is expected to have validated that to is not before from.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * Note:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * - The exact date-time string is produced by Task.formatTime(LocalDateTime),","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * which should match the parser\u0027s expected pattern.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"public class Event extends Task {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an event task.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * @param title event description; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * @param from  start date-time; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * @param to    end date-time; must not be null and not before start","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    public Event(String title, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        super(title);","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        assert from !\u003d null \u0026\u0026 to !\u003d null : \"event times must not be null\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        assert !to.isBefore(from) : \"event end must be \u003e\u003d start\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a human-readable representation of the event.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"     * Example: [E][ ] project demo (from: 05/09/2025 09:00:00 to: 05/09/2025 10:00:00)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    public String toString() {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + formatTime(from) + \" to: \" + formatTime(to) + \")\";","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"     * Serialises this task to a pipe-delimited record suitable for FileStorage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"     * Format: E | done(0|1) | title | from | to","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the serialised line","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"    public String serialise() {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        return baseSerialize(\"E\", formatTime(from), formatTime(to));","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"    public LocalDateTime getFrom() {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"        return this.from;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"    public LocalDateTime getTo() {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        return this.to;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":67}},{"path":"src/main/java/john/model/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * Base type for all tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * - Hold the task title and completion flag.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - Provide common string rendering and serialisation helpers for subclasses.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * String representation:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * - toString() renders as: \"[X] title\" when completed, or \"[ ] title\" when not.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * Serialization support:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - baseSerialize(type, extras...) builds a pipe-delimited record:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" * type | done(0|1) | title | extra1 | extra2 ...","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":" * Subclasses should call this from their serialise() implementation.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":" * Date-time formatting:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":" * - formatTime(LocalDateTime) uses the pattern \"dd/MM/yyyy HH:mm:ss\".","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":" * Keep this consistent with the parser\u0027s expected format.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"public abstract class Task {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"    private boolean completed \u003d false;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    private final String title;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a task with the given title.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"     * @param title task description; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    public Task(String title) {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        assert title !\u003d null : \"title must not be null\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        this.title \u003d title;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     * Marks this task as complete.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    public void markAsComplete() {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"        this.completed \u003d true;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     * Marks this task as incomplete.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"    public void markAsIncomplete() {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"        this.completed \u003d false;","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a human-readable string in the form \"[X] title\" or \"[ ] title\".","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"    public String toString() {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"        return String.format(\"[\" + this.convert() + \"] \" + title);","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns whether this task is completed.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"     * @return true if completed; false otherwise","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"        return this.completed;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"     * Serialises this task to a single line suitable for persistent storage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"     * Subclasses provide the concrete encoding using baseSerialize(...).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the serialised representation","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"    public abstract String serialise();","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"     * Converts the completion flag to its single-character marker.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"     * \"X\" when completed, space when not.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"    private String convert() {","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"        return completed ? \"X\" : \" \";","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"     * Helper for subclasses to build a pipe-delimited record.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"     * Format: type | done(0|1) | title | extras...","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"     * @param type   single-letter task type tag (for example, T, D, E)","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"     * @param extras additional fields to append","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the assembled record","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"coolprogrammer000"},"content":"    protected String baseSerialize(String type, String... extras) {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"coolprogrammer000"},"content":"        assert type !\u003d null \u0026\u0026 !type.isBlank() : \"task type tag must be non-blank\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"coolprogrammer000"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"coolprogrammer000"},"content":"        sb.append(type)","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"coolprogrammer000"},"content":"                .append(\" | \")","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"coolprogrammer000"},"content":"                .append(completed ? \"1\" : \"0\")","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"coolprogrammer000"},"content":"                .append(\" | \")","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"coolprogrammer000"},"content":"                .append(title);","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"coolprogrammer000"},"content":"        for (String extra : extras) {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"coolprogrammer000"},"content":"            sb.append(\" | \").append(extra \u003d\u003d null ? \"\" : extra);","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"coolprogrammer000"},"content":"        return sb.toString();","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"coolprogrammer000"},"content":"     * Formats a LocalDateTime using pattern \"dd/MM/yyyy HH:mm:ss\".","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"coolprogrammer000"},"content":"     * @param ldt the date-time to format","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the formatted string","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"coolprogrammer000"},"content":"    protected String formatTime(LocalDateTime ldt) {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"coolprogrammer000"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\");","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"coolprogrammer000"},"content":"        return ldt.format(formatter);","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"coolprogrammer000"},"content":"    public String getTitle() {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"coolprogrammer000"},"content":"        return this.title;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-08-22T13:10:47","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":123}},{"path":"src/main/java/john/model/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import java.util.List;","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * Mutable container for Task objects.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * - Maintain an ordered list of tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * - Provide basic operations to add, access, remove, and query tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"public class TaskList {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a TaskList backed by the provided list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"     * The list reference is stored directly; further modifications through","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"     * this TaskList will affect the same list instance.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"     * @param tasks initial list to use as the backing store","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates an empty TaskList with a new backing list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    public TaskList() {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     * Appends a task to the end of the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * @param task the task to add","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    public void add(Task task) {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"        assert task !\u003d null : \"cannot add null task\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"        this.tasks.add(task);","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns the task at the given zero-based index.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"     * @param i index of the task to return","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the task at the specified position","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws IndexOutOfBoundsException if the index is out of range","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"    public Task get(int i) {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        assert i \u003e\u003d 0 \u0026\u0026 i \u003c tasks.size() : \"index out of range for get\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        return tasks.get(i);","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns true if the list contains no tasks.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"     * @return whether the list is empty","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"     * @return current size of the list","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"    public int size() {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"        return tasks.size();","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"     * Removes and returns the task at the given zero-based index.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"     * @param i index of the task to remove","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the removed task","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws IndexOutOfBoundsException if the index is out of range","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"    public Task remove(int i) {","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"        assert i \u003e\u003d 0 \u0026\u0026 i \u003c tasks.size() : \"index out of range for remove\";","lastModifiedDate":"2025-09-11T18:55:59","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"        return tasks.remove(i);","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"    public void set(int idx, Task updated) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.set(idx, updated);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-06T11:37:24","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":89}},{"path":"src/main/java/john/model/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.model;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":" * Task representing a simple to-do without any date-time fields.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":" * Format responsibilities:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":" * - toString(): renders as \"[T]{base}\", for example \"[T][ ] read book\".","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":" * - serialise(): emits a pipe-delimited record via Task.baseSerialize:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * T | done(0|1) | title","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Notes:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Completion state is handled by the Task base class.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"     * Creates a to-do task with the given title.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"     * @param title task description; must not be null","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"    public Todo(String title) {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"        super(title);","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"     * Returns a human-readable representation of the to-do.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    public String toString() {","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"     * Serialises this task to a pipe-delimited record suitable for FileStorage.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"     * Format: T | done(0|1) | title","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the serialised line","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    public String serialise() {","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"        // If you prefer no trailing field, you can use baseSerialize(\"T\") instead.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"        return baseSerialize(\"T\", \"\");","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-05T16:25:36","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-08-22T15:19:40","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":43}},{"path":"src/main/java/john/ports/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.ports;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"public interface Storage {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"    TaskList load();","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"    void save(TaskList tasks);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":8}},{"path":"src/main/java/john/ports/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.ports;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"public interface Ui extends AutoCloseable {","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"    String nextCommand();        // read input, split","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"    void showMessage(String msg);  // print output","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"    void showWelcome(int taskCount);","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":7}},{"path":"src/main/java/john/util/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.util;","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T10:22:48","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"/**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":" * Parses human-friendly date-time strings into LocalDateTime.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":" * Format:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":" * - Expected pattern: \"dd/MM/yyyy HH:mm:ss\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":" * - Example: \"05/09/2025 16:30:45\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":" * Parsing rules:","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":" * - Uses a strict resolver style to reject impossible dates (e.g. 31/02/2025).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":" * - Uses \u0027uuuu\u0027 for the year to ensure strict year handling.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":" */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"public final class DateTimeParser {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"     * Human-readable pattern string for error/help messages.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"     * Example value: \"dd/MM/yyyy HH:mm:ss\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"    public static final String HUMAN_PATTERN \u003d \"dd/MM/yyyy HH:mm:ss\";","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"     * Internal formatter matching HUMAN_PATTERN with strict resolution.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"     * Rejects invalid dates and times (e.g., leap-day errors).","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"            ofPattern(\"dd/MM/uuuu HH:mm:ss\").withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2025-09-11T19:05:37","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    /**","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"     * Parses a date-time string into a LocalDateTime using the expected pattern.","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"     *","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"     * @param s the input string, e.g., \"05/09/2025 16:30:45\"","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"     * @return the parsed LocalDateTime","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"     * @throws DateTimeParseException if the input does not match the pattern","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"     *                                or represents an invalid date/time","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"     */","lastModifiedDate":"2025-09-07T18:31:15","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    public static LocalDateTime parseDateTime(String s) throws DateTimeParseException {","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"        return LocalDateTime.parse(s, FORMATTER);","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-06T10:34:21","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":45}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"         maxHeight\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"         maxWidth\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"         prefWidth\u003d\"400.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"         type\u003d\"javafx.scene.layout.HBox\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"         xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"    \u003c/children\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"            minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"            xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"            fx:controller\u003d\"john.core.ui.MainWindow\"\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"        \u003cTextField fx:id\u003d\"userInput\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"                   layoutY\u003d\"558.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"                   onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"                   prefHeight\u003d\"41.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"                   prefWidth\u003d\"324.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"        \u003cButton fx:id\u003d\"sendButton\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"                layoutX\u003d\"324.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"                layoutY\u003d\"558.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"                mnemonicParsing\u003d\"false\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"                onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"                prefHeight\u003d\"41.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"                prefWidth\u003d\"76.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"                text\u003d\"Send\" /\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"                    hbarPolicy\u003d\"NEVER\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"                    hvalue\u003d\"1.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"                    prefHeight\u003d\"557.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"                    prefWidth\u003d\"400.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"                    vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"                      prefHeight\u003d\"552.0\"","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"                      prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"            \u003c/content\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    \u003c/children\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2025-09-11T14:31:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":43}},{"path":"src/test/java/john/core/command/AddEventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.command;","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Event;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"class FakeStorage implements Storage {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"    TaskList lastSaved;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"    public TaskList load() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"        return new TaskList();","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"    public void save(TaskList tasks) {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"        lastSaved \u003d tasks;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"class StubUi implements Ui {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    public String nextCommand() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"        return null;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"    public void showMessage(String msg) {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"    public void close() {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    @Override","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"    public void showWelcome(int taskCount) {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"class AddEventCommandTest {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"    void execute_addsEvent_andPersists_andReturnsFeedback() throws Exception {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"        FakeStorage storage \u003d new FakeStorage();","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        Ui ui \u003d new StubUi();","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"        LocalDateTime from \u003d LocalDateTime.of(2025, 9, 5, 9, 0, 0);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"        LocalDateTime to \u003d LocalDateTime.of(2025, 9, 5, 10, 0, 0);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        Command cmd \u003d new AddEventCommand(\"Standup\", from, to);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"        CommandResult res \u003d cmd.execute(tasks, storage, ui);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"        assertEquals(1, tasks.size());","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"        assertNotNull(storage.lastSaved, \"Should save after adding\");","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"        assertEquals(1, storage.lastSaved.size());","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(res.feedback().toLowerCase().contains(\"added\"));","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(res.feedback().toLowerCase().contains(\"standup\"));","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(tasks.get(0) instanceof Event);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"        Event e \u003d (Event) tasks.get(0);","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(e.toString().toLowerCase().contains(\"standup\"));","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":72}},{"path":"src/test/java/john/core/parser/CommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coolprogrammer000"},"content":"package john.core.parser;","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.John;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.command.*;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"coolprogrammer000"},"content":"import john.core.exception.ParseException;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Deadline;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.Event;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"coolprogrammer000"},"content":"import john.model.TaskList;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Storage;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"coolprogrammer000"},"content":"import john.ports.Ui;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"coolprogrammer000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"coolprogrammer000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"coolprogrammer000"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"coolprogrammer000"},"content":"class CommandParserTest {","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"coolprogrammer000"},"content":"    static class FakeStorage implements Storage {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"coolprogrammer000"},"content":"        int saveCount \u003d 0;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"coolprogrammer000"},"content":"        TaskList lastSaved;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"coolprogrammer000"},"content":"        @Override public TaskList load() { return new TaskList(); }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"coolprogrammer000"},"content":"        @Override public void save(TaskList tasks) {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"coolprogrammer000"},"content":"            saveCount++;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"coolprogrammer000"},"content":"            lastSaved \u003d tasks;","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"coolprogrammer000"},"content":"        }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"coolprogrammer000"},"content":"    /** No-op UI stub; satisfies the interface without side effects. */","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"coolprogrammer000"},"content":"    static class StubUi implements Ui {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"coolprogrammer000"},"content":"        @Override public String nextCommand() { return null; }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"coolprogrammer000"},"content":"        @Override public void showMessage(String msg) { /* ignore */ }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"coolprogrammer000"},"content":"        @Override public void showWelcome(int taskCount) { /* ignore */ }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"coolprogrammer000"},"content":"        @Override public void close() { /* ignore */ }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"coolprogrammer000"},"content":"    /* ---------- Helpers ---------- */","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"coolprogrammer000"},"content":"    private CommandResult parseAndExec(String input, TaskList tasks, FakeStorage st, StubUi ui)","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"coolprogrammer000"},"content":"            throws ParseException {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"coolprogrammer000"},"content":"        Command cmd \u003d CommandParser.parse(input);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"coolprogrammer000"},"content":"        return cmd.execute(tasks, st, ui);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"coolprogrammer000"},"content":"    void postpone_deadline_by_updatesDue_andPersists() throws Exception {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"coolprogrammer000"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(new Deadline(\"report\", LocalDateTime.of(2025, 9, 5, 12, 0, 0)));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"coolprogrammer000"},"content":"        FakeStorage st \u003d new FakeStorage();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"coolprogrammer000"},"content":"        StubUi ui \u003d new StubUi();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"coolprogrammer000"},"content":"        parseAndExec(\"postpone 1 /by 06/09/2025 18:00:00\", tasks, st, ui);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"coolprogrammer000"},"content":"        String s \u003d tasks.get(0).toString();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(s.contains(\"06/09/2025 18:00:00\"), \"deadline should reflect new /by time\");","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"coolprogrammer000"},"content":"        assertEquals(1, st.saveCount);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"coolprogrammer000"},"content":"    void postpone_event_fromTo_updatesBoth_andPersists() throws Exception {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"coolprogrammer000"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(new Event(","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"coolprogrammer000"},"content":"                \"demo\",","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"coolprogrammer000"},"content":"                LocalDateTime.of(2025, 9, 7, 14, 0, 0),","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"coolprogrammer000"},"content":"                LocalDateTime.of(2025, 9, 7, 15, 0, 0)","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"coolprogrammer000"},"content":"        ));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"coolprogrammer000"},"content":"        FakeStorage st \u003d new FakeStorage();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"coolprogrammer000"},"content":"        StubUi ui \u003d new StubUi();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"coolprogrammer000"},"content":"        parseAndExec(\"postpone 1 /from 07/09/2025 16:00:00 /to 07/09/2025 17:15:00\", tasks, st, ui);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"coolprogrammer000"},"content":"        String s \u003d tasks.get(0).toString();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(s.contains(\"from: 07/09/2025 16:00:00\"));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(s.contains(\"to: 07/09/2025 17:15:00\"));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"coolprogrammer000"},"content":"        assertEquals(1, st.saveCount);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"coolprogrammer000"},"content":"    void postpone_fromTo_onDeadline_rejectedAtExecute() {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"coolprogrammer000"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(new Deadline(\"report\", LocalDateTime.of(2025, 9, 5, 12, 0, 0)));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"coolprogrammer000"},"content":"        FakeStorage st \u003d new FakeStorage();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"coolprogrammer000"},"content":"        StubUi ui \u003d new StubUi();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"coolprogrammer000"},"content":"        ParseException ex \u003d assertThrows(ParseException.class,","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"coolprogrammer000"},"content":"                () -\u003e parseAndExec(\"postpone 1 /from 05/09/2025 12:30:00 /to 05/09/2025 13:00:00\", tasks, st, ui));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(ex.getMessage().toLowerCase().contains(\"supports\"));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"coolprogrammer000"},"content":"        assertEquals(0, st.saveCount);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"coolprogrammer000"},"content":"    void postpone_event_endBeforeStart_rejected() {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"coolprogrammer000"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"coolprogrammer000"},"content":"        tasks.add(new Event(","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"coolprogrammer000"},"content":"                \"talk\",","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"coolprogrammer000"},"content":"                LocalDateTime.of(2025, 9, 7, 14, 0, 0),","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"coolprogrammer000"},"content":"                LocalDateTime.of(2025, 9, 7, 15, 0, 0)","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"coolprogrammer000"},"content":"        ));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"coolprogrammer000"},"content":"        FakeStorage st \u003d new FakeStorage();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"coolprogrammer000"},"content":"        StubUi ui \u003d new StubUi();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"coolprogrammer000"},"content":"        ParseException ex \u003d assertThrows(ParseException.class,","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"coolprogrammer000"},"content":"                () -\u003e parseAndExec(\"postpone 1 /from 07/09/2025 16:00:00 /to 07/09/2025 15:30:00\", tasks, st, ui));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(ex.getMessage().toLowerCase().contains(\"after start\"));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"coolprogrammer000"},"content":"        assertEquals(0, st.saveCount);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"coolprogrammer000"},"content":"    @Test","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"coolprogrammer000"},"content":"    void postpone_invalidIndex_returnsFriendlyMessage_noSave() throws Exception {","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"coolprogrammer000"},"content":"        TaskList tasks \u003d new TaskList(); // empty","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"coolprogrammer000"},"content":"        FakeStorage st \u003d new FakeStorage();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"coolprogrammer000"},"content":"        StubUi ui \u003d new StubUi();","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"coolprogrammer000"},"content":"","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"coolprogrammer000"},"content":"        CommandResult res \u003d parseAndExec(\"postpone 3 /by 05/09/2025 16:30:45\", tasks, st, ui);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"coolprogrammer000"},"content":"        assertTrue(res.feedback().toLowerCase().contains(\"valid task number\"));","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"coolprogrammer000"},"content":"        assertEquals(0, st.saveCount);","lastModifiedDate":"2025-09-12T22:06:03","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"coolprogrammer000"},"content":"    }","lastModifiedDate":"2025-09-07T16:09:49","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"coolprogrammer000"},"content":"}","lastModifiedDate":"2025-09-07T16:09:44","isFullCredit":false}],"authorContributionMap":{"coolprogrammer000":119}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25T17:23:26","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25T17:23:26","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"coolprogrammer000"},"content":"java -classpath ..\\bin John \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-08-22T12:40:38","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25T00:03:55","isFullCredit":false}],"authorContributionMap":{"-":20,"coolprogrammer000":1}}]
