{"authorDailyContributionsMap":{"Wen-Cong":[{"date":"2025-08-20T00:00:00","commitResults":[{"hash":"c0dee22b24d9883f456db21af1890546ab4a19d0","isMergeCommit":false,"messageTitle":"Rename bot, add function to greet user and exit in new class Bot","messageBody":"Bot name is Duke.\nPrint greet message is written in Main.\n\nChange bot name to personalise bot and differentiate from others\n\nThe function of printing greeting and exiting message can be grouped under Bot for better maintenance of code and scalability.\n\nLet\u0027s\n-  Group all Bot relevant operations under the Bot class instead of writing in the Main program\n","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":40,"deletions":10},"bat":{"insertions":1,"deletions":1}}},{"hash":"a770aca0329dfa033139c2cedcd6128f56d81f13","isMergeCommit":false,"messageTitle":"Add function to read and echo input command given by the user and exit program with command \"bye\"","messageBody":"Add echo and promptUser function under Bot class to allow a Bot to perform these operations\n","fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":2}}},{"hash":"9d10f9417cb37a8f9491c26e964291f4ee2c45ec","isMergeCommit":false,"messageTitle":"Move System.exit() function call from Bot class to main function","messageBody":"Bot is handling System exit to end entire program.\n\nFunction to end program should belong to main function instead. Logic for bot exiting and program exiting can be separated for clarity\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}}]},{"date":"2025-08-21T00:00:00","commitResults":[{"hash":"9b1b72402a23a84b119619c2a852be2e103f2730","isMergeCommit":false,"messageTitle":"Add function to store user-entered text and display text","messageBody":"This change introduces a function that captures and stores any text input\nthe user provides via the console interface, saving it in an array list under bot class for later use or processing.\n\nThis change also introduce new function to list all items stored when \"list\" command is given\n","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":6}}},{"hash":"9edf167e4d6cf213c6dab957f15a9d49354bc494","isMergeCommit":false,"messageTitle":"Add Task class for managing tasks and their completion status","messageBody":"This change introduces the Task class, which represents a single to-do item\nwith a name and a completion status. Each Task instance tracks its own\n\u0027isDone\u0027 state, provides methods to mark the task as done or not done, and\ndisplays status updates via the console.\n\nThe Task class includes:\n- `name`: The name of the task\n- `isDone`: Boolean flag for completion status\n- `markDone()`: Sets the task as done and prints confirmation\n- `markNotDone()`: Sets the task as not done and prints confirmation\n- Overridden `toString()` to display task status and name in a user-friendly format\n","fileTypesAndContributionMap":{"java":{"insertions":42,"deletions":0}}},{"hash":"3447afb7d4131773a91a83047a42259ec4baa1fe","isMergeCommit":false,"messageTitle":"Add functions in Bot class to mark task as done or not done","messageBody":"This change introduces the 2 new functions in Bot class to mark a task as done or not done given a task index number that is shown when displaying task list\n","fileTypesAndContributionMap":{"java":{"insertions":64,"deletions":19}}},{"hash":"87b6d337f3c628e3b832e76806a40d1d8e2f692f","isMergeCommit":false,"messageTitle":"Add logic to allow user to update task status via console input","messageBody":"This change introduces 2 additional switch cases \"mark\" and \"unmark\" to allow users to invoke functions to mark task as done or not done with command input via console.\n","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":8}}},{"hash":"a292cc612674bd81912eb7ec2aa1ef3833cde9c4","isMergeCommit":false,"messageTitle":"Add Todo class extending Task to represent to-do items","messageBody":"This commit introduces the Todo class, a subclass of Task, which represents\na specific type of task categorized as a to-do item.\n\nKey additions:\n- Constructor for creating a Todo by specifying the task name.\n- Overridden toString() method to display the to-do indicator \"[T]\" along with\n  the completion status and task name for improved readability in the console.\n\nThis enhancement enables clearer distinction and display of to-do tasks in the\napplication, laying groundwork for supporting multiple task types in future updates.\n","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":0}}},{"hash":"bf010a2eba93fc9aadfe1792d74fbd2cba6a750b","isMergeCommit":false,"messageTitle":"Make Task class abstract to enable more specific task types","messageBody":"This commit updates the Task class by declaring it as abstract. This change allows for the creation of more specific task subclasses (such as Todo) by enforcing implementation through inheritance rather than direct instantiation.\n\nNow, Task serves as a blueprint for all task types with shared attributes (name, isDone) and behaviors, while preventing the creation of generic Task objects. This improves code structure and extensibility as new task variants are added.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"14efe0f88e10968f70f437120268ccd64a544013","isMergeCommit":false,"messageTitle":"Add Deadline class extending Task to represent tasks with deadlines","messageBody":"This commit introduces the Deadline class, a subclass of Task, designed to\nrepresent tasks that have an associated deadline timestamp.\n\nKey features:\n- Stores a deadline as a string along with the task name\n- Overrides the toString() method to display the task type \"[D]\", status,\n  task name, and the deadline in a user-friendly format\n\nThis addition enhances the bot program by supporting tasks with deadline, enabling users to distinguish and track time-sensitive\ntasks.\n","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":0}}},{"hash":"6fe6cacab4e3a712dc862c1616823708c41e30d2","isMergeCommit":false,"messageTitle":"Add Event class extending Task to represent tasks with start and end time","messageBody":"This commit introduces the Event class, a subclass of Task, designed to\nrepresent tasks that have a start time and end time.\n\nKey features:\n- Stores a startTime and endTime as a string along with the task name\n- Overrides the toString() method to display the task type \"[E]\", status,\n  task name, start time and end time in a user-friendly format\n\nThis addition enhances the bot program by supporting event tasks with start and end time, enabling users to distinguish and track task with a time window.\n","fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":0}}},{"hash":"3d3cf340906d7046a7ac688028dc7807f30ef51a","isMergeCommit":false,"messageTitle":"Add 3 overload addTask function in Bot class to add Todo task, deadline task and event task.","messageBody":"This commit introduce a total of 3 overloaded addTask function in Bot class that creates Todo task, Deadline task or Event task based on the parameters given when adding a task. This creates a layer of abstraction for main class where correct type of Task will be created and added with matching parameters and managed by the Bot class.\n\nThis function added allows user to create task from interaction with Bot class.\n","fileTypesAndContributionMap":{"java":{"insertions":39,"deletions":3}}},{"hash":"50cd91b5a6587ab1deb4aa7e4d73869936e7b2c1","isMergeCommit":false,"messageTitle":"Add switch cases to handle commands for adding Todo task, deadline task and Event task","messageBody":"This commit adds 3 more cases to handle command for creating Todo task, Deadline task and Event task and formating of command inputs to invoke respective functions.\n","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":52,"deletions":3}}},{"hash":"ca4c0e0d61013b83f15965f28aa0714b94857ee6","isMergeCommit":false,"messageTitle":"Add test cases with input.txt and EXPECTED.TXT file updated","messageBody":"Add test cases to test the following functions:\n- Display empty list\n- Add todo task\n- Add deadline task\n- Add event task\n- Display task list with task\n- Mark task as done\n- Mark task as not done\n- Add deadline task with incorrect command\n- Add event task with incorrect command\n- end bot\n","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":14,"deletions":0}}},{"hash":"da93716ba81c4e944deb10ceac78fa0805c244f1","isMergeCommit":false,"messageTitle":"Add new Exception class InvalidCommandException to handle input commands with invalid format","messageBody":"This commit introduce a new exception InvalidCommandException that is to be thrown and managed when a command format input by the user is invalid.\n\nThis can help to identify specific exception for incorrect command format and program can use this exception to ensure the program is robust even when there is a typo in user input\n","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":0}}},{"hash":"63abeac0685f723ec0d1cb73225d96af5e893525","isMergeCommit":false,"messageTitle":"Add exception handling for invalid command when formating user input","messageBody":"The program crashes when user input does not match a given format.\n\nThis commit implements exception handling of incorrect command format entered by the user and print feedback message with the correct command format.\n\nThe feedback message will update user of the correct format which allows user to know the exact correct command to enter instead of guessing for the correct format.\n\nThis reduces frustration of not knowing how to resolve the issue on user side, improving user experience and ensure program robustness.\n","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":90,"deletions":55}}},{"hash":"771b98be6f8d0c537ad7c969563b29a359ea18c8","isMergeCommit":false,"messageTitle":"Replace error print message for invalid task number with throwing InvalidCommandException","messageBody":"This commit replaces the previous approach of printing an error message directly to the console when an invalid task number is encountered with throwing a custom InvalidCommandException.\n\nBy using an exception, the code gains better error handling capabilities, allowing calling methods to catch and respond appropriately rather than just logging the error. This improves code clarity, maintainability, and allows centralized management of invalid command scenarios.\n\nThis change helps enforce a more structured error flow in the application and prepares the codebase for enhanced user feedback or recovery mechanisms in response to invalid task inputs.\n","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":6}}},{"hash":"0141aa6c673928bb9ad5a153cb70759258640565","isMergeCommit":false,"messageTitle":"Add support for deleting tasks from the list","messageBody":"This commit adds functionality to delete tasks from the task list with the command \"delete\" from user input, enhancing the task management capabilities of the application.\n\nThe implementation includes methods to remove a task by its index, with appropriate validations to handle invalid index number. It ensures the task list remains consistent after deletions.\n","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":33,"deletions":0}}}]},{"date":"2025-08-27T00:00:00","commitResults":[{"hash":"58e725fd430224875080aea2b8b58d226ad6c269","isMergeCommit":false,"messageTitle":"Introduce a `toFileString()` method to the `Task` class and its subclasses (`Todo`, `Deadline`, and `Event`) to facilitate saving task data to a file.","messageBody":"This new method returns a string representation of a task\u0027s essential data, formatted for easy parsing. A `boolean` variable indicating completion status (`isDone`) is converted to an integer (`1` or `0`) and appended to the beginning of the string, separated from the task name by a pipe (`|`).\n\n This is a crucial step toward implementing data persistence.\n","fileTypesAndContributionMap":{"java":{"insertions":44,"deletions":0}}},{"hash":"9d8130210edc53fa2f3d7b3b49fbdd5905a7d985","isMergeCommit":false,"messageTitle":"Add file persistence to allow tasks to be written to a file","messageBody":"Added FileServices class: A new utility class using java.nio.file to handle file operations.\n\nEnabled write functionality: The FileServices class includes a writeToFile() method to save the current task list to data/taskData.txt.\n\nIntegrated FileServices into Bot.java: The main application now uses FileServices to automatically save the task list whenever a task is added, removed, or marked as done.\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":148,"deletions":3}}},{"hash":"3cd00565f0af9964a45198373f90698582758055","isMergeCommit":false,"messageTitle":"Add read functionality for task list persistence","messageBody":"This commit completes the file persistence feature by adding the ability to read and load tasks from the `data/taskData.txt` file on application startup. This ensures that the task list persists across sessions.\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":142,"deletions":1}}},{"hash":"0616e81d51910170fa791fff1469a420179a5b07","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-7\u0027","messageBody":"","tags":["Level-7"],"fileTypesAndContributionMap":{}}]},{"date":"2025-08-28T00:00:00","commitResults":[{"hash":"aa9e69af584a43686edb190e50a9d963c4525362","isMergeCommit":false,"messageTitle":"Store Event and Deadline dates as LocalDateTime","messageBody":"Dates in Event and Deadline class is stored as string.\n\nStoring date as string makes it hard to perform date time calculations and operations. Making the difficult to use or manipulate the date field in Deadline or Event.\n\nLet\u0027s:\n- Store date time data field as LocalDateTime\n- Use DateTimeUtils to convert date time to and fro string\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":207,"deletions":42}}},{"hash":"2fb2934a4d57e914d3e7142177323eeb7f3304dd","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-8\u0027","messageBody":"","tags":["Level-8"],"fileTypesAndContributionMap":{}},{"hash":"74eecc45f866f28de0d92f27c0bcd1462b7efc07","isMergeCommit":false,"messageTitle":"Factor Ui operations from Bot class into new class Ui","messageBody":"Ui operations are performed in Bot class.\n\nThis may cause the code to lack modularity and less OOP which may make it harder to maintain as different business logics are placed in same file.\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":154,"deletions":149}}},{"hash":"d3ba69dce4865073b09f6bddaf101ca76da2891e","isMergeCommit":false,"messageTitle":"Factor task list and task list operations into a TaskList class","messageBody":"Task list is manipulated in Bot class.\n\nFactoring out task list operations such as add task, remove task and mark task will make the code more modular and adds a layer of abstraction.\n\nThis improves the code readability and maintainability.\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":166,"deletions":68}}},{"hash":"31c3b9e9de6c514f04e524d7833beb324a8f844a","isMergeCommit":false,"messageTitle":"Move program main logic into a run() function under Bot class","messageBody":"The main logic of reading and execution of commands is in main function.\n\nThis clutters up the main function.\n\nThe reading and execution of commands logic is performed by the Bot. Moving the logic under Bot class improves code clarity\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":144,"deletions":141}}},{"hash":"2f79bde4a30aae7bee2eb8748fb49c44d06ce31e","isMergeCommit":false,"messageTitle":"Fix bug of task list display after exit command is given","messageBody":"Signed-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}}]},{"date":"2025-08-29T00:00:00","commitResults":[{"hash":"16b97e50ed91c3b7ef580ef8e93f52b505e185a4","isMergeCommit":false,"messageTitle":"Extract functions for command operations into Command class","messageBody":"The function of executing operations based on user input command are functions in Bot class.\n\nExtracting each function into an individual command class that inherits from abstract command class utilises polymorphism and abstraction for better code maintainability and scalability.\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":222,"deletions":144}}},{"hash":"6b8328dcdbf98110a27ba99b73d27844e109236d","isMergeCommit":false,"messageTitle":"Add Parser class with parse function to process user input into respective Command","messageBody":"Process user input string and create Command object for execution.\n\nIt avoids cluttering the run() program under Bot class making use of polymorphism for the Command class.\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":153,"deletions":153}}},{"hash":"cecedff588ba3345bc5056f538169c5c0b9754ba","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-MoreOOP\u0027","messageBody":"","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{}},{"hash":"e3d2aff804727b608aff48d3d3fcccf0201cef37","isMergeCommit":false,"messageTitle":"Organise class into suitable java packages","messageBody":"Organise java class into the following packages:\n- bot.ui\n- bot.command\n- bot.task\n- bot.service\n- bot.util\n- bot.exception\n\nThis allows the project structure to be more organised. Which is crucial as project size grows.\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":166,"deletions":51}}},{"hash":"bb9326bd51a1ab2af0dd94c5df77d59a90aab16f","isMergeCommit":false,"messageTitle":"Rename constant variables to uppercase with underscores","messageBody":"To align with java coding standards.\n\nSigned-off-by: Wen-Cong \u003cwencong.dev@gmail.com\u003e\n","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":8}}},{"hash":"480afc2ff9bb1da1792ef462774682538ff6c30e","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-Packages\u0027","messageBody":"","tags":["A-Packages"],"fileTypesAndContributionMap":{}}]}]},"authorFileTypeContributionMap":{"Wen-Cong":{"java":1221,"md":0,"fxml":0,"sh":0,"bat":1,"gradle":0,"txt":14}},"authorContributionVariance":{"Wen-Cong":90990.49},"authorDisplayNameMap":{"Wen-Cong":"CS2103-F12-2 YEO ..CONG"}}
