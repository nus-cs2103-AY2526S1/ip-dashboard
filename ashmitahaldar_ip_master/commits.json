{"authorDailyContributionsMap":{"ashmitahaldar":[{"date":"2025-08-20T00:00:00","commitResults":[{"hash":"45b72c4dd2d840f7e106b40e84e47dddee6a81e9","isMergeCommit":false,"messageTitle":"MayoBot.java: Add skeletal greeting functionality","messageBody":"Chatbot only prints out a \"hello\" message along with a logo.\n\nNo functionality is implemented, and the Duke project is not differentiated from the template.\n\nImplementing the basic skeletal functionality where the bot simple greets the user and exits is the first step to the breadth-first development approach for this project. Also, renaming it will allow for differentiation and adding personal touch.\n\nLet\u0027s add basic functionality to the project where the bot introduces its name, greets the user, and exits. Let\u0027s also rename Duke to MayoBot to add personalization.\n","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":10}}},{"hash":"b3d92b31052d792fda5749ba61de840c71d492c2","isMergeCommit":false,"messageTitle":"MayoBot.java: Add echo command functionality","messageBody":"The skeletal version of the bot only greets the user and exits upon being run.\n\nLet\u0027s improve the skeletal version of the project so that it echos commands entered by the user, and exits when the user types the command `bye`.\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":4}}},{"hash":"c36309d275d63c57b023f2961eb4d550790a6edc","isMergeCommit":false,"messageTitle":"MayoBot.java: Add ability to store and display input text","messageBody":"The bot only repeats user input when entered, and only has the implementation of the exit command \"bye\".\n\nNeed to have some sort of memory of user input and begin implementing more commands for user to interact with the bot.\n\nLet\u0027s add the ability for the bot to store whatever the user inputs, and implement the \"list\" command for the user to list out stored text.\n\nUsing a new TaskList for abstracting operations with regards to storing input text is preferable to maintain OOP principles and simplify implementation.\n","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":2}}}]},{"date":"2025-08-21T00:00:00","commitResults":[{"hash":"442c5d42a2ac2a7d59d4805916334ca40226f9d4","isMergeCommit":false,"messageTitle":"Task related classes: Add classes for Task and TaskList","messageBody":"Tasks are managed in the Task private static class within the main MayoBot class.\n\nAs the project expands, it would be preferable to manage Task and lists of Tasks separately in their own classes.\n\nLet\u0027s add new class files Task.java and TaskList.java to manage these data objects and add corresponding operations to help with managing the code and commands of the main MayoBot chatbot.\n\nUsing separate classes is preferable to maintain OOP principles in the project.\n","fileTypesAndContributionMap":{"java":{"insertions":73,"deletions":0}}},{"hash":"477cde591fa1032e74ced75b3dd92e84ecb86a94","isMergeCommit":false,"messageTitle":"MayoBot.java: Add ability to mark Tasks and done/not done","messageBody":"We can add input items to the bot and keep track of them, but no other operations on each item is possible. The main MayoBot class also does not implement the newly added task and TaskList classes.\n\nWe need to extend the functionality of the bot and add the ability for users to add and keep track of pending tasks.\n\nLet\u0027s add the ability to mark tasks as done, and also add the ability to change the status back to \"not done\" by implementing the Task and TaskList classes.\n\nInterfacing through the class abstraction barrier for Task and TaskList allows us to maintain OOP rpinciples in the project.\n","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":27}}},{"hash":"e524087c297119cfb8dcde24d7fcdffe038e4f66","isMergeCommit":false,"messageTitle":"MayoBot.java and Task classes: Add support for tracking three types of tasks with improved tokenization","messageBody":"The bot only supports adding, marking, and unmarking a generic Task type with a command-switching system that is edious and does not support multiple arguments.\n\nExtending the functionality of the bot to support multiple Task types is preferable. In order to support more commands to add different types of tasks (commands with arguments), an improved command tokenization system is necessary.\n\nLet\u0027s add new classes for three Task types: Todo, Deadline, and Event, while turning the generic Task class into an abstract class. Let us also implement an improved command tokenization and switching system.\n\nTurning the generic Task class into an abstract class supports inheritance (as teach task type will inherit the common functions and attributes). The improved tokenization system implemented using String splitting allows for arguments in commands. The command-switching system has also been abstracted into a private static method for enhanced logic and readability.\n","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":115,"deletions":35}}},{"hash":"b2459db1562a8904cd27cd982b53b9dfac7d1315","isMergeCommit":false,"messageTitle":"text-ui-test: Add tests using I/O redirection technique","messageBody":"The project has files and a script for automated text UI testing, but the input file is empty. The EXPECTED.txt file does not reflect expected outputs after recent iterations to the project.\n\nIn order to flesh out the project and ensure consistency and reliability in future iteration, testing needs to be implemented.\n\nLet\u0027s implement the input.output redirection technique to semi-automate the testing of MayoBot, by adding input commands to input.txt, and adding the exected output in EXPECTED.txt.\n","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":12,"deletions":0},"sh":{"insertions":1,"deletions":1}}},{"hash":"304632088768dacbdd663828e46947de0ad87e2b","isMergeCommit":false,"messageTitle":"MayoBot.java and exception classes: Add exception handling","messageBody":"The chatbot does not support exception handling for incorrect command formats.\n\nEntering an existing command in an incorrect format leads to fatal errors and the program crashing.\n\nLet\u0027s create the generic MayoBotException class and separate exception classes for all implemented commands with arguments, to allow graceful exception/error handling.\n","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":101,"deletions":19}}},{"hash":"250878d354e414d5fc36bcab237fc9acc6481e5d","isMergeCommit":false,"messageTitle":"Task classes: Refactor names to [Task type]Task.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":6}}},{"hash":"d4b28c95716c090540dfc336f974b319fb0ebab9","isMergeCommit":false,"messageTitle":"MayoBot.java and Task-related classes: Add delete task functionality","messageBody":"Deletion of tasks is not supported by the chatbot.\n\nImplementing deletion of tasks xtends the functionality of the bot.\n\nLet\u0027s add support for deleting tasks from the list with the \"delete\" command, while also implementing its respective exception.\n\nAlongside adding functionality for the \"delete\" command and its corresponding exception DeleteException, some refactoring of MayoBot.java and TaskList.java is needed to comply with OOP principles and encapsulation.\n","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":11}}}]},{"date":"2025-08-27T00:00:00","commitResults":[{"hash":"7e74e7eb00a0b2ef52e59ea41ed2509a77356c21","isMergeCommit":false,"messageTitle":"MayoBot: Add Parser and Command classes","messageBody":"The command parsing and execution logic is within the main MayoBot.java file.\n\nIn accordance with OOP principles, it would be more approrpiate to split and organize this logic into its own separate classes.\n\nLet\u0027s create a Parser class that parses user command input, and creates a Command object. Let\u0027s transfer the runCommand() method in the main file to a statis method in the newly-created Command class.\n","fileTypesAndContributionMap":{"java":{"insertions":125,"deletions":95}}}]},{"date":"2025-08-28T00:00:00","commitResults":[{"hash":"388ccef7d9a578e4758bc3eddff8a2a1ac6c37c6","isMergeCommit":false,"messageTitle":"Storage: Add Storage class to save tasks","messageBody":"The chatbot handles lists of tasks, but lists get erased every time the program is terminated.\n\nPersistent storage of tasks saved in the list is needed to improve utility of the chatbot.\n\nLet\u0027s begin to integrate the saving feature by adding a new Storage class to manage stored lists (in a .txt file) and support basic loading and saving operations.\n","fileTypesAndContributionMap":{"java":{"insertions":157,"deletions":4}}},{"hash":"884623a0652a5a9ef4858499da5d443fe20f1aee","isMergeCommit":false,"messageTitle":"Storage and TaskList: Fix saved tasks","messageBody":"When the chatbot saves tasks to user\u0027s local save file, it overwrites existing tasks instead of appending the new task to the saved list.\n\nThis causes issues with the list saving system.\n\nLet\u0027s fix this bug by adding the \u0027true\u0027 argument to the FileWriter object in the Storage\u0027s saveTask() method. Accordingly, let\u0027s implement bug fixes to TaskList\u0027s use of the Storage class.\n","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":5}}},{"hash":"b55a03e75e0db1a228bb5350d8e9cee2ee2e8a4f","isMergeCommit":false,"messageTitle":"Storage: Implement task marked/unmarked changes","messageBody":"The user is unable to save marked/unmarked task as done/not done in the local data file.\n\nThis limits the functionality of the task list saving feature, as user is not able to manipulate task entry after saving.\n\nLet\u0027s allow the user to mark/unmark saved tasks by triggering updation of the saved tasks after the status of a task has been updated.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":8}}},{"hash":"306a50cecfa410b9e5ed401f33d2f8e039a8a596","isMergeCommit":false,"messageTitle":"Storage: Allow task deletion to be saved","messageBody":"Any task deletion is not reflected in the user\u0027s local save data.\n\nThis limits the implementation of the task list saving feature, as it should be able to reflect all changes/manipulations made to the list.\n\nLet\u0027s allow task deletions to be reflected in the save data, by triggering saveTasks() method whenever a task is deleted.\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"daf5f89d446ede9b1df39ff0c82a7fb8d7edf9ac","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-7\u0027","messageBody":"The chatbot does not support saving of task lists on the user\u0027s local device, thus all tasks lists created are deleted every time the chatbot is close.\n\nThis limits the use and practicality of the chatbot\u0027s features.\n\nLet\u0027s implement the save task lists feature developed in the \u0027branch-Level-7\u0027 branch by merging it to the \u0027master\u0027 branch.\n","tags":["Level-7"],"fileTypesAndContributionMap":{}}]},{"date":"2025-08-29T00:00:00","commitResults":[{"hash":"34f195320cdf34834a31efd2cfe6b86030b5c70d","isMergeCommit":false,"messageTitle":"Task classes: Add date/time handling","messageBody":"The chatbot does not understand dates and times for Deadline and Event task entries, as it just takes in String inputs for the by, from, and to fields.\n\nImplementing date/time handling can allow for future operations with tasks and further extensions of the bot\u0027s functionalities.\n\nLet\u0027s implement support for entered date/time entries for tasks by implementing java.time.LocalDateTime in task objects. Let\u0027s also update Parser to be able to parse date/time inputs and raise errors if input is incorrect.\n","fileTypesAndContributionMap":{"java":{"insertions":72,"deletions":14}}},{"hash":"d0805f74968d6073b77428f6b2fb70b383fe063a","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-8\u0027","messageBody":"MayoBot does not support handling of dates and times for task objects, as it only takes in String object inputs for task deadlines/timelines.\n\nThis significantly limiits future scope, utility, and further operations with task entries.\n\nLet\u0027s implement date and time handling within tasks by merging the changes made in the \u0027branch-Level-8\u0027 branch to \u0027master\u0027.\n","tags":["Level-8"],"fileTypesAndContributionMap":{}},{"hash":"39c732589b350078107fbdc726a956bb67c57e6b","isMergeCommit":false,"messageTitle":"Ui and MayoBot: Add Ui class \u0026 simplify program logic","messageBody":"The main code for the bot exists in the main() method for the MayoBot program, with direct UI outputs and messy program logic. As of now, separate classes for Storage, Parser, Commands and TaskList exist.\n\nIn order to simplify code readability and adherence to OOP principles, extracting out closely related code as classes is necessary. One important functionality of the bot that needs to be extracted out into a class is UI.\n\nLet\u0027s extract out all UI related methods into a separate Ui class, and improve the organization of the MayoBot main file by adding private attributes, consstructors, and a run() method that is called in the main() method.\n","fileTypesAndContributionMap":{"java":{"insertions":117,"deletions":67}}},{"hash":"34dd4e9ee5ce8fce24f854ea8bdd083b67b73286","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-MoreOOP\u0027","messageBody":"","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{}},{"hash":"e46cfcd5ba3cfc8927604161fb6fadb032bb1daa","isMergeCommit":false,"messageTitle":"Command class: Display messages through Ui class","messageBody":"When printing message to console, the Command.execute() method directly calls System.out.println() instead of working through the Ui class.\n\nThis violates separation of tasks and responsibilities rule in the code.\n\nLet\u0027s add the showMessage() method to the Ui class and make it so that all messages triggered by Commands are printed to the ui through the Ui class.\n","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":8}}},{"hash":"91ff20bcb85aa351deae090f25daee1ce28d2dfe","isMergeCommit":false,"messageTitle":"Continue organizing classes into packages","messageBody":"Let\u0027s refactor the code in acvcordance to newly created packages.\n","fileTypesAndContributionMap":{"java":{"insertions":69,"deletions":27}}},{"hash":"d86e861c76cc9f2a71fcf0576eb6068bf13d66ca","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-Packages\u0027","messageBody":"All files are currently under a singular directory. Only the exception-related classes are categorized under the mayoBot-exceptions directory.\n\nThis leads to class files being disorganized.\n\nLet\u0027s organize the classes into suitable java packages and refactor the code accordingly.\n","tags":["A-Packages"],"fileTypesAndContributionMap":{}},{"hash":"1564981faa63143931812c0cf5eda9b16c229366","isMergeCommit":true,"messageTitle":"Merge branch \u0027add-gradle-support\u0027","messageBody":"Adding graddle support to the MayoBot project, to automate project builds using Gradle.\n","tags":["A-Gradle"],"fileTypesAndContributionMap":{}}]},{"date":"2025-08-30T00:00:00","commitResults":[{"hash":"d7264225faa3ba89647ff7bba975652168134c78","isMergeCommit":false,"messageTitle":"Add JUnit tests for MayoBot core classes","messageBody":"The chatbot project relies on text input/output tests instead of relying on a more sophisticated test suite.\n\nThis limits the variety and complexity of tests that can be run for MayoBot.\n\nLet\u0027s begin to add JUnit tests for the entire project by createst unit tests for the MayoBot core classes: MayoBot, Command, Parser, Storage, and Ui.\n","fileTypesAndContributionMap":{"java":{"insertions":443,"deletions":1}}},{"hash":"35759b17d76c4e5ce953c93c6d6f2780c5e64e7c","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-JUnit\u0027","messageBody":"Let\u0027s begin to add JUnit tests to test te behaviour of the code.\n","tags":["A-JUnit"],"fileTypesAndContributionMap":{}},{"hash":"166e5db76992ff419be2fb6f9700776500a0b47c","isMergeCommit":false,"messageTitle":"Edit build.gradle to support JAR releases","messageBody":"Let\u0027s edit build.gradle to allow packaging the app as a JAR file.\n","tags":["A-Jar"],"fileTypesAndContributionMap":{"gradle":{"insertions":3,"deletions":2}}}]},{"date":"2025-09-01T00:00:00","commitResults":[{"hash":"2dbe94b2a280d46024efada2745d668f66064e7a","isMergeCommit":false,"messageTitle":"Parser.java: Add JavaDoc comments for class","messageBody":"The project does not have JavaDoc comments for non-private classes and methods.\n\nAdding JavaDoc comments will help improve documentation for the MayoBot chatbot project.\n\nLet\u0027s start by adding JavaDoc comments to the Parser class.\n","fileTypesAndContributionMap":{"java":{"insertions":33,"deletions":0}}},{"hash":"101e32b7ad40f13ef5d49b4d30da990f65218098","isMergeCommit":false,"messageTitle":"Storage, Ui, Command: Add JavaDoc comments","messageBody":"The chatbot code only has JavaDoc comments for the Parser class.\n\nIn line with the goal of improving JavaDoc documentation, we need to add these comments for the rest of the core function classes.\n\nLet\u0027s continue this task by adding JavaDoc comments for Sotrage, Parser and Ui classes and their methods.\n","fileTypesAndContributionMap":{"java":{"insertions":198,"deletions":0}}},{"hash":"f9ba1fe5bb02f533303aacee4fb3fce6649187fb","isMergeCommit":false,"messageTitle":"MayoBot and Task classes: Add JavaDoc comments","messageBody":"The project does not have JavaDoc comments for the main MayoBot class and all Task-related classes (inclduing TaskList).\n\nAs part of the goal of adding JavaDoc documentation, these comments have to be added to the rest of the classes involved in this project.\n\nLet\u0027s do so by adding JavaDoc comments to the following classes: MayoBot, Task, TaskList, TodoTask, DeadlineTask, and EventTask.\n","fileTypesAndContributionMap":{"java":{"insertions":412,"deletions":0}}},{"hash":"aaa2ed12cf02b2949441290892bb445818bc4050","isMergeCommit":false,"messageTitle":"Command: Tweak to fit coding standard","messageBody":"The indentation for the switch case blocks in the Command#execute method do not follow the given Java coding standard.\n\nWe need to fix the indentation to adhere to the coding standard.\n\nLet\u0027s fix the indentation in the switch case block in the specified method.\n","fileTypesAndContributionMap":{"java":{"insertions":97,"deletions":97}}},{"hash":"f0917695641975fd349bd8a76bd476dfd136b212","isMergeCommit":false,"messageTitle":"Command and TaskList: Add \"find\" command","messageBody":"The user cannot search for existing tasks in the saved TaskList.\n\nAdding a \"find\" command for the user to find a task by searching for a keyword in the task description would improve utility of the chatbot.\n\nLet\u0027s add the find command by adding the necessary methods and changes to the TaskList and Command class.\n","fileTypesAndContributionMap":{"java":{"insertions":41,"deletions":0}}}]},{"date":"2025-09-02T00:00:00","commitResults":[{"hash":"5780d49e1c4a1b3093dd7f8b162de17ce7d033d4","isMergeCommit":false,"messageTitle":"Command and TaskList: Separate ui updates from findTask method","messageBody":"The findTask method in TaskList prints out corresponding output directly to the interface from the method itself.\n\nTo maintain separation of tasks, updates and output to UI should be through the Ui class.\n\nLet\u0027s fix this within the \"find\" command implementation and the printTask/printTasks methods in TaskList by ensuring that outputs are displayed through the Ui class.\n\nTo make this change for Command#findTask, changes need to be made to Command#execute as well in the switch/case block for case \"find\".\n","fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":27}}},{"hash":"7a29d3e947d848f20e27e45de0d39f2c1ac32fd1","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-JavaDoc\u0027","messageBody":"The chatbot project code has no JavaDoc comments for any methods or classes.\n\nAdding JavaDoc comments for at least some non-private classes/methods greatly improves documentation.\n\nLet\u0027s start by adding JavaDoc comments for more than half of all non-private classes and methods.\n","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{}},{"hash":"da329ea6f2e2b2aed10ad8f522a5033a0c2535b1","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-CodingStandard\u0027","messageBody":"Some parts of the chatbot project do not adhere to the Java coding standard specified for the project.\n\nIt is imperative the project follows this standard to ensure consistency with the project guidelines.\n\nLet\u0027s fix the coding standard in files, classes, and methods where it failed to do so.\n","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{}},{"hash":"0d71b740a23d1637948abe95388b21cad8735ae0","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-9\u0027","messageBody":"The chatbot does not have any function to search for listed tasks.\n\nAdding a find command would give users a way to find a task by searching for a keyword in the task description.\n\nLet\u0027s add the implemntation for a find command by making changes to the Command and TaskList files.\n","tags":["Level-9"],"fileTypesAndContributionMap":{}}]},{"date":"2025-09-03T00:00:00","commitResults":[{"hash":"d494ee9dc2f9c98d6a2a86ae598cc15661ab6101","isMergeCommit":false,"messageTitle":"Add Checkstyle config files","messageBody":"The MayoBot project does not use checkStyle to check coding style violations.\n\nAdding checkSyle would help with adhering to coding stamdards. In order to implement this, the necessary configuration files need to be added.\n\nLet\u0027s add checkstyle.xml and suppressions.xml to the ./config/checkstyle/ directory.\n","fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0}}},{"hash":"c6722fb09e336d754febbf46964b7c4e20522551","isMergeCommit":false,"messageTitle":"Fix checkStyle violations","messageBody":"After adding checkStyle to the project, running the gradle tasks checkstyleMain and checkstyleTest bring multiple coding standard violations.\n\nIt is important to take note of these results and make changes accordingly.\n\nLet\u0027s fix most of the coding standard violations in the project across the main and test files.\n","fileTypesAndContributionMap":{"java":{"insertions":214,"deletions":189}}},{"hash":"751aa48205d2ac7f0d3369da06f53b0c503ea2a5","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-CheckStyle\u0027","messageBody":"The project does not use checkStyle to check for coding standard violations.\n\nAdding checkStyle would significantly help find coding standard violations and help fix them.\n\nLet\u0027s add and use checkStyle with Gradle to detect coding standrad violations.\n","tags":["A-CheckStyle"],"fileTypesAndContributionMap":{}}]},{"date":"2025-09-06T00:00:00","commitResults":[{"hash":"8e188dba2abf58a4bfc0081771c8ace48834d380","isMergeCommit":false,"messageTitle":"Level-10: Add JavaFX GUI","messageBody":"The chatbot only has a CLI interface.\n\nIn order to enhance user experience and usability of the chatbot, having a GUI interface would be preferable.\n\nLet\u0027s begin to add a GUI to MayoBot using JavaFX technology, by adding the needed classes, corresponding changes to exisying classes, and resources (such as CSS files and images).\n","fileTypesAndContributionMap":{"gradle":{"insertions":28,"deletions":1},"fxml":{"insertions":35,"deletions":0},"java":{"insertions":358,"deletions":45}}},{"hash":"bf7ad990f6f55e60b0efb18f6856b8910cc0bc4f","isMergeCommit":false,"messageTitle":"MayoBot: Allow displaying of exceptions on GUI","messageBody":"The in-progress implementation of the JavaFX GUI does not support displaying of exceptions.\n\nDisplaying exceptions will allow user to use the chatbot more effectively and be guided on how to use comnmands correctly.\n\nLet\u0027s allow display of exceptions on the GUI by returning the exception message in the MayoBot#getResponse() method.\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":18}}},{"hash":"e9870afdcf23ddd49c0312c0331716c4901033bc","isMergeCommit":false,"messageTitle":"GUI: Update styling/formatting","messageBody":"The chatbot GUI has CSS files and styling, but there are still some UI bugs that need to be fixed/improved, such as flipped dialog boxes and padding, and the need to add a text input box placeholder.\n\nMaking styling/formatting changes will create a more aesthetically pleasing user experience.\n\nLet\u0027s make these simple UI changes, along with adding an app icon.\n","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":0}}},{"hash":"ff42bc65bb55aa1abe959431af09dcbfbdbde285","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-10\u0027","messageBody":"The chatbot does not have a GUI, it only has a CLI interface.\n\nAdding a GUI to the chatbot project will allow for a more modern and user-friendly experience.\n\nLet\u0027s add a chat-style GUI to MayoBot using JavaFX.\n","tags":["Level-10"],"fileTypesAndContributionMap":{}},{"hash":"efd13ff3f1725ad3a321bc48de272a2f8aa0ce18","isMergeCommit":false,"messageTitle":"Command: Add buildResponse() method","messageBody":"The execute() method relies on a StringBuilder to construct output responses and returns them.\n\nAbstracting this response building process would enhance readability and consciseness.\n\nLet\u0027s implement a private buildResponse() method (which utilizes varargs) to build return responses for us in the execute() method.\n","fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":21}}},{"hash":"a7dd94a24e7635e8d4adeeea641b57d01f399217","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-Varargs\u0027","messageBody":"The project does not utilize varargs in any class or method.\n\nUsing varargs where applicable would enhance the efficiency and conciseness of the code.\n\nLet\u0027s implement a usage of varargs in the Command.java class, as it seems relevant in the methods here.\n","tags":["A-Varargs","A-FullCommitMessage"],"fileTypesAndContributionMap":{}}]},{"date":"2025-09-10T00:00:00","commitResults":[{"hash":"2f0b2dad9bdb45bbe24f34b6923c2baee3e52e4e","isMergeCommit":false,"messageTitle":"Commands: Separate each Command into classes","messageBody":"Commands are all handled in a singular execute method, with a long switch/case staement block handlung all commands case-by-case.\n\nThe execute() method has multiple code smells, such as weak SLAP and being \"too long\" of a method.\n\nLet\u0027s resolve this by making the Command class an abstract class, and seperating the handling of each Command type into its own class, named as \u003ccommandName\u003eCommand. The execute() method is turned into an abstract method, so that each type of Command can have their own implementation of execute().\n","fileTypesAndContributionMap":{"java":{"insertions":94,"deletions":11}}},{"hash":"d5c4e123d73c837af680147a31a449acd0064ae3","isMergeCommit":false,"messageTitle":"Commands: Separate each Command into classes (contd.) Commands are all handled in a singular execute method, with a long switch/case staement block handlung all commands case-by-case.","messageBody":"The execute() method has multiple code smells, such as weak SLAP and being \"too long\" of a method.\n\nThe previous commit was pushed prematurely, thus the entire implementation was not pushed. This commit contains the missing changes.\nLet\u0027s continue to fix code quality by making the Command class an abstract class, and seperating the handling of each Command type into its own class, named as \u003ccommandName\u003eCommand. The execute() method is turned into an abstract method, so that each type of Command can have their own implementation of execute().\n","fileTypesAndContributionMap":{"java":{"insertions":296,"deletions":204}}},{"hash":"53319235eb1dfd74bf2159feb9d317660be7702c","isMergeCommit":true,"messageTitle":"Merge branch \u0027master\u0027 into branch-A-CodeQuality","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"307221a50475494564d0e96c69de584ff48bade0","isMergeCommit":false,"messageTitle":"Parser: Fix code quality issues","messageBody":"Some methods in the Parser.java class, more specifically pareTaskFromFile() suffered from code quality issues like long methods and magic numbers.\n\nRectifying these mistakes is essential to maintain code quality standards and ensure readable code.\n\nLet\u0027s resolve these code quality issues by refactoring the code in parseTaskFromFile() method.\n","fileTypesAndContributionMap":{"java":{"insertions":55,"deletions":26}}}]},{"date":"2025-09-11T00:00:00","commitResults":[{"hash":"3368edc34391aae077c7cdaf1f1208cf28cc3379","isMergeCommit":false,"messageTitle":"Rename MayoBot package to mayobot and fix checkStyle","messageBody":"The main package for the project is named \"mayoBot\", which does not adhere to the style guide/convention for package names. Additionally, running checkStyles gives rise to multiple errors.\n\nAdhering to style conventions is essential for the individual project.\n\nLet\u0027s begin to resolve these style issues by renaming the MayoBot package to \"mayobot\", and doing necessary refactoring changes. Additionally, let us begin to resolve the checkStyle errors (expect the errors related to missing JavaDoc comments, those will be tackled in a future commit).\n","fileTypesAndContributionMap":{"fxml":{"insertions":1,"deletions":1},"java":{"insertions":138,"deletions":151}}},{"hash":"e10ebcbdf49db002e0afad3bc6c253aeac5c358d","isMergeCommit":false,"messageTitle":"Add missing JavaDoc comments","messageBody":"After significant changes to the codebase, the JavaDoc comments for multiple classes and new methods were not added.\n\nMissing JavaDoc comments are flagged in checkStyle audits and lead to limited documentation of the project.\n\nLet\u0027s add the missing essential JavaDoc comments to the respective classes and methods.\n","fileTypesAndContributionMap":{"java":{"insertions":578,"deletions":10}}},{"hash":"c9708b127fef43ce3fca14343e1eea89ee691245","isMergeCommit":false,"messageTitle":"Fix code quality issues in Storage, Command, Task classes","messageBody":"There are multiple lingering code quality issues in the Storage class, and the Command and Task packages\u0027 classes, such as long methods, weak SLAP, and violations of DRY and KISS principles.\n\nResolving these code quality issues is essential to maintain good quality code and readability.\n\nLet\u0027s resolve these issues in the classes by refactoring methods and creating new methods where necessary, to break down tasks.\n","fileTypesAndContributionMap":{"java":{"insertions":137,"deletions":88}}},{"hash":"56f79f8ae438d4b5804bf7edc3cf0f6a33666849","isMergeCommit":false,"messageTitle":"Update CommandTest.java with update Command classes","messageBody":"The CommandTest class has not been updated with the updated Command constructors and method signatures.\n\nThis issue is causing compile errors when attempting to run tests.\n\nLet\u0027s resolve these compile issues by updating the file to adhere to the new constructor and method signatures.\n","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":6}}},{"hash":"0d14fc196135fd8c4c1f3a0dfe1f7179ff579867","isMergeCommit":false,"messageTitle":"Fix checkStyle issues in JUnit test classes","messageBody":"There are some lingering checkStyle violations in the JUnit test classes.\n\nThese checkStyle violations are causing the CI workflows to fail.\n\nLet\u0027s resolve these checkStyle violations by referring to the raised errors.\n","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":6}}}]},{"date":"2025-09-12T00:00:00","commitResults":[{"hash":"cb26b1d769854c4db06346902c3180a8fb494f5b","isMergeCommit":false,"messageTitle":"Fix code quality in Exception classes","messageBody":"The code in exceptions classes violate DRY and KISS principles.\n\nThis leads to more convoluted code and hampered readability.\n\nLet\u0027s resolve these code quality issues with some simple refactoring.\n","fileTypesAndContributionMap":{"java":{"insertions":78,"deletions":9}}},{"hash":"62720b9e2590ca1f67ae26bd8a3a77945e1916a9","isMergeCommit":false,"messageTitle":"Add assertions in MayoBot.java","messageBody":"The project currently does not have any assertions in the code.\n\nAdding assertions will help document important assumptions that should hold at various points in the code.\n\nLet\u0027s begin to add assertions to the project by adding asserts to the MayoBot.java file.\n","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":0}}},{"hash":"130ac9dee59e404b47d183949f8beae437465213","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-CodeQuality\u0027","messageBody":"","tags":["A-CodeQuality"],"fileTypesAndContributionMap":{}},{"hash":"fd6efefe7e96d54f4c7aae62bfd7c2396c51bfc0","isMergeCommit":true,"messageTitle":"Merge branch \u0027master\u0027 into branch-A-Assertions","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"059cd14ee29b4e82639abb583fbca1de067e960e","isMergeCommit":false,"messageTitle":"Add assertions to taskList.java","messageBody":"The taskList classes does not have any `assert` statements, despite dealing with data inputs traversing through ArrayLists of task objects.\n\nIncluding assert statements will help avoid critical bugs and errors in code.\n\nLet\u0027s add assert statements for the methods in TaskList wherever necessary.\n","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":0}}},{"hash":"2f697f23d115b59acfcb3705bdd705f2d160a64a","isMergeCommit":false,"messageTitle":"Add assertions to Parser.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":0}}},{"hash":"a0348d65c9b2acf2b2d45d269eeaa2d9995e54c4","isMergeCommit":false,"messageTitle":"Add assertions to Storage.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":0}}},{"hash":"19d03f195026e250fb77d22eaec26e512fde4347","isMergeCommit":false,"messageTitle":"Implement streams in TaskList#findTask method","messageBody":"The findTask() method in the TaskList class currently iterates through an ArrayList to find matching tasks.\n\nThis approach could be simplified using a functional approach with Streams.\n\nLet\u0027s modify the body of the function to use a functional stream-based approach.\n","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":10}}},{"hash":"4da5ec2e056019a52ed37110ae2229c55123ea20","isMergeCommit":true,"messageTitle":"Merge pull request #2 from ashmitahaldar/branch-A-Assertions","messageBody":"A-Assertions: Use assertions","tags":["A-Assertions"],"fileTypesAndContributionMap":{}},{"hash":"10793aa8262ad7ce1c7b1223206e382231917573","isMergeCommit":true,"messageTitle":"Merge branch \u0027master\u0027 into branch-A-Streams","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"fe6a05696938e73327593faf8b26ea739d8e01f4","isMergeCommit":false,"messageTitle":"Resolve chnages brought by incorrect merge conflict resolution","messageBody":"While resolving merge conflicts when merging master branch into branch-A-Streams, some incorrect changes were made to TaskList.java.\n\nThese incorrect changes are breaking the implementation of MayoBot.\n\nLet\u0027s make the necessary changes to comply with the version of TaskList in master, along with the main addition of streams.\n","fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":2}}},{"hash":"bb162a02a387b2afd6402d891ce5fe24428ce329","isMergeCommit":false,"messageTitle":"Fix checkStyle errors","messageBody":"After making changes and implementing streams wherever applicable, there are checkStyle violations.\n\nResolving checkStyle violations is important for CI workflow to run properly.\n\nLet\u0027s fix the raised checkStyle violations in the code.\n","fileTypesAndContributionMap":{"java":{"insertions":37,"deletions":25}}},{"hash":"d687a8bfad3f145de71e6870548ebab0bfe18e3a","isMergeCommit":true,"messageTitle":"Merge pull request #3 from ashmitahaldar/branch-A-Streams","messageBody":"A-Streams: Use Streams","tags":["A-Streams"],"fileTypesAndContributionMap":{}},{"hash":"51a6841b5688380c3df371b6d62c66382adf6683","isMergeCommit":false,"messageTitle":"Fix wildcard issue in runtest.sh","messageBody":"The CI workflow fails due to runtest.sh not finding ../src/main/java/*.java .\n\nResolving this error is crucial to get the CI workflow running.\n\nLet\u0027s fix this wildcard issue in runtest.sh and see if that fixes the error.\n","fileTypesAndContributionMap":{"sh":{"insertions":1,"deletions":1}}},{"hash":"70fb680bb0bd4b92873eba9c0026d9ed1a317a78","isMergeCommit":false,"messageTitle":"Fix MayoBotTest.java tests to work on Windows","messageBody":"The mayoBot_loadTaskList_ioException() JUnit test for Ubuntu/MacOS passes but fails for Windows due to the invalid file path actually being valid in Windows.\n\nThis causes inconsistency in the CI workflow results.\n\nLet\u0027s fix the test method to account for Windows OS running the test.\n","tags":["A-CI"],"fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":1}}}]}]},"authorFileTypeContributionMap":{"ashmitahaldar":{"java":3088,"md":0,"fxml":35,"sh":2,"bat":0,"gradle":35,"txt":12}},"authorContributionVariance":{"ashmitahaldar":77583.07},"authorDisplayNameMap":{"ashmitahaldar":"CS2103T-W09-1 HALD..MITA"}}
