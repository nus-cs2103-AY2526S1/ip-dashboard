{"authorDailyContributionsMap":{"ashmitahaldar":[{"date":"2025-08-20T00:00:00","commitResults":[{"hash":"45b72c4dd2d840f7e106b40e84e47dddee6a81e9","isMergeCommit":false,"messageTitle":"MayoBot.java: Add skeletal greeting functionality","messageBody":"Chatbot only prints out a \"hello\" message along with a logo.\n\nNo functionality is implemented, and the Duke project is not differentiated from the template.\n\nImplementing the basic skeletal functionality where the bot simple greets the user and exits is the first step to the breadth-first development approach for this project. Also, renaming it will allow for differentiation and adding personal touch.\n\nLet\u0027s add basic functionality to the project where the bot introduces its name, greets the user, and exits. Let\u0027s also rename Duke to MayoBot to add personalization.\n","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":10}}},{"hash":"b3d92b31052d792fda5749ba61de840c71d492c2","isMergeCommit":false,"messageTitle":"MayoBot.java: Add echo command functionality","messageBody":"The skeletal version of the bot only greets the user and exits upon being run.\n\nLet\u0027s improve the skeletal version of the project so that it echos commands entered by the user, and exits when the user types the command `bye`.\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":4}}},{"hash":"c36309d275d63c57b023f2961eb4d550790a6edc","isMergeCommit":false,"messageTitle":"MayoBot.java: Add ability to store and display input text","messageBody":"The bot only repeats user input when entered, and only has the implementation of the exit command \"bye\".\n\nNeed to have some sort of memory of user input and begin implementing more commands for user to interact with the bot.\n\nLet\u0027s add the ability for the bot to store whatever the user inputs, and implement the \"list\" command for the user to list out stored text.\n\nUsing a new TaskList for abstracting operations with regards to storing input text is preferable to maintain OOP principles and simplify implementation.\n","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":2}}}]},{"date":"2025-08-21T00:00:00","commitResults":[{"hash":"442c5d42a2ac2a7d59d4805916334ca40226f9d4","isMergeCommit":false,"messageTitle":"Task related classes: Add classes for Task and TaskList","messageBody":"Tasks are managed in the Task private static class within the main MayoBot class.\n\nAs the project expands, it would be preferable to manage Task and lists of Tasks separately in their own classes.\n\nLet\u0027s add new class files Task.java and TaskList.java to manage these data objects and add corresponding operations to help with managing the code and commands of the main MayoBot chatbot.\n\nUsing separate classes is preferable to maintain OOP principles in the project.\n","fileTypesAndContributionMap":{"java":{"insertions":73,"deletions":0}}},{"hash":"477cde591fa1032e74ced75b3dd92e84ecb86a94","isMergeCommit":false,"messageTitle":"MayoBot.java: Add ability to mark Tasks and done/not done","messageBody":"We can add input items to the bot and keep track of them, but no other operations on each item is possible. The main MayoBot class also does not implement the newly added task and TaskList classes.\n\nWe need to extend the functionality of the bot and add the ability for users to add and keep track of pending tasks.\n\nLet\u0027s add the ability to mark tasks as done, and also add the ability to change the status back to \"not done\" by implementing the Task and TaskList classes.\n\nInterfacing through the class abstraction barrier for Task and TaskList allows us to maintain OOP rpinciples in the project.\n","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":27}}},{"hash":"e524087c297119cfb8dcde24d7fcdffe038e4f66","isMergeCommit":false,"messageTitle":"MayoBot.java and Task classes: Add support for tracking three types of tasks with improved tokenization","messageBody":"The bot only supports adding, marking, and unmarking a generic Task type with a command-switching system that is edious and does not support multiple arguments.\n\nExtending the functionality of the bot to support multiple Task types is preferable. In order to support more commands to add different types of tasks (commands with arguments), an improved command tokenization system is necessary.\n\nLet\u0027s add new classes for three Task types: Todo, Deadline, and Event, while turning the generic Task class into an abstract class. Let us also implement an improved command tokenization and switching system.\n\nTurning the generic Task class into an abstract class supports inheritance (as teach task type will inherit the common functions and attributes). The improved tokenization system implemented using String splitting allows for arguments in commands. The command-switching system has also been abstracted into a private static method for enhanced logic and readability.\n","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":115,"deletions":35}}}]}]},"authorFileTypeContributionMap":{"ashmitahaldar":{"java":230,"md":0,"fxml":0,"sh":0,"bat":0,"gradle":0,"txt":0}},"authorContributionVariance":{"ashmitahaldar":5563.4077},"authorDisplayNameMap":{"ashmitahaldar":"HALD..MITA"}}
