{"authorDailyContributionsMap":{"ashmitahaldar":[{"date":"2025-08-20T00:00:00","commitResults":[{"hash":"45b72c4dd2d840f7e106b40e84e47dddee6a81e9","isMergeCommit":false,"messageTitle":"MayoBot.java: Add skeletal greeting functionality","messageBody":"Chatbot only prints out a \"hello\" message along with a logo.\n\nNo functionality is implemented, and the Duke project is not differentiated from the template.\n\nImplementing the basic skeletal functionality where the bot simple greets the user and exits is the first step to the breadth-first development approach for this project. Also, renaming it will allow for differentiation and adding personal touch.\n\nLet\u0027s add basic functionality to the project where the bot introduces its name, greets the user, and exits. Let\u0027s also rename Duke to MayoBot to add personalization.\n","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":10}}},{"hash":"b3d92b31052d792fda5749ba61de840c71d492c2","isMergeCommit":false,"messageTitle":"MayoBot.java: Add echo command functionality","messageBody":"The skeletal version of the bot only greets the user and exits upon being run.\n\nLet\u0027s improve the skeletal version of the project so that it echos commands entered by the user, and exits when the user types the command `bye`.\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":4}}},{"hash":"c36309d275d63c57b023f2961eb4d550790a6edc","isMergeCommit":false,"messageTitle":"MayoBot.java: Add ability to store and display input text","messageBody":"The bot only repeats user input when entered, and only has the implementation of the exit command \"bye\".\n\nNeed to have some sort of memory of user input and begin implementing more commands for user to interact with the bot.\n\nLet\u0027s add the ability for the bot to store whatever the user inputs, and implement the \"list\" command for the user to list out stored text.\n\nUsing a new TaskList for abstracting operations with regards to storing input text is preferable to maintain OOP principles and simplify implementation.\n","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":2}}}]},{"date":"2025-08-21T00:00:00","commitResults":[{"hash":"442c5d42a2ac2a7d59d4805916334ca40226f9d4","isMergeCommit":false,"messageTitle":"Task related classes: Add classes for Task and TaskList","messageBody":"Tasks are managed in the Task private static class within the main MayoBot class.\n\nAs the project expands, it would be preferable to manage Task and lists of Tasks separately in their own classes.\n\nLet\u0027s add new class files Task.java and TaskList.java to manage these data objects and add corresponding operations to help with managing the code and commands of the main MayoBot chatbot.\n\nUsing separate classes is preferable to maintain OOP principles in the project.\n","fileTypesAndContributionMap":{"java":{"insertions":73,"deletions":0}}},{"hash":"477cde591fa1032e74ced75b3dd92e84ecb86a94","isMergeCommit":false,"messageTitle":"MayoBot.java: Add ability to mark Tasks and done/not done","messageBody":"We can add input items to the bot and keep track of them, but no other operations on each item is possible. The main MayoBot class also does not implement the newly added task and TaskList classes.\n\nWe need to extend the functionality of the bot and add the ability for users to add and keep track of pending tasks.\n\nLet\u0027s add the ability to mark tasks as done, and also add the ability to change the status back to \"not done\" by implementing the Task and TaskList classes.\n\nInterfacing through the class abstraction barrier for Task and TaskList allows us to maintain OOP rpinciples in the project.\n","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":27}}},{"hash":"e524087c297119cfb8dcde24d7fcdffe038e4f66","isMergeCommit":false,"messageTitle":"MayoBot.java and Task classes: Add support for tracking three types of tasks with improved tokenization","messageBody":"The bot only supports adding, marking, and unmarking a generic Task type with a command-switching system that is edious and does not support multiple arguments.\n\nExtending the functionality of the bot to support multiple Task types is preferable. In order to support more commands to add different types of tasks (commands with arguments), an improved command tokenization system is necessary.\n\nLet\u0027s add new classes for three Task types: Todo, Deadline, and Event, while turning the generic Task class into an abstract class. Let us also implement an improved command tokenization and switching system.\n\nTurning the generic Task class into an abstract class supports inheritance (as teach task type will inherit the common functions and attributes). The improved tokenization system implemented using String splitting allows for arguments in commands. The command-switching system has also been abstracted into a private static method for enhanced logic and readability.\n","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":115,"deletions":35}}},{"hash":"b2459db1562a8904cd27cd982b53b9dfac7d1315","isMergeCommit":false,"messageTitle":"text-ui-test: Add tests using I/O redirection technique","messageBody":"The project has files and a script for automated text UI testing, but the input file is empty. The EXPECTED.txt file does not reflect expected outputs after recent iterations to the project.\n\nIn order to flesh out the project and ensure consistency and reliability in future iteration, testing needs to be implemented.\n\nLet\u0027s implement the input.output redirection technique to semi-automate the testing of MayoBot, by adding input commands to input.txt, and adding the exected output in EXPECTED.txt.\n","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":12,"deletions":0},"sh":{"insertions":1,"deletions":1}}},{"hash":"304632088768dacbdd663828e46947de0ad87e2b","isMergeCommit":false,"messageTitle":"MayoBot.java and exception classes: Add exception handling","messageBody":"The chatbot does not support exception handling for incorrect command formats.\n\nEntering an existing command in an incorrect format leads to fatal errors and the program crashing.\n\nLet\u0027s create the generic MayoBotException class and separate exception classes for all implemented commands with arguments, to allow graceful exception/error handling.\n","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":101,"deletions":19}}},{"hash":"250878d354e414d5fc36bcab237fc9acc6481e5d","isMergeCommit":false,"messageTitle":"Task classes: Refactor names to [Task type]Task.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":6}}},{"hash":"d4b28c95716c090540dfc336f974b319fb0ebab9","isMergeCommit":false,"messageTitle":"MayoBot.java and Task-related classes: Add delete task functionality","messageBody":"Deletion of tasks is not supported by the chatbot.\n\nImplementing deletion of tasks xtends the functionality of the bot.\n\nLet\u0027s add support for deleting tasks from the list with the \"delete\" command, while also implementing its respective exception.\n\nAlongside adding functionality for the \"delete\" command and its corresponding exception DeleteException, some refactoring of MayoBot.java and TaskList.java is needed to comply with OOP principles and encapsulation.\n","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":11}}}]},{"date":"2025-08-27T00:00:00","commitResults":[{"hash":"7e74e7eb00a0b2ef52e59ea41ed2509a77356c21","isMergeCommit":false,"messageTitle":"MayoBot: Add Parser and Command classes","messageBody":"The command parsing and execution logic is within the main MayoBot.java file.\n\nIn accordance with OOP principles, it would be more approrpiate to split and organize this logic into its own separate classes.\n\nLet\u0027s create a Parser class that parses user command input, and creates a Command object. Let\u0027s transfer the runCommand() method in the main file to a statis method in the newly-created Command class.\n","fileTypesAndContributionMap":{"java":{"insertions":125,"deletions":95}}}]},{"date":"2025-08-28T00:00:00","commitResults":[{"hash":"388ccef7d9a578e4758bc3eddff8a2a1ac6c37c6","isMergeCommit":false,"messageTitle":"Storage: Add Storage class to save tasks","messageBody":"The chatbot handles lists of tasks, but lists get erased every time the program is terminated.\n\nPersistent storage of tasks saved in the list is needed to improve utility of the chatbot.\n\nLet\u0027s begin to integrate the saving feature by adding a new Storage class to manage stored lists (in a .txt file) and support basic loading and saving operations.\n","fileTypesAndContributionMap":{"java":{"insertions":157,"deletions":4}}},{"hash":"884623a0652a5a9ef4858499da5d443fe20f1aee","isMergeCommit":false,"messageTitle":"Storage and TaskList: Fix saved tasks","messageBody":"When the chatbot saves tasks to user\u0027s local save file, it overwrites existing tasks instead of appending the new task to the saved list.\n\nThis causes issues with the list saving system.\n\nLet\u0027s fix this bug by adding the \u0027true\u0027 argument to the FileWriter object in the Storage\u0027s saveTask() method. Accordingly, let\u0027s implement bug fixes to TaskList\u0027s use of the Storage class.\n","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":5}}},{"hash":"b55a03e75e0db1a228bb5350d8e9cee2ee2e8a4f","isMergeCommit":false,"messageTitle":"Storage: Implement task marked/unmarked changes","messageBody":"The user is unable to save marked/unmarked task as done/not done in the local data file.\n\nThis limits the functionality of the task list saving feature, as user is not able to manipulate task entry after saving.\n\nLet\u0027s allow the user to mark/unmark saved tasks by triggering updation of the saved tasks after the status of a task has been updated.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":8}}},{"hash":"306a50cecfa410b9e5ed401f33d2f8e039a8a596","isMergeCommit":false,"messageTitle":"Storage: Allow task deletion to be saved","messageBody":"Any task deletion is not reflected in the user\u0027s local save data.\n\nThis limits the implementation of the task list saving feature, as it should be able to reflect all changes/manipulations made to the list.\n\nLet\u0027s allow task deletions to be reflected in the save data, by triggering saveTasks() method whenever a task is deleted.\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"daf5f89d446ede9b1df39ff0c82a7fb8d7edf9ac","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-7\u0027","messageBody":"The chatbot does not support saving of task lists on the user\u0027s local device, thus all tasks lists created are deleted every time the chatbot is close.\n\nThis limits the use and practicality of the chatbot\u0027s features.\n\nLet\u0027s implement the save task lists feature developed in the \u0027branch-Level-7\u0027 branch by merging it to the \u0027master\u0027 branch.\n","tags":["Level-7"],"fileTypesAndContributionMap":{}}]}]},"authorFileTypeContributionMap":{"ashmitahaldar":{"java":518,"md":0,"fxml":0,"sh":1,"bat":0,"gradle":0,"txt":12}},"authorContributionVariance":{"ashmitahaldar":12884.248},"authorDisplayNameMap":{"ashmitahaldar":"CS2103T-W09-1 HALD..MITA"}}
